
ProjektMikroprocesoryBMP280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000473c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  08004848  08004848  00014848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a7c  08004a7c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004a7c  08004a7c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a7c  08004a7c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a7c  08004a7c  00014a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a80  08004a80  00014a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004a84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002990  20000070  08004af4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002a00  08004af4  00022a00  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ddcb  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e5f  00000000  00000000  0002de64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f08  00000000  00000000  0002fcc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e78  00000000  00000000  00030bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170cf  00000000  00000000  00031a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001063e  00000000  00000000  00048b17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d0df  00000000  00000000  00059155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e6234  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004500  00000000  00000000  000e6284  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004830 	.word	0x08004830

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004830 	.word	0x08004830

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <USART_kbhit>:
	}
}
*/

uint8_t USART_kbhit()
{
 800015c:	b480      	push	{r7}
 800015e:	af00      	add	r7, sp, #0
	if(USART_RX_EMPTY==USART_RX_BUSY)
 8000160:	4b06      	ldr	r3, [pc, #24]	; (800017c <USART_kbhit+0x20>)
 8000162:	681a      	ldr	r2, [r3, #0]
 8000164:	4b06      	ldr	r3, [pc, #24]	; (8000180 <USART_kbhit+0x24>)
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	429a      	cmp	r2, r3
 800016a:	d101      	bne.n	8000170 <USART_kbhit+0x14>
	{
		return 0;
 800016c:	2300      	movs	r3, #0
 800016e:	e000      	b.n	8000172 <USART_kbhit+0x16>
	}else
	{
		return 1;
 8000170:	2301      	movs	r3, #1
	}
}//USART_kbhit
 8000172:	4618      	mov	r0, r3
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000944 	.word	0x20000944
 8000180:	20000948 	.word	0x20000948

08000184 <USART_getchar>:

int16_t USART_getchar()
{
 8000184:	b480      	push	{r7}
 8000186:	b083      	sub	sp, #12
 8000188:	af00      	add	r7, sp, #0
	int16_t tmp;
	if(USART_RX_EMPTY!=USART_RX_BUSY)
 800018a:	4b10      	ldr	r3, [pc, #64]	; (80001cc <USART_getchar+0x48>)
 800018c:	681a      	ldr	r2, [r3, #0]
 800018e:	4b10      	ldr	r3, [pc, #64]	; (80001d0 <USART_getchar+0x4c>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	429a      	cmp	r2, r3
 8000194:	d014      	beq.n	80001c0 <USART_getchar+0x3c>
	{
		tmp=USART_RxBUF[USART_RX_BUSY];
 8000196:	4b0e      	ldr	r3, [pc, #56]	; (80001d0 <USART_getchar+0x4c>)
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	4a0e      	ldr	r2, [pc, #56]	; (80001d4 <USART_getchar+0x50>)
 800019c:	5cd3      	ldrb	r3, [r2, r3]
 800019e:	80fb      	strh	r3, [r7, #6]
		USART_RX_BUSY++;
 80001a0:	4b0b      	ldr	r3, [pc, #44]	; (80001d0 <USART_getchar+0x4c>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	3301      	adds	r3, #1
 80001a6:	4a0a      	ldr	r2, [pc, #40]	; (80001d0 <USART_getchar+0x4c>)
 80001a8:	6013      	str	r3, [r2, #0]
		if(USART_RX_BUSY >= USART_RXBUF_LEN)USART_RX_BUSY=0;
 80001aa:	4b09      	ldr	r3, [pc, #36]	; (80001d0 <USART_getchar+0x4c>)
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80001b2:	db02      	blt.n	80001ba <USART_getchar+0x36>
 80001b4:	4b06      	ldr	r3, [pc, #24]	; (80001d0 <USART_getchar+0x4c>)
 80001b6:	2200      	movs	r2, #0
 80001b8:	601a      	str	r2, [r3, #0]
		return tmp;
 80001ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80001be:	e000      	b.n	80001c2 <USART_getchar+0x3e>
	}else return 0;
 80001c0:	2300      	movs	r3, #0
}
 80001c2:	4618      	mov	r0, r3
 80001c4:	370c      	adds	r7, #12
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bc80      	pop	{r7}
 80001ca:	4770      	bx	lr
 80001cc:	20000944 	.word	0x20000944
 80001d0:	20000948 	.word	0x20000948
 80001d4:	20000554 	.word	0x20000554

080001d8 <USART_getline>:

uint8_t USART_getline(char *buf)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b084      	sub	sp, #16
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
	static uint8_t bf[300]; //bufor pomocniczy
	int i;

	// Pobieranie danych, jeżeli znajdują się w buforze
	while(USART_kbhit())
 80001e0:	e068      	b.n	80002b4 <USART_getline+0xdc>
	{
		bf[dlugosc_ramki]=USART_getchar();
 80001e2:	f7ff ffcf 	bl	8000184 <USART_getchar>
 80001e6:	4603      	mov	r3, r0
 80001e8:	4619      	mov	r1, r3
 80001ea:	4b37      	ldr	r3, [pc, #220]	; (80002c8 <USART_getline+0xf0>)
 80001ec:	881b      	ldrh	r3, [r3, #0]
 80001ee:	461a      	mov	r2, r3
 80001f0:	b2c9      	uxtb	r1, r1
 80001f2:	4b36      	ldr	r3, [pc, #216]	; (80002cc <USART_getline+0xf4>)
 80001f4:	5499      	strb	r1, [r3, r2]

		// Wyświetlanie znaków
		USART_fsend("%c",bf[dlugosc_ramki]);
 80001f6:	4b34      	ldr	r3, [pc, #208]	; (80002c8 <USART_getline+0xf0>)
 80001f8:	881b      	ldrh	r3, [r3, #0]
 80001fa:	461a      	mov	r2, r3
 80001fc:	4b33      	ldr	r3, [pc, #204]	; (80002cc <USART_getline+0xf4>)
 80001fe:	5c9b      	ldrb	r3, [r3, r2]
 8000200:	4619      	mov	r1, r3
 8000202:	4833      	ldr	r0, [pc, #204]	; (80002d0 <USART_getline+0xf8>)
 8000204:	f000 f86a 	bl	80002dc <USART_fsend>

		if(bf[dlugosc_ramki]==60)
 8000208:	4b2f      	ldr	r3, [pc, #188]	; (80002c8 <USART_getline+0xf0>)
 800020a:	881b      	ldrh	r3, [r3, #0]
 800020c:	461a      	mov	r2, r3
 800020e:	4b2f      	ldr	r3, [pc, #188]	; (80002cc <USART_getline+0xf4>)
 8000210:	5c9b      	ldrb	r3, [r3, r2]
 8000212:	2b3c      	cmp	r3, #60	; 0x3c
 8000214:	d108      	bne.n	8000228 <USART_getline+0x50>
		{
			// Pomijanie znaku w zapisie danych do tablicy
			//sprawdzenie czy odnaleziono znak "<"
			dlugosc_ramki=0;
 8000216:	4b2c      	ldr	r3, [pc, #176]	; (80002c8 <USART_getline+0xf0>)
 8000218:	2200      	movs	r2, #0
 800021a:	801a      	strh	r2, [r3, #0]
			znak_poczatku=1;
 800021c:	4b2d      	ldr	r3, [pc, #180]	; (80002d4 <USART_getline+0xfc>)
 800021e:	2201      	movs	r2, #1
 8000220:	601a      	str	r2, [r3, #0]
			znak_konca=0;
 8000222:	4b2d      	ldr	r3, [pc, #180]	; (80002d8 <USART_getline+0x100>)
 8000224:	2200      	movs	r2, #0
 8000226:	601a      	str	r2, [r3, #0]
		}
		if(bf[dlugosc_ramki]==62 && znak_poczatku==1 && znak_konca==0)
 8000228:	4b27      	ldr	r3, [pc, #156]	; (80002c8 <USART_getline+0xf0>)
 800022a:	881b      	ldrh	r3, [r3, #0]
 800022c:	461a      	mov	r2, r3
 800022e:	4b27      	ldr	r3, [pc, #156]	; (80002cc <USART_getline+0xf4>)
 8000230:	5c9b      	ldrb	r3, [r3, r2]
 8000232:	2b3e      	cmp	r3, #62	; 0x3e
 8000234:	d12d      	bne.n	8000292 <USART_getline+0xba>
 8000236:	4b27      	ldr	r3, [pc, #156]	; (80002d4 <USART_getline+0xfc>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	2b01      	cmp	r3, #1
 800023c:	d129      	bne.n	8000292 <USART_getline+0xba>
 800023e:	4b26      	ldr	r3, [pc, #152]	; (80002d8 <USART_getline+0x100>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	2b00      	cmp	r3, #0
 8000244:	d125      	bne.n	8000292 <USART_getline+0xba>
		{
			znak_konca = 1;
 8000246:	4b24      	ldr	r3, [pc, #144]	; (80002d8 <USART_getline+0x100>)
 8000248:	2201      	movs	r2, #1
 800024a:	601a      	str	r2, [r3, #0]
			//jesli podalismy wiecej znakow niz minimalna dlugosc ramki
			if(dlugosc_ramki >= 13)
 800024c:	4b1e      	ldr	r3, [pc, #120]	; (80002c8 <USART_getline+0xf0>)
 800024e:	881b      	ldrh	r3, [r3, #0]
 8000250:	2b0c      	cmp	r3, #12
 8000252:	d917      	bls.n	8000284 <USART_getline+0xac>
			{	// Zwracanie pobranych znaków do tablicy użytej jako argument funkcji
				for(i=0;i<=dlugosc_ramki;i++)
 8000254:	2300      	movs	r3, #0
 8000256:	60fb      	str	r3, [r7, #12]
 8000258:	e00a      	b.n	8000270 <USART_getline+0x98>
				{
					buf[i]=bf[i];//zapis do bufora
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	687a      	ldr	r2, [r7, #4]
 800025e:	4413      	add	r3, r2
 8000260:	491a      	ldr	r1, [pc, #104]	; (80002cc <USART_getline+0xf4>)
 8000262:	68fa      	ldr	r2, [r7, #12]
 8000264:	440a      	add	r2, r1
 8000266:	7812      	ldrb	r2, [r2, #0]
 8000268:	701a      	strb	r2, [r3, #0]
				for(i=0;i<=dlugosc_ramki;i++)
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	3301      	adds	r3, #1
 800026e:	60fb      	str	r3, [r7, #12]
 8000270:	4b15      	ldr	r3, [pc, #84]	; (80002c8 <USART_getline+0xf0>)
 8000272:	881b      	ldrh	r3, [r3, #0]
 8000274:	461a      	mov	r2, r3
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	4293      	cmp	r3, r2
 800027a:	ddee      	ble.n	800025a <USART_getline+0x82>
				}
				return dlugosc_ramki;// Zwracanie ilości odebranych znaków
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <USART_getline+0xf0>)
 800027e:	881b      	ldrh	r3, [r3, #0]
 8000280:	b2db      	uxtb	r3, r3
 8000282:	e01d      	b.n	80002c0 <USART_getline+0xe8>
			}
			dlugosc_ramki = 0;
 8000284:	4b10      	ldr	r3, [pc, #64]	; (80002c8 <USART_getline+0xf0>)
 8000286:	2200      	movs	r2, #0
 8000288:	801a      	strh	r2, [r3, #0]
			znak_poczatku = 0;
 800028a:	4b12      	ldr	r3, [pc, #72]	; (80002d4 <USART_getline+0xfc>)
 800028c:	2200      	movs	r2, #0
 800028e:	601a      	str	r2, [r3, #0]
 8000290:	e010      	b.n	80002b4 <USART_getline+0xdc>
		}else
		{
			dlugosc_ramki++;
 8000292:	4b0d      	ldr	r3, [pc, #52]	; (80002c8 <USART_getline+0xf0>)
 8000294:	881b      	ldrh	r3, [r3, #0]
 8000296:	3301      	adds	r3, #1
 8000298:	b29a      	uxth	r2, r3
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <USART_getline+0xf0>)
 800029c:	801a      	strh	r2, [r3, #0]

			if(dlugosc_ramki>=269)
 800029e:	4b0a      	ldr	r3, [pc, #40]	; (80002c8 <USART_getline+0xf0>)
 80002a0:	881b      	ldrh	r3, [r3, #0]
 80002a2:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 80002a6:	d905      	bls.n	80002b4 <USART_getline+0xdc>
			{
				dlugosc_ramki=0;
 80002a8:	4b07      	ldr	r3, [pc, #28]	; (80002c8 <USART_getline+0xf0>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	801a      	strh	r2, [r3, #0]
				znak_poczatku=0;
 80002ae:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <USART_getline+0xfc>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	601a      	str	r2, [r3, #0]
	while(USART_kbhit())
 80002b4:	f7ff ff52 	bl	800015c <USART_kbhit>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d191      	bne.n	80001e2 <USART_getline+0xa>
			}
		}
	}
		return 0;
 80002be:	2300      	movs	r3, #0
}//USART_getline
 80002c0:	4618      	mov	r0, r3
 80002c2:	3710      	adds	r7, #16
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	2000095a 	.word	0x2000095a
 80002cc:	200028bc 	.word	0x200028bc
 80002d0:	08004848 	.word	0x08004848
 80002d4:	20000968 	.word	0x20000968
 80002d8:	20000964 	.word	0x20000964

080002dc <USART_fsend>:

void USART_fsend(char* format,...)
{
 80002dc:	b40f      	push	{r0, r1, r2, r3}
 80002de:	b580      	push	{r7, lr}
 80002e0:	b0c8      	sub	sp, #288	; 0x120
 80002e2:	af00      	add	r7, sp, #0
	char tmp_rs[269];
	int i;
	__IO int idx;
	va_list arglist;
	va_start(arglist,format);
 80002e4:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 80002e8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80002ec:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80002f0:	601a      	str	r2, [r3, #0]
	vsprintf(tmp_rs,format,arglist);
 80002f2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80002f6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80002fa:	f107 000c 	add.w	r0, r7, #12
 80002fe:	681a      	ldr	r2, [r3, #0]
 8000300:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8000304:	f003 fe3e 	bl	8003f84 <vsiprintf>
	va_end(arglist);
	idx=USART_TX_EMPTY;
 8000308:	4b42      	ldr	r3, [pc, #264]	; (8000414 <USART_fsend+0x138>)
 800030a:	681a      	ldr	r2, [r3, #0]
 800030c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000310:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000314:	601a      	str	r2, [r3, #0]

	for(i=0;i<strlen(tmp_rs);i++)
 8000316:	2300      	movs	r3, #0
 8000318:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800031c:	e02c      	b.n	8000378 <USART_fsend+0x9c>
	{
		USART_TxBUF[idx]=tmp_rs[i];
 800031e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000322:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800032c:	f5a2 718a 	sub.w	r1, r2, #276	; 0x114
 8000330:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000334:	440a      	add	r2, r1
 8000336:	7811      	ldrb	r1, [r2, #0]
 8000338:	4a37      	ldr	r2, [pc, #220]	; (8000418 <USART_fsend+0x13c>)
 800033a:	54d1      	strb	r1, [r2, r3]
		idx++;
 800033c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000340:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	1c5a      	adds	r2, r3, #1
 8000348:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800034c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000350:	601a      	str	r2, [r3, #0]
		if(idx>=USART_TXBUF_LEN)idx=0;
 8000352:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000356:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000360:	db05      	blt.n	800036e <USART_fsend+0x92>
 8000362:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000366:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]
	for(i=0;i<strlen(tmp_rs);i++)
 800036e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000372:	3301      	adds	r3, #1
 8000374:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8000378:	f107 030c 	add.w	r3, r7, #12
 800037c:	4618      	mov	r0, r3
 800037e:	f7ff fee5 	bl	800014c <strlen>
 8000382:	4602      	mov	r2, r0
 8000384:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000388:	429a      	cmp	r2, r3
 800038a:	d8c8      	bhi.n	800031e <USART_fsend+0x42>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800038c:	b672      	cpsid	i
}
 800038e:	bf00      	nop
	}
	__disable_irq(); //wyłączenie przerwań
	if((USART_TX_EMPTY==USART_TX_BUSY)&&(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==SET))
 8000390:	4b20      	ldr	r3, [pc, #128]	; (8000414 <USART_fsend+0x138>)
 8000392:	681a      	ldr	r2, [r3, #0]
 8000394:	4b21      	ldr	r3, [pc, #132]	; (800041c <USART_fsend+0x140>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	429a      	cmp	r2, r3
 800039a:	d12a      	bne.n	80003f2 <USART_fsend+0x116>
 800039c:	4b20      	ldr	r3, [pc, #128]	; (8000420 <USART_fsend+0x144>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003a6:	2b80      	cmp	r3, #128	; 0x80
 80003a8:	d123      	bne.n	80003f2 <USART_fsend+0x116>
	{
		USART_TX_EMPTY=idx;
 80003aa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80003ae:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a17      	ldr	r2, [pc, #92]	; (8000414 <USART_fsend+0x138>)
 80003b6:	6013      	str	r3, [r2, #0]
		uint8_t tmp=USART_TxBUF[USART_TX_BUSY];
 80003b8:	4b18      	ldr	r3, [pc, #96]	; (800041c <USART_fsend+0x140>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4a16      	ldr	r2, [pc, #88]	; (8000418 <USART_fsend+0x13c>)
 80003be:	5cd2      	ldrb	r2, [r2, r3]
 80003c0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80003c4:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 80003c8:	701a      	strb	r2, [r3, #0]
		USART_TX_BUSY++;
 80003ca:	4b14      	ldr	r3, [pc, #80]	; (800041c <USART_fsend+0x140>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	3301      	adds	r3, #1
 80003d0:	4a12      	ldr	r2, [pc, #72]	; (800041c <USART_fsend+0x140>)
 80003d2:	6013      	str	r3, [r2, #0]
		if(USART_TX_BUSY>=USART_TXBUF_LEN)USART_TX_BUSY=0;
 80003d4:	4b11      	ldr	r3, [pc, #68]	; (800041c <USART_fsend+0x140>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80003dc:	db02      	blt.n	80003e4 <USART_fsend+0x108>
 80003de:	4b0f      	ldr	r3, [pc, #60]	; (800041c <USART_fsend+0x140>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart2,&tmp,1);
 80003e4:	1cfb      	adds	r3, r7, #3
 80003e6:	2201      	movs	r2, #1
 80003e8:	4619      	mov	r1, r3
 80003ea:	480d      	ldr	r0, [pc, #52]	; (8000420 <USART_fsend+0x144>)
 80003ec:	f003 f88c 	bl	8003508 <HAL_UART_Transmit_IT>
	{
 80003f0:	e006      	b.n	8000400 <USART_fsend+0x124>
	}else
	{
		USART_TX_EMPTY=idx;
 80003f2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80003f6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4a05      	ldr	r2, [pc, #20]	; (8000414 <USART_fsend+0x138>)
 80003fe:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000400:	b662      	cpsie	i
}
 8000402:	bf00      	nop
	}
	__enable_irq(); //włączenie przerwań
}
 8000404:	bf00      	nop
 8000406:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800040a:	46bd      	mov	sp, r7
 800040c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000410:	b004      	add	sp, #16
 8000412:	4770      	bx	lr
 8000414:	2000093c 	.word	0x2000093c
 8000418:	2000016c 	.word	0x2000016c
 800041c:	20000940 	.word	0x20000940
 8000420:	20000128 	.word	0x20000128

08000424 <HAL_UART_TxCpltCallback>:
//nadawanie
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b084      	sub	sp, #16
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
	if(huart==&huart2)
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	4a13      	ldr	r2, [pc, #76]	; (800047c <HAL_UART_TxCpltCallback+0x58>)
 8000430:	4293      	cmp	r3, r2
 8000432:	d11e      	bne.n	8000472 <HAL_UART_TxCpltCallback+0x4e>
	{
		if(USART_TX_EMPTY!=USART_TX_BUSY)
 8000434:	4b12      	ldr	r3, [pc, #72]	; (8000480 <HAL_UART_TxCpltCallback+0x5c>)
 8000436:	681a      	ldr	r2, [r3, #0]
 8000438:	4b12      	ldr	r3, [pc, #72]	; (8000484 <HAL_UART_TxCpltCallback+0x60>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	429a      	cmp	r2, r3
 800043e:	d018      	beq.n	8000472 <HAL_UART_TxCpltCallback+0x4e>
		{
			uint8_t tmp=USART_TxBUF[USART_TX_BUSY];
 8000440:	4b10      	ldr	r3, [pc, #64]	; (8000484 <HAL_UART_TxCpltCallback+0x60>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	4a10      	ldr	r2, [pc, #64]	; (8000488 <HAL_UART_TxCpltCallback+0x64>)
 8000446:	5cd3      	ldrb	r3, [r2, r3]
 8000448:	73fb      	strb	r3, [r7, #15]
			USART_TX_BUSY++;
 800044a:	4b0e      	ldr	r3, [pc, #56]	; (8000484 <HAL_UART_TxCpltCallback+0x60>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	3301      	adds	r3, #1
 8000450:	4a0c      	ldr	r2, [pc, #48]	; (8000484 <HAL_UART_TxCpltCallback+0x60>)
 8000452:	6013      	str	r3, [r2, #0]
			if(USART_TX_BUSY>=USART_TXBUF_LEN)USART_TX_BUSY=0;
 8000454:	4b0b      	ldr	r3, [pc, #44]	; (8000484 <HAL_UART_TxCpltCallback+0x60>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800045c:	db02      	blt.n	8000464 <HAL_UART_TxCpltCallback+0x40>
 800045e:	4b09      	ldr	r3, [pc, #36]	; (8000484 <HAL_UART_TxCpltCallback+0x60>)
 8000460:	2200      	movs	r2, #0
 8000462:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2,&tmp,1);
 8000464:	f107 030f 	add.w	r3, r7, #15
 8000468:	2201      	movs	r2, #1
 800046a:	4619      	mov	r1, r3
 800046c:	4803      	ldr	r0, [pc, #12]	; (800047c <HAL_UART_TxCpltCallback+0x58>)
 800046e:	f003 f84b 	bl	8003508 <HAL_UART_Transmit_IT>
		}
	}
}
 8000472:	bf00      	nop
 8000474:	3710      	adds	r7, #16
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	20000128 	.word	0x20000128
 8000480:	2000093c 	.word	0x2000093c
 8000484:	20000940 	.word	0x20000940
 8000488:	2000016c 	.word	0x2000016c

0800048c <HAL_UART_RxCpltCallback>:

//odbiór
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
	if(huart==&huart2)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	4a0e      	ldr	r2, [pc, #56]	; (80004d0 <HAL_UART_RxCpltCallback+0x44>)
 8000498:	4293      	cmp	r3, r2
 800049a:	d115      	bne.n	80004c8 <HAL_UART_RxCpltCallback+0x3c>
	{
		USART_RX_EMPTY++;
 800049c:	4b0d      	ldr	r3, [pc, #52]	; (80004d4 <HAL_UART_RxCpltCallback+0x48>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	3301      	adds	r3, #1
 80004a2:	4a0c      	ldr	r2, [pc, #48]	; (80004d4 <HAL_UART_RxCpltCallback+0x48>)
 80004a4:	6013      	str	r3, [r2, #0]
		if(USART_RX_EMPTY>=USART_RXBUF_LEN)
 80004a6:	4b0b      	ldr	r3, [pc, #44]	; (80004d4 <HAL_UART_RxCpltCallback+0x48>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80004ae:	db02      	blt.n	80004b6 <HAL_UART_RxCpltCallback+0x2a>
			{
				USART_RX_EMPTY=0;
 80004b0:	4b08      	ldr	r3, [pc, #32]	; (80004d4 <HAL_UART_RxCpltCallback+0x48>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]
			}
		HAL_UART_Receive_IT(&huart2,&USART_RxBUF[USART_RX_EMPTY],1);
 80004b6:	4b07      	ldr	r3, [pc, #28]	; (80004d4 <HAL_UART_RxCpltCallback+0x48>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	4a07      	ldr	r2, [pc, #28]	; (80004d8 <HAL_UART_RxCpltCallback+0x4c>)
 80004bc:	4413      	add	r3, r2
 80004be:	2201      	movs	r2, #1
 80004c0:	4619      	mov	r1, r3
 80004c2:	4803      	ldr	r0, [pc, #12]	; (80004d0 <HAL_UART_RxCpltCallback+0x44>)
 80004c4:	f003 f864 	bl	8003590 <HAL_UART_Receive_IT>
	}
}
 80004c8:	bf00      	nop
 80004ca:	3708      	adds	r7, #8
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	20000128 	.word	0x20000128
 80004d4:	20000944 	.word	0x20000944
 80004d8:	20000554 	.word	0x20000554

080004dc <pobierz_dane>:

void pobierz_dane(char *buf)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	memcpy(nadawca, &buf[1], 3);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	1c5a      	adds	r2, r3, #1
 80004e8:	4b17      	ldr	r3, [pc, #92]	; (8000548 <pobierz_dane+0x6c>)
 80004ea:	8811      	ldrh	r1, [r2, #0]
 80004ec:	7892      	ldrb	r2, [r2, #2]
 80004ee:	8019      	strh	r1, [r3, #0]
 80004f0:	709a      	strb	r2, [r3, #2]
    memcpy(odbiorca, &buf[4], 3);
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	1d1a      	adds	r2, r3, #4
 80004f6:	4b15      	ldr	r3, [pc, #84]	; (800054c <pobierz_dane+0x70>)
 80004f8:	8811      	ldrh	r1, [r2, #0]
 80004fa:	7892      	ldrb	r2, [r2, #2]
 80004fc:	8019      	strh	r1, [r3, #0]
 80004fe:	709a      	strb	r2, [r3, #2]
    memcpy(dlugosc_komendy, &buf[7], 3);
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	1dda      	adds	r2, r3, #7
 8000504:	4b12      	ldr	r3, [pc, #72]	; (8000550 <pobierz_dane+0x74>)
 8000506:	8811      	ldrh	r1, [r2, #0]
 8000508:	7892      	ldrb	r2, [r2, #2]
 800050a:	8019      	strh	r1, [r3, #0]
 800050c:	709a      	strb	r2, [r3, #2]
    com_len = atoi(dlugosc_komendy);
 800050e:	4810      	ldr	r0, [pc, #64]	; (8000550 <pobierz_dane+0x74>)
 8000510:	f003 fc44 	bl	8003d9c <atoi>
 8000514:	4603      	mov	r3, r0
 8000516:	4a0f      	ldr	r2, [pc, #60]	; (8000554 <pobierz_dane+0x78>)
 8000518:	6013      	str	r3, [r2, #0]
    memcpy(suma_kontrolna, &buf[12+com_len],2);
 800051a:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <pobierz_dane+0x78>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	330c      	adds	r3, #12
 8000520:	461a      	mov	r2, r3
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	4413      	add	r3, r2
 8000526:	881b      	ldrh	r3, [r3, #0]
 8000528:	b29a      	uxth	r2, r3
 800052a:	4b0b      	ldr	r3, [pc, #44]	; (8000558 <pobierz_dane+0x7c>)
 800052c:	801a      	strh	r2, [r3, #0]
    kontrolna_suma=atoi(suma_kontrolna);
 800052e:	480a      	ldr	r0, [pc, #40]	; (8000558 <pobierz_dane+0x7c>)
 8000530:	f003 fc34 	bl	8003d9c <atoi>
 8000534:	4603      	mov	r3, r0
 8000536:	4a09      	ldr	r2, [pc, #36]	; (800055c <pobierz_dane+0x80>)
 8000538:	6013      	str	r3, [r2, #0]
    sprawdz_dane(buf);
 800053a:	6878      	ldr	r0, [r7, #4]
 800053c:	f000 f810 	bl	8000560 <sprawdz_dane>
}
 8000540:	bf00      	nop
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	2000094c 	.word	0x2000094c
 800054c:	20000950 	.word	0x20000950
 8000550:	20000954 	.word	0x20000954
 8000554:	2000095c 	.word	0x2000095c
 8000558:	20000958 	.word	0x20000958
 800055c:	20000960 	.word	0x20000960

08000560 <sprawdz_dane>:

void sprawdz_dane(char *buffer)
{
 8000560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000564:	b087      	sub	sp, #28
 8000566:	af00      	add	r7, sp, #0
 8000568:	6078      	str	r0, [r7, #4]
	if (strncmp(adres_stm, odbiorca, 3) == 0)
 800056a:	2203      	movs	r2, #3
 800056c:	493b      	ldr	r1, [pc, #236]	; (800065c <sprawdz_dane+0xfc>)
 800056e:	483c      	ldr	r0, [pc, #240]	; (8000660 <sprawdz_dane+0x100>)
 8000570:	f003 fc58 	bl	8003e24 <strncmp>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d168      	bne.n	800064c <sprawdz_dane+0xec>
	{
		if (com_len <= 256 && com_len > 0)
 800057a:	4b3a      	ldr	r3, [pc, #232]	; (8000664 <sprawdz_dane+0x104>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000582:	dc49      	bgt.n	8000618 <sprawdz_dane+0xb8>
 8000584:	4b37      	ldr	r3, [pc, #220]	; (8000664 <sprawdz_dane+0x104>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	dd45      	ble.n	8000618 <sprawdz_dane+0xb8>
		{
 800058c:	466b      	mov	r3, sp
 800058e:	461e      	mov	r6, r3
			int poprawna_ramka = 14 + com_len;
 8000590:	4b34      	ldr	r3, [pc, #208]	; (8000664 <sprawdz_dane+0x104>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	330e      	adds	r3, #14
 8000596:	617b      	str	r3, [r7, #20]

			if (dlugosc_ramki != poprawna_ramka)
 8000598:	4b33      	ldr	r3, [pc, #204]	; (8000668 <sprawdz_dane+0x108>)
 800059a:	881b      	ldrh	r3, [r3, #0]
 800059c:	461a      	mov	r2, r3
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d004      	beq.n	80005ae <sprawdz_dane+0x4e>
			{
				USART_fsend("\n lecom \r\n");
 80005a4:	4831      	ldr	r0, [pc, #196]	; (800066c <sprawdz_dane+0x10c>)
 80005a6:	f7ff fe99 	bl	80002dc <USART_fsend>
 80005aa:	46b5      	mov	sp, r6
 80005ac:	e051      	b.n	8000652 <sprawdz_dane+0xf2>
				return;
			}
			char cmd[com_len + 1];
 80005ae:	4b2d      	ldr	r3, [pc, #180]	; (8000664 <sprawdz_dane+0x104>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	1c59      	adds	r1, r3, #1
 80005b4:	1e4b      	subs	r3, r1, #1
 80005b6:	613b      	str	r3, [r7, #16]
 80005b8:	460a      	mov	r2, r1
 80005ba:	2300      	movs	r3, #0
 80005bc:	4690      	mov	r8, r2
 80005be:	4699      	mov	r9, r3
 80005c0:	f04f 0200 	mov.w	r2, #0
 80005c4:	f04f 0300 	mov.w	r3, #0
 80005c8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80005cc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80005d0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80005d4:	460a      	mov	r2, r1
 80005d6:	2300      	movs	r3, #0
 80005d8:	4614      	mov	r4, r2
 80005da:	461d      	mov	r5, r3
 80005dc:	f04f 0200 	mov.w	r2, #0
 80005e0:	f04f 0300 	mov.w	r3, #0
 80005e4:	00eb      	lsls	r3, r5, #3
 80005e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80005ea:	00e2      	lsls	r2, r4, #3
 80005ec:	460b      	mov	r3, r1
 80005ee:	3307      	adds	r3, #7
 80005f0:	08db      	lsrs	r3, r3, #3
 80005f2:	00db      	lsls	r3, r3, #3
 80005f4:	ebad 0d03 	sub.w	sp, sp, r3
 80005f8:	466b      	mov	r3, sp
 80005fa:	3300      	adds	r3, #0
 80005fc:	60fb      	str	r3, [r7, #12]
			memcpy(cmd, &buffer[11], com_len);//wpisuje ciag znakow o dlugosci komenda dlugosc zaczynajac od 11 miejsca w buforze
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	330b      	adds	r3, #11
 8000602:	4a18      	ldr	r2, [pc, #96]	; (8000664 <sprawdz_dane+0x104>)
 8000604:	6812      	ldr	r2, [r2, #0]
 8000606:	4619      	mov	r1, r3
 8000608:	68f8      	ldr	r0, [r7, #12]
 800060a:	f003 fbf5 	bl	8003df8 <memcpy>
			analizuj(cmd);
 800060e:	68f8      	ldr	r0, [r7, #12]
 8000610:	f000 f834 	bl	800067c <analizuj>
 8000614:	46b5      	mov	sp, r6
		{
 8000616:	e01c      	b.n	8000652 <sprawdz_dane+0xf2>
		}else if (com_len == 0)
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <sprawdz_dane+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d111      	bne.n	8000644 <sprawdz_dane+0xe4>
		{
			int poprawna_ramka = 14 + com_len;
 8000620:	4b10      	ldr	r3, [pc, #64]	; (8000664 <sprawdz_dane+0x104>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	330e      	adds	r3, #14
 8000626:	60bb      	str	r3, [r7, #8]
			if (dlugosc_ramki != poprawna_ramka) {
 8000628:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <sprawdz_dane+0x108>)
 800062a:	881b      	ldrh	r3, [r3, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	68bb      	ldr	r3, [r7, #8]
 8000630:	4293      	cmp	r3, r2
 8000632:	d003      	beq.n	800063c <sprawdz_dane+0xdc>
			USART_fsend("dldane\r\n");
 8000634:	480e      	ldr	r0, [pc, #56]	; (8000670 <sprawdz_dane+0x110>)
 8000636:	f7ff fe51 	bl	80002dc <USART_fsend>
			return;
 800063a:	e00a      	b.n	8000652 <sprawdz_dane+0xf2>
		}else
		{
			USART_fsend("\n miscom \r\n");
 800063c:	480d      	ldr	r0, [pc, #52]	; (8000674 <sprawdz_dane+0x114>)
 800063e:	f7ff fe4d 	bl	80002dc <USART_fsend>
			return;
 8000642:	e006      	b.n	8000652 <sprawdz_dane+0xf2>
		}
	}else
	{
		USART_fsend("\n lecom \r\n");
 8000644:	4809      	ldr	r0, [pc, #36]	; (800066c <sprawdz_dane+0x10c>)
 8000646:	f7ff fe49 	bl	80002dc <USART_fsend>
 800064a:	e002      	b.n	8000652 <sprawdz_dane+0xf2>
	}
}else
{
		USART_fsend("\n wframe \r\n");
 800064c:	480a      	ldr	r0, [pc, #40]	; (8000678 <sprawdz_dane+0x118>)
 800064e:	f7ff fe45 	bl	80002dc <USART_fsend>
}
}
 8000652:	371c      	adds	r7, #28
 8000654:	46bd      	mov	sp, r7
 8000656:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800065a:	bf00      	nop
 800065c:	20000950 	.word	0x20000950
 8000660:	0800492c 	.word	0x0800492c
 8000664:	2000095c 	.word	0x2000095c
 8000668:	2000095a 	.word	0x2000095a
 800066c:	0800484c 	.word	0x0800484c
 8000670:	08004858 	.word	0x08004858
 8000674:	08004864 	.word	0x08004864
 8000678:	08004870 	.word	0x08004870

0800067c <analizuj>:



void analizuj(char *cmd)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08e      	sub	sp, #56	; 0x38
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	int sum = 0;
 8000684:	2300      	movs	r3, #0
 8000686:	637b      	str	r3, [r7, #52]	; 0x34

	for(int i=0; i<com_len;i++)
 8000688:	2300      	movs	r3, #0
 800068a:	633b      	str	r3, [r7, #48]	; 0x30
 800068c:	e00a      	b.n	80006a4 <analizuj+0x28>
	{
		sum+=cmd[i];
 800068e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000690:	687a      	ldr	r2, [r7, #4]
 8000692:	4413      	add	r3, r2
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	461a      	mov	r2, r3
 8000698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800069a:	4413      	add	r3, r2
 800069c:	637b      	str	r3, [r7, #52]	; 0x34
	for(int i=0; i<com_len;i++)
 800069e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006a0:	3301      	adds	r3, #1
 80006a2:	633b      	str	r3, [r7, #48]	; 0x30
 80006a4:	4b9d      	ldr	r3, [pc, #628]	; (800091c <analizuj+0x2a0>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80006aa:	429a      	cmp	r2, r3
 80006ac:	dbef      	blt.n	800068e <analizuj+0x12>
	}

	sum=sum%100;
 80006ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006b0:	4a9b      	ldr	r2, [pc, #620]	; (8000920 <analizuj+0x2a4>)
 80006b2:	fb82 1203 	smull	r1, r2, r2, r3
 80006b6:	1151      	asrs	r1, r2, #5
 80006b8:	17da      	asrs	r2, r3, #31
 80006ba:	1a8a      	subs	r2, r1, r2
 80006bc:	2164      	movs	r1, #100	; 0x64
 80006be:	fb01 f202 	mul.w	r2, r1, r2
 80006c2:	1a9b      	subs	r3, r3, r2
 80006c4:	637b      	str	r3, [r7, #52]	; 0x34

	if (kontrolna_suma=sum)
 80006c6:	4a97      	ldr	r2, [pc, #604]	; (8000924 <analizuj+0x2a8>)
 80006c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006ca:	6013      	str	r3, [r2, #0]
 80006cc:	4b95      	ldr	r3, [pc, #596]	; (8000924 <analizuj+0x2a8>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	f000 821e 	beq.w	8000b12 <analizuj+0x496>
    	{
			//interwał pomiarowy
    		if (cmd[0]=='s' && cmd[1]=='t' && cmd[2]=='a' && cmd[3]=='r' && cmd[4]=='t' && cmd[5]=='i' && cmd[6]=='n' && cmd[7]=='t' && com_len ==14)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	2b73      	cmp	r3, #115	; 0x73
 80006dc:	d167      	bne.n	80007ae <analizuj+0x132>
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	3301      	adds	r3, #1
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b74      	cmp	r3, #116	; 0x74
 80006e6:	d162      	bne.n	80007ae <analizuj+0x132>
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	3302      	adds	r3, #2
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	2b61      	cmp	r3, #97	; 0x61
 80006f0:	d15d      	bne.n	80007ae <analizuj+0x132>
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	3303      	adds	r3, #3
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b72      	cmp	r3, #114	; 0x72
 80006fa:	d158      	bne.n	80007ae <analizuj+0x132>
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	3304      	adds	r3, #4
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2b74      	cmp	r3, #116	; 0x74
 8000704:	d153      	bne.n	80007ae <analizuj+0x132>
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	3305      	adds	r3, #5
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b69      	cmp	r3, #105	; 0x69
 800070e:	d14e      	bne.n	80007ae <analizuj+0x132>
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	3306      	adds	r3, #6
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	2b6e      	cmp	r3, #110	; 0x6e
 8000718:	d149      	bne.n	80007ae <analizuj+0x132>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	3307      	adds	r3, #7
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b74      	cmp	r3, #116	; 0x74
 8000722:	d144      	bne.n	80007ae <analizuj+0x132>
 8000724:	4b7d      	ldr	r3, [pc, #500]	; (800091c <analizuj+0x2a0>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2b0e      	cmp	r3, #14
 800072a:	d140      	bne.n	80007ae <analizuj+0x132>
    		{
    			if(cmd[9]=='[')
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	3309      	adds	r3, #9
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	2b5b      	cmp	r3, #91	; 0x5b
 8000734:	d12e      	bne.n	8000794 <analizuj+0x118>
    			{
    				char interwal[3];
    				memcpy(interwal,&cmd[10],4);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	f103 010a 	add.w	r1, r3, #10
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	2204      	movs	r2, #4
 8000742:	4618      	mov	r0, r3
 8000744:	f003 fb58 	bl	8003df8 <memcpy>

    				for (int i=0; i<4;i++)
 8000748:	2300      	movs	r3, #0
 800074a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800074c:	e014      	b.n	8000778 <analizuj+0xfc>
    				{
    					if(!isdigit(interwal[i]))
 800074e:	f107 0214 	add.w	r2, r7, #20
 8000752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000754:	4413      	add	r3, r2
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	3b30      	subs	r3, #48	; 0x30
 800075a:	2b09      	cmp	r3, #9
 800075c:	d909      	bls.n	8000772 <analizuj+0xf6>
    				    {
    				    	USART_fsend("\n wcom \r\n %c", interwal[i]);
 800075e:	f107 0214 	add.w	r2, r7, #20
 8000762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000764:	4413      	add	r3, r2
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	4619      	mov	r1, r3
 800076a:	486f      	ldr	r0, [pc, #444]	; (8000928 <analizuj+0x2ac>)
 800076c:	f7ff fdb6 	bl	80002dc <USART_fsend>
 8000770:	e1d2      	b.n	8000b18 <analizuj+0x49c>
    				for (int i=0; i<4;i++)
 8000772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000774:	3301      	adds	r3, #1
 8000776:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800077a:	2b03      	cmp	r3, #3
 800077c:	dde7      	ble.n	800074e <analizuj+0xd2>
    				    	return;
    				    }
    				}
    				czas=atoi(interwal);
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	4618      	mov	r0, r3
 8000784:	f003 fb0a 	bl	8003d9c <atoi>
 8000788:	4603      	mov	r3, r0
 800078a:	4a68      	ldr	r2, [pc, #416]	; (800092c <analizuj+0x2b0>)
 800078c:	6013      	str	r3, [r2, #0]
    				odczyt = 1;
 800078e:	4b68      	ldr	r3, [pc, #416]	; (8000930 <analizuj+0x2b4>)
 8000790:	2201      	movs	r2, #1
 8000792:	601a      	str	r2, [r3, #0]
    			}
    			if(cmd[14]==']')
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	330e      	adds	r3, #14
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	2b5d      	cmp	r3, #93	; 0x5d
 800079c:	d103      	bne.n	80007a6 <analizuj+0x12a>
    			{
    				USART_fsend("\n %d \r\n");
 800079e:	4865      	ldr	r0, [pc, #404]	; (8000934 <analizuj+0x2b8>)
 80007a0:	f7ff fd9c 	bl	80002dc <USART_fsend>
    			if(cmd[14]==']')
 80007a4:	e1b8      	b.n	8000b18 <analizuj+0x49c>
    			}else
    			{
    				USART_fsend("\n wcom \r\n");
 80007a6:	4864      	ldr	r0, [pc, #400]	; (8000938 <analizuj+0x2bc>)
 80007a8:	f7ff fd98 	bl	80002dc <USART_fsend>
    			if(cmd[14]==']')
 80007ac:	e1b4      	b.n	8000b18 <analizuj+0x49c>
    			}
    		}else if (cmd[0] == 'a' && cmd[1] == 'r' && cmd[2] == 'c' && cmd[3] == 'h' && cmd[4] == 'o' && cmd[5] == 'd' && com_len == 15)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b61      	cmp	r3, #97	; 0x61
 80007b4:	f040 8094 	bne.w	80008e0 <analizuj+0x264>
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	3301      	adds	r3, #1
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b72      	cmp	r3, #114	; 0x72
 80007c0:	f040 808e 	bne.w	80008e0 <analizuj+0x264>
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	3302      	adds	r3, #2
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b63      	cmp	r3, #99	; 0x63
 80007cc:	f040 8088 	bne.w	80008e0 <analizuj+0x264>
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	3303      	adds	r3, #3
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	2b68      	cmp	r3, #104	; 0x68
 80007d8:	f040 8082 	bne.w	80008e0 <analizuj+0x264>
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	3304      	adds	r3, #4
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	2b6f      	cmp	r3, #111	; 0x6f
 80007e4:	d17c      	bne.n	80008e0 <analizuj+0x264>
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	3305      	adds	r3, #5
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2b64      	cmp	r3, #100	; 0x64
 80007ee:	d177      	bne.n	80008e0 <analizuj+0x264>
 80007f0:	4b4a      	ldr	r3, [pc, #296]	; (800091c <analizuj+0x2a0>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2b0f      	cmp	r3, #15
 80007f6:	d173      	bne.n	80008e0 <analizuj+0x264>
    		{
    			odczyt = 0;
 80007f8:	4b4d      	ldr	r3, [pc, #308]	; (8000930 <analizuj+0x2b4>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
    			char od[4];
    			int dokad_sprawdzac = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	62bb      	str	r3, [r7, #40]	; 0x28
    			int odczego_sprawdzac = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	627b      	str	r3, [r7, #36]	; 0x24
    			memcpy(od, &cmd[6], 4);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	3306      	adds	r3, #6
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	613b      	str	r3, [r7, #16]
    			od[4] = 0;
 800080e:	2300      	movs	r3, #0
 8000810:	753b      	strb	r3, [r7, #20]
    			for (int i = 0; i < 4; i++)
 8000812:	2300      	movs	r3, #0
 8000814:	623b      	str	r3, [r7, #32]
 8000816:	e01a      	b.n	800084e <analizuj+0x1d2>
    			{
    				if (!isdigit(od[i]))
 8000818:	f107 0210 	add.w	r2, r7, #16
 800081c:	6a3b      	ldr	r3, [r7, #32]
 800081e:	4413      	add	r3, r2
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	3b30      	subs	r3, #48	; 0x30
 8000824:	2b09      	cmp	r3, #9
 8000826:	d909      	bls.n	800083c <analizuj+0x1c0>
    				{
    					USART_fsend("wcom \r \n %c",od[i]);
 8000828:	f107 0210 	add.w	r2, r7, #16
 800082c:	6a3b      	ldr	r3, [r7, #32]
 800082e:	4413      	add	r3, r2
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	4619      	mov	r1, r3
 8000834:	4841      	ldr	r0, [pc, #260]	; (800093c <analizuj+0x2c0>)
 8000836:	f7ff fd51 	bl	80002dc <USART_fsend>
    					return;
 800083a:	e16d      	b.n	8000b18 <analizuj+0x49c>
    				}
    				odczego_sprawdzac = atoi(od);//USART_fsend(" od czego : %hd \r \n ",odczego_sprawdzac);
 800083c:	f107 0310 	add.w	r3, r7, #16
 8000840:	4618      	mov	r0, r3
 8000842:	f003 faab 	bl	8003d9c <atoi>
 8000846:	6278      	str	r0, [r7, #36]	; 0x24
    			for (int i = 0; i < 4; i++)
 8000848:	6a3b      	ldr	r3, [r7, #32]
 800084a:	3301      	adds	r3, #1
 800084c:	623b      	str	r3, [r7, #32]
 800084e:	6a3b      	ldr	r3, [r7, #32]
 8000850:	2b03      	cmp	r3, #3
 8000852:	dde1      	ble.n	8000818 <analizuj+0x19c>
    			}
    				//przypisz pamiętaj
    			char dokad[4];
    			memcpy(dokad, &cmd[11], 4);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	330b      	adds	r3, #11
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	60fb      	str	r3, [r7, #12]
    			dokad[4] = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	743b      	strb	r3, [r7, #16]
    			for (int i = 0; i < 4; i++)
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]
 8000864:	e01a      	b.n	800089c <analizuj+0x220>
    			{
    				if (!isdigit(dokad[i]))
 8000866:	f107 020c 	add.w	r2, r7, #12
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	4413      	add	r3, r2
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	3b30      	subs	r3, #48	; 0x30
 8000872:	2b09      	cmp	r3, #9
 8000874:	d909      	bls.n	800088a <analizuj+0x20e>
    				{
    					USART_fsend("wcom \r \n %c",dokad[i]);
 8000876:	f107 020c 	add.w	r2, r7, #12
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	4413      	add	r3, r2
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	4619      	mov	r1, r3
 8000882:	482e      	ldr	r0, [pc, #184]	; (800093c <analizuj+0x2c0>)
 8000884:	f7ff fd2a 	bl	80002dc <USART_fsend>
    					return;
 8000888:	e146      	b.n	8000b18 <analizuj+0x49c>
    				}
    				dokad_sprawdzac = atoi(dokad);// USART_fsend(" dokad_sprawdzac : %hd \r \n ",dokad_sprawdzac);
 800088a:	f107 030c 	add.w	r3, r7, #12
 800088e:	4618      	mov	r0, r3
 8000890:	f003 fa84 	bl	8003d9c <atoi>
 8000894:	62b8      	str	r0, [r7, #40]	; 0x28
    			for (int i = 0; i < 4; i++)
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	3301      	adds	r3, #1
 800089a:	61fb      	str	r3, [r7, #28]
 800089c:	69fb      	ldr	r3, [r7, #28]
 800089e:	2b03      	cmp	r3, #3
 80008a0:	dde1      	ble.n	8000866 <analizuj+0x1ea>
    			}
    			for(int i=odczego_sprawdzac ; i<=dokad_sprawdzac;i++)
 80008a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a4:	61bb      	str	r3, [r7, #24]
 80008a6:	e016      	b.n	80008d6 <analizuj+0x25a>
    			{
    				if(bufor[i] == 0)
 80008a8:	4a25      	ldr	r2, [pc, #148]	; (8000940 <analizuj+0x2c4>)
 80008aa:	69bb      	ldr	r3, [r7, #24]
 80008ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d104      	bne.n	80008be <analizuj+0x242>
    				{
    					USART_fsend("misrec %d \r \n",i);
 80008b4:	69b9      	ldr	r1, [r7, #24]
 80008b6:	4823      	ldr	r0, [pc, #140]	; (8000944 <analizuj+0x2c8>)
 80008b8:	f7ff fd10 	bl	80002dc <USART_fsend>
 80008bc:	e008      	b.n	80008d0 <analizuj+0x254>
    					//return;
    				}else
    				{
    				USART_fsend("%d. %0.2f \r \n",i,bufor[i]);
 80008be:	4a20      	ldr	r2, [pc, #128]	; (8000940 <analizuj+0x2c4>)
 80008c0:	69bb      	ldr	r3, [r7, #24]
 80008c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008c6:	461a      	mov	r2, r3
 80008c8:	69b9      	ldr	r1, [r7, #24]
 80008ca:	481f      	ldr	r0, [pc, #124]	; (8000948 <analizuj+0x2cc>)
 80008cc:	f7ff fd06 	bl	80002dc <USART_fsend>
    			for(int i=odczego_sprawdzac ; i<=dokad_sprawdzac;i++)
 80008d0:	69bb      	ldr	r3, [r7, #24]
 80008d2:	3301      	adds	r3, #1
 80008d4:	61bb      	str	r3, [r7, #24]
 80008d6:	69ba      	ldr	r2, [r7, #24]
 80008d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008da:	429a      	cmp	r2, r3
 80008dc:	dde4      	ble.n	80008a8 <analizuj+0x22c>
    		{
 80008de:	e11b      	b.n	8000b18 <analizuj+0x49c>
    				}
    			}
    		}else if (cmd[0] == 's' && cmd[1] == 't' && cmd[2] == 'o' && cmd[3] == 'p' && com_len == 4)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b73      	cmp	r3, #115	; 0x73
 80008e6:	d133      	bne.n	8000950 <analizuj+0x2d4>
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	3301      	adds	r3, #1
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	2b74      	cmp	r3, #116	; 0x74
 80008f0:	d12e      	bne.n	8000950 <analizuj+0x2d4>
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	3302      	adds	r3, #2
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b6f      	cmp	r3, #111	; 0x6f
 80008fa:	d129      	bne.n	8000950 <analizuj+0x2d4>
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	3303      	adds	r3, #3
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b70      	cmp	r3, #112	; 0x70
 8000904:	d124      	bne.n	8000950 <analizuj+0x2d4>
 8000906:	4b05      	ldr	r3, [pc, #20]	; (800091c <analizuj+0x2a0>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	2b04      	cmp	r3, #4
 800090c:	d120      	bne.n	8000950 <analizuj+0x2d4>
    		{
    			// zatrzymanie czujnika(stopuje mierzenie temperatury,cisnienia i wilgotnosci)
    			odczyt = 0;
 800090e:	4b08      	ldr	r3, [pc, #32]	; (8000930 <analizuj+0x2b4>)
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
    			USART_fsend("Zatrzymano \r \n");
 8000914:	480d      	ldr	r0, [pc, #52]	; (800094c <analizuj+0x2d0>)
 8000916:	f7ff fce1 	bl	80002dc <USART_fsend>
 800091a:	e0fd      	b.n	8000b18 <analizuj+0x49c>
 800091c:	2000095c 	.word	0x2000095c
 8000920:	51eb851f 	.word	0x51eb851f
 8000924:	20000960 	.word	0x20000960
 8000928:	0800487c 	.word	0x0800487c
 800092c:	20000970 	.word	0x20000970
 8000930:	2000096c 	.word	0x2000096c
 8000934:	0800488c 	.word	0x0800488c
 8000938:	08004894 	.word	0x08004894
 800093c:	080048a0 	.word	0x080048a0
 8000940:	2000097c 	.word	0x2000097c
 8000944:	080048ac 	.word	0x080048ac
 8000948:	080048bc 	.word	0x080048bc
 800094c:	080048cc 	.word	0x080048cc
    		}else if (cmd[0] == 's' && cmd[1] == 't' && cmd[2] == 'a' && cmd[3] == 'r' && cmd[4] == 't' && com_len == 5)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b73      	cmp	r3, #115	; 0x73
 8000956:	d11f      	bne.n	8000998 <analizuj+0x31c>
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	3301      	adds	r3, #1
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	2b74      	cmp	r3, #116	; 0x74
 8000960:	d11a      	bne.n	8000998 <analizuj+0x31c>
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	3302      	adds	r3, #2
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b61      	cmp	r3, #97	; 0x61
 800096a:	d115      	bne.n	8000998 <analizuj+0x31c>
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	3303      	adds	r3, #3
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2b72      	cmp	r3, #114	; 0x72
 8000974:	d110      	bne.n	8000998 <analizuj+0x31c>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	3304      	adds	r3, #4
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b74      	cmp	r3, #116	; 0x74
 800097e:	d10b      	bne.n	8000998 <analizuj+0x31c>
 8000980:	4b67      	ldr	r3, [pc, #412]	; (8000b20 <analizuj+0x4a4>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2b05      	cmp	r3, #5
 8000986:	d107      	bne.n	8000998 <analizuj+0x31c>
    		{
    			//Wyswietlanie wszystkiego
    			odczyt = 1;
 8000988:	4b66      	ldr	r3, [pc, #408]	; (8000b24 <analizuj+0x4a8>)
 800098a:	2201      	movs	r2, #1
 800098c:	601a      	str	r2, [r3, #0]
    			czas = 1000;
 800098e:	4b66      	ldr	r3, [pc, #408]	; (8000b28 <analizuj+0x4ac>)
 8000990:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	e0bf      	b.n	8000b18 <analizuj+0x49c>
    		}else if (cmd[0] == 'o' && cmd[1] == 'f' && cmd[2] == 'f' && cmd[3] == 'p' && cmd[4] == 'o' && cmd[5] == 'm' && com_len == 6 )
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b6f      	cmp	r3, #111	; 0x6f
 800099e:	d120      	bne.n	80009e2 <analizuj+0x366>
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	3301      	adds	r3, #1
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	2b66      	cmp	r3, #102	; 0x66
 80009a8:	d11b      	bne.n	80009e2 <analizuj+0x366>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	3302      	adds	r3, #2
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	2b66      	cmp	r3, #102	; 0x66
 80009b2:	d116      	bne.n	80009e2 <analizuj+0x366>
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	3303      	adds	r3, #3
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b70      	cmp	r3, #112	; 0x70
 80009bc:	d111      	bne.n	80009e2 <analizuj+0x366>
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	3304      	adds	r3, #4
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b6f      	cmp	r3, #111	; 0x6f
 80009c6:	d10c      	bne.n	80009e2 <analizuj+0x366>
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	3305      	adds	r3, #5
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	2b6d      	cmp	r3, #109	; 0x6d
 80009d0:	d107      	bne.n	80009e2 <analizuj+0x366>
 80009d2:	4b53      	ldr	r3, [pc, #332]	; (8000b20 <analizuj+0x4a4>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2b06      	cmp	r3, #6
 80009d8:	d103      	bne.n	80009e2 <analizuj+0x366>
    		{
    			//cisnienie i temperatura:
    			pom = 0;
 80009da:	4b54      	ldr	r3, [pc, #336]	; (8000b2c <analizuj+0x4b0>)
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	e09a      	b.n	8000b18 <analizuj+0x49c>
    		}else if (cmd[0] == 'o' && cmd[1] == 'n' && cmd[2] == 'p' && cmd[3] == 'o' && cmd[4] == 'm' && com_len == 5 )
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	2b6f      	cmp	r3, #111	; 0x6f
 80009e8:	d11f      	bne.n	8000a2a <analizuj+0x3ae>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	3301      	adds	r3, #1
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b6e      	cmp	r3, #110	; 0x6e
 80009f2:	d11a      	bne.n	8000a2a <analizuj+0x3ae>
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3302      	adds	r3, #2
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b70      	cmp	r3, #112	; 0x70
 80009fc:	d115      	bne.n	8000a2a <analizuj+0x3ae>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	3303      	adds	r3, #3
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b6f      	cmp	r3, #111	; 0x6f
 8000a06:	d110      	bne.n	8000a2a <analizuj+0x3ae>
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	3304      	adds	r3, #4
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	2b6d      	cmp	r3, #109	; 0x6d
 8000a10:	d10b      	bne.n	8000a2a <analizuj+0x3ae>
 8000a12:	4b43      	ldr	r3, [pc, #268]	; (8000b20 <analizuj+0x4a4>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	2b05      	cmp	r3, #5
 8000a18:	d107      	bne.n	8000a2a <analizuj+0x3ae>
    		{
    			pom = 1;
 8000a1a:	4b44      	ldr	r3, [pc, #272]	; (8000b2c <analizuj+0x4b0>)
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	601a      	str	r2, [r3, #0]
    			czas = 1000;
 8000a20:	4b41      	ldr	r3, [pc, #260]	; (8000b28 <analizuj+0x4ac>)
 8000a22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	e076      	b.n	8000b18 <analizuj+0x49c>
    		}else if (cmd[0] == 'o' && cmd[1] == 'f' && cmd[2] == 'f' && cmd[3] == 'w' && cmd[4] == 'i' && cmd[5] == 'l' && cmd[6] == 'g' && com_len == 7 )
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	2b6f      	cmp	r3, #111	; 0x6f
 8000a30:	d125      	bne.n	8000a7e <analizuj+0x402>
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	3301      	adds	r3, #1
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b66      	cmp	r3, #102	; 0x66
 8000a3a:	d120      	bne.n	8000a7e <analizuj+0x402>
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	3302      	adds	r3, #2
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	2b66      	cmp	r3, #102	; 0x66
 8000a44:	d11b      	bne.n	8000a7e <analizuj+0x402>
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	3303      	adds	r3, #3
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	2b77      	cmp	r3, #119	; 0x77
 8000a4e:	d116      	bne.n	8000a7e <analizuj+0x402>
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	3304      	adds	r3, #4
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b69      	cmp	r3, #105	; 0x69
 8000a58:	d111      	bne.n	8000a7e <analizuj+0x402>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	3305      	adds	r3, #5
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b6c      	cmp	r3, #108	; 0x6c
 8000a62:	d10c      	bne.n	8000a7e <analizuj+0x402>
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	3306      	adds	r3, #6
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	2b67      	cmp	r3, #103	; 0x67
 8000a6c:	d107      	bne.n	8000a7e <analizuj+0x402>
 8000a6e:	4b2c      	ldr	r3, [pc, #176]	; (8000b20 <analizuj+0x4a4>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	2b07      	cmp	r3, #7
 8000a74:	d103      	bne.n	8000a7e <analizuj+0x402>
    		{
    			//wilgotnosc
    			wilg = 0;
 8000a76:	4b2e      	ldr	r3, [pc, #184]	; (8000b30 <analizuj+0x4b4>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	e04c      	b.n	8000b18 <analizuj+0x49c>
    		}else if (cmd[0] == 'o' && cmd[1] == 'n' && cmd[2] == 'w' && cmd[3] == 'i' && cmd[4] == 'l' && cmd[5] == 'g' && com_len == 6)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2b6f      	cmp	r3, #111	; 0x6f
 8000a84:	d124      	bne.n	8000ad0 <analizuj+0x454>
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	2b6e      	cmp	r3, #110	; 0x6e
 8000a8e:	d11f      	bne.n	8000ad0 <analizuj+0x454>
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	3302      	adds	r3, #2
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	2b77      	cmp	r3, #119	; 0x77
 8000a98:	d11a      	bne.n	8000ad0 <analizuj+0x454>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	3303      	adds	r3, #3
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2b69      	cmp	r3, #105	; 0x69
 8000aa2:	d115      	bne.n	8000ad0 <analizuj+0x454>
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	3304      	adds	r3, #4
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b6c      	cmp	r3, #108	; 0x6c
 8000aac:	d110      	bne.n	8000ad0 <analizuj+0x454>
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	3305      	adds	r3, #5
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b67      	cmp	r3, #103	; 0x67
 8000ab6:	d10b      	bne.n	8000ad0 <analizuj+0x454>
 8000ab8:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <analizuj+0x4a4>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2b06      	cmp	r3, #6
 8000abe:	d107      	bne.n	8000ad0 <analizuj+0x454>
    		{
    			wilg= 1;
 8000ac0:	4b1b      	ldr	r3, [pc, #108]	; (8000b30 <analizuj+0x4b4>)
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	601a      	str	r2, [r3, #0]
    			czas = 1000;
 8000ac6:	4b18      	ldr	r3, [pc, #96]	; (8000b28 <analizuj+0x4ac>)
 8000ac8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	e023      	b.n	8000b18 <analizuj+0x49c>
    			//arch
    		}else if (cmd[0] == 'a' && cmd[1] == 'r' && cmd[2] == 'c' && cmd[3] == 'h' && com_len == 4)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b61      	cmp	r3, #97	; 0x61
 8000ad6:	d118      	bne.n	8000b0a <analizuj+0x48e>
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	3301      	adds	r3, #1
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	2b72      	cmp	r3, #114	; 0x72
 8000ae0:	d113      	bne.n	8000b0a <analizuj+0x48e>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	3302      	adds	r3, #2
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b63      	cmp	r3, #99	; 0x63
 8000aea:	d10e      	bne.n	8000b0a <analizuj+0x48e>
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	3303      	adds	r3, #3
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b68      	cmp	r3, #104	; 0x68
 8000af4:	d109      	bne.n	8000b0a <analizuj+0x48e>
 8000af6:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <analizuj+0x4a4>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	2b04      	cmp	r3, #4
 8000afc:	d105      	bne.n	8000b0a <analizuj+0x48e>
    		{
    			odczyt = 0;
 8000afe:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <analizuj+0x4a8>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
    			archiwalne();
 8000b04:	f000 f81a 	bl	8000b3c <archiwalne>
    		{
 8000b08:	e006      	b.n	8000b18 <analizuj+0x49c>
    		}else
    		{
    			USART_fsend("\n wcom \r\n ");
 8000b0a:	480a      	ldr	r0, [pc, #40]	; (8000b34 <analizuj+0x4b8>)
 8000b0c:	f7ff fbe6 	bl	80002dc <USART_fsend>
    			return;
 8000b10:	e002      	b.n	8000b18 <analizuj+0x49c>
    		}
    	}else
    	{
    		USART_fsend("\n wsum \r\n");
 8000b12:	4809      	ldr	r0, [pc, #36]	; (8000b38 <analizuj+0x4bc>)
 8000b14:	f7ff fbe2 	bl	80002dc <USART_fsend>
    	}
}
 8000b18:	3738      	adds	r7, #56	; 0x38
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	2000095c 	.word	0x2000095c
 8000b24:	2000096c 	.word	0x2000096c
 8000b28:	20000970 	.word	0x20000970
 8000b2c:	20000974 	.word	0x20000974
 8000b30:	20000978 	.word	0x20000978
 8000b34:	080048dc 	.word	0x080048dc
 8000b38:	080048e8 	.word	0x080048e8

08000b3c <archiwalne>:

void archiwalne ()
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af02      	add	r7, sp, #8
	//wyświetlanie danych archiwalnych przechowywanych przez czujnik
	int j = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	607b      	str	r3, [r7, #4]
	USART_fsend("arch[\r\n");
 8000b46:	4817      	ldr	r0, [pc, #92]	; (8000ba4 <archiwalne+0x68>)
 8000b48:	f7ff fbc8 	bl	80002dc <USART_fsend>
	for( int i=0; i< bufor_len ; i=i+3 )
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	603b      	str	r3, [r7, #0]
 8000b50:	e01f      	b.n	8000b92 <archiwalne+0x56>
	{
		if(bufor[i]==0)
 8000b52:	4a15      	ldr	r2, [pc, #84]	; (8000ba8 <archiwalne+0x6c>)
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d01e      	beq.n	8000b9c <archiwalne+0x60>
		{
			return;
		}else
		{
			USART_fsend("%d. %0.2f , %0.2f , %0.2f \r\n",j,bufor[i],bufor[i+1],bufor[i+2]);
 8000b5e:	4a12      	ldr	r2, [pc, #72]	; (8000ba8 <archiwalne+0x6c>)
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	490f      	ldr	r1, [pc, #60]	; (8000ba8 <archiwalne+0x6c>)
 8000b6c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	3302      	adds	r3, #2
 8000b74:	480c      	ldr	r0, [pc, #48]	; (8000ba8 <archiwalne+0x6c>)
 8000b76:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000b7a:	9300      	str	r3, [sp, #0]
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	6879      	ldr	r1, [r7, #4]
 8000b80:	480a      	ldr	r0, [pc, #40]	; (8000bac <archiwalne+0x70>)
 8000b82:	f7ff fbab 	bl	80002dc <USART_fsend>
			j++;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	607b      	str	r3, [r7, #4]
	for( int i=0; i< bufor_len ; i=i+3 )
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	3303      	adds	r3, #3
 8000b90:	603b      	str	r3, [r7, #0]
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000b98:	dbdb      	blt.n	8000b52 <archiwalne+0x16>
 8000b9a:	e000      	b.n	8000b9e <archiwalne+0x62>
			return;
 8000b9c:	bf00      	nop
		}
	}
}
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	080048f4 	.word	0x080048f4
 8000ba8:	2000097c 	.word	0x2000097c
 8000bac:	080048fc 	.word	0x080048fc

08000bb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b0c6      	sub	sp, #280	; 0x118
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb6:	f000 fbcb 	bl	8001350 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bba:	f000 f82d 	bl	8000c18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bbe:	f000 f98d 	bl	8000edc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bc2:	f000 f961 	bl	8000e88 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000bc6:	f000 f86d 	bl	8000ca4 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000bca:	f000 f899 	bl	8000d00 <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart2,&USART_RxBUF[0],1);
 8000bce:	2201      	movs	r2, #1
 8000bd0:	490f      	ldr	r1, [pc, #60]	; (8000c10 <main+0x60>)
 8000bd2:	4810      	ldr	r0, [pc, #64]	; (8000c14 <main+0x64>)
 8000bd4:	f002 fcdc 	bl	8003590 <HAL_UART_Receive_IT>
      //uint32_t xxx=0;
    int len=0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    char bx[269];
    uint32_t cent=0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  while (1)
  	  {

	  	  cent++;
 8000be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000be8:	3301      	adds	r3, #1
 8000bea:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	if ((len = USART_getline(bx)) > 0)
 8000bee:	463b      	mov	r3, r7
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff faf1 	bl	80001d8 <USART_getline>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8000bfc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	ddef      	ble.n	8000be4 <main+0x34>
	  	{
	  		pobierz_dane(bx);
 8000c04:	463b      	mov	r3, r7
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff fc68 	bl	80004dc <pobierz_dane>
	  	  cent++;
 8000c0c:	e7ea      	b.n	8000be4 <main+0x34>
 8000c0e:	bf00      	nop
 8000c10:	20000554 	.word	0x20000554
 8000c14:	20000128 	.word	0x20000128

08000c18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b090      	sub	sp, #64	; 0x40
 8000c1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c1e:	f107 0318 	add.w	r3, r7, #24
 8000c22:	2228      	movs	r2, #40	; 0x28
 8000c24:	2100      	movs	r1, #0
 8000c26:	4618      	mov	r0, r3
 8000c28:	f003 f8f4 	bl	8003e14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c2c:	1d3b      	adds	r3, r7, #4
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	60da      	str	r2, [r3, #12]
 8000c38:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c3e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c42:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c44:	2300      	movs	r3, #0
 8000c46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c56:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c5c:	f107 0318 	add.w	r3, r7, #24
 8000c60:	4618      	mov	r0, r3
 8000c62:	f001 f897 	bl	8001d94 <HAL_RCC_OscConfig>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c6c:	f000 f9a4 	bl	8000fb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c70:	230f      	movs	r3, #15
 8000c72:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c74:	2302      	movs	r3, #2
 8000c76:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	2102      	movs	r1, #2
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f001 fb04 	bl	8002298 <HAL_RCC_ClockConfig>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c96:	f000 f98f 	bl	8000fb8 <Error_Handler>
  }
}
 8000c9a:	bf00      	nop
 8000c9c:	3740      	adds	r7, #64	; 0x40
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
	...

08000ca4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ca8:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <MX_I2C1_Init+0x50>)
 8000caa:	4a13      	ldr	r2, [pc, #76]	; (8000cf8 <MX_I2C1_Init+0x54>)
 8000cac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000cae:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <MX_I2C1_Init+0x50>)
 8000cb0:	4a12      	ldr	r2, [pc, #72]	; (8000cfc <MX_I2C1_Init+0x58>)
 8000cb2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <MX_I2C1_Init+0x50>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <MX_I2C1_Init+0x50>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <MX_I2C1_Init+0x50>)
 8000cc2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cc6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cc8:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <MX_I2C1_Init+0x50>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000cce:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <MX_I2C1_Init+0x50>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cd4:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <MX_I2C1_Init+0x50>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <MX_I2C1_Init+0x50>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ce0:	4804      	ldr	r0, [pc, #16]	; (8000cf4 <MX_I2C1_Init+0x50>)
 8000ce2:	f000 ff13 	bl	8001b0c <HAL_I2C_Init>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cec:	f000 f964 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	2000008c 	.word	0x2000008c
 8000cf8:	40005400 	.word	0x40005400
 8000cfc:	000186a0 	.word	0x000186a0

08000d00 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b09a      	sub	sp, #104	; 0x68
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d06:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d14:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d1e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	609a      	str	r2, [r3, #8]
 8000d2a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
 8000d3c:	615a      	str	r2, [r3, #20]
 8000d3e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d40:	1d3b      	adds	r3, r7, #4
 8000d42:	2220      	movs	r2, #32
 8000d44:	2100      	movs	r1, #0
 8000d46:	4618      	mov	r0, r3
 8000d48:	f003 f864 	bl	8003e14 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d4c:	4b4c      	ldr	r3, [pc, #304]	; (8000e80 <MX_TIM1_Init+0x180>)
 8000d4e:	4a4d      	ldr	r2, [pc, #308]	; (8000e84 <MX_TIM1_Init+0x184>)
 8000d50:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d52:	4b4b      	ldr	r3, [pc, #300]	; (8000e80 <MX_TIM1_Init+0x180>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d58:	4b49      	ldr	r3, [pc, #292]	; (8000e80 <MX_TIM1_Init+0x180>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d5e:	4b48      	ldr	r3, [pc, #288]	; (8000e80 <MX_TIM1_Init+0x180>)
 8000d60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d64:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d66:	4b46      	ldr	r3, [pc, #280]	; (8000e80 <MX_TIM1_Init+0x180>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d6c:	4b44      	ldr	r3, [pc, #272]	; (8000e80 <MX_TIM1_Init+0x180>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d72:	4b43      	ldr	r3, [pc, #268]	; (8000e80 <MX_TIM1_Init+0x180>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d78:	4841      	ldr	r0, [pc, #260]	; (8000e80 <MX_TIM1_Init+0x180>)
 8000d7a:	f001 fc25 	bl	80025c8 <HAL_TIM_Base_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000d84:	f000 f918 	bl	8000fb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d8c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d8e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d92:	4619      	mov	r1, r3
 8000d94:	483a      	ldr	r0, [pc, #232]	; (8000e80 <MX_TIM1_Init+0x180>)
 8000d96:	f001 fe69 	bl	8002a6c <HAL_TIM_ConfigClockSource>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000da0:	f000 f90a 	bl	8000fb8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000da4:	4836      	ldr	r0, [pc, #216]	; (8000e80 <MX_TIM1_Init+0x180>)
 8000da6:	f001 fcb6 	bl	8002716 <HAL_TIM_IC_Init>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8000db0:	f000 f902 	bl	8000fb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000db4:	4832      	ldr	r0, [pc, #200]	; (8000e80 <MX_TIM1_Init+0x180>)
 8000db6:	f001 fc56 	bl	8002666 <HAL_TIM_PWM_Init>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000dc0:	f000 f8fa 	bl	8000fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dcc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	482b      	ldr	r0, [pc, #172]	; (8000e80 <MX_TIM1_Init+0x180>)
 8000dd4:	f002 fa9c 	bl	8003310 <HAL_TIMEx_MasterConfigSynchronization>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM1_Init+0xe2>
  {
    Error_Handler();
 8000dde:	f000 f8eb 	bl	8000fb8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000de2:	2300      	movs	r3, #0
 8000de4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000de6:	2301      	movs	r3, #1
 8000de8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000dea:	2300      	movs	r3, #0
 8000dec:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigIC.ICFilter = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000df2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000df6:	2200      	movs	r2, #0
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4821      	ldr	r0, [pc, #132]	; (8000e80 <MX_TIM1_Init+0x180>)
 8000dfc:	f001 fce3 	bl	80027c6 <HAL_TIM_IC_ConfigChannel>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8000e06:	f000 f8d7 	bl	8000fb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e0a:	2360      	movs	r3, #96	; 0x60
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e12:	2300      	movs	r3, #0
 8000e14:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e16:	2300      	movs	r3, #0
 8000e18:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e22:	2300      	movs	r3, #0
 8000e24:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2a:	2208      	movs	r2, #8
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4814      	ldr	r0, [pc, #80]	; (8000e80 <MX_TIM1_Init+0x180>)
 8000e30:	f001 fd5e 	bl	80028f0 <HAL_TIM_PWM_ConfigChannel>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 8000e3a:	f000 f8bd 	bl	8000fb8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e42:	2300      	movs	r3, #0
 8000e44:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e56:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e5c:	1d3b      	adds	r3, r7, #4
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4807      	ldr	r0, [pc, #28]	; (8000e80 <MX_TIM1_Init+0x180>)
 8000e62:	f002 fab3 	bl	80033cc <HAL_TIMEx_ConfigBreakDeadTime>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 8000e6c:	f000 f8a4 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e70:	4803      	ldr	r0, [pc, #12]	; (8000e80 <MX_TIM1_Init+0x180>)
 8000e72:	f000 f957 	bl	8001124 <HAL_TIM_MspPostInit>

}
 8000e76:	bf00      	nop
 8000e78:	3768      	adds	r7, #104	; 0x68
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	200000e0 	.word	0x200000e0
 8000e84:	40012c00 	.word	0x40012c00

08000e88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e8c:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000e8e:	4a12      	ldr	r2, [pc, #72]	; (8000ed8 <MX_USART2_UART_Init+0x50>)
 8000e90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e92:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000e94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000eac:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000eae:	220c      	movs	r2, #12
 8000eb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eb2:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ebe:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000ec0:	f002 fad5 	bl	800346e <HAL_UART_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000eca:	f000 f875 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000128 	.word	0x20000128
 8000ed8:	40004400 	.word	0x40004400

08000edc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b088      	sub	sp, #32
 8000ee0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee2:	f107 0310 	add.w	r3, r7, #16
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef0:	4b2d      	ldr	r3, [pc, #180]	; (8000fa8 <MX_GPIO_Init+0xcc>)
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	4a2c      	ldr	r2, [pc, #176]	; (8000fa8 <MX_GPIO_Init+0xcc>)
 8000ef6:	f043 0310 	orr.w	r3, r3, #16
 8000efa:	6193      	str	r3, [r2, #24]
 8000efc:	4b2a      	ldr	r3, [pc, #168]	; (8000fa8 <MX_GPIO_Init+0xcc>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	f003 0310 	and.w	r3, r3, #16
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f08:	4b27      	ldr	r3, [pc, #156]	; (8000fa8 <MX_GPIO_Init+0xcc>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	4a26      	ldr	r2, [pc, #152]	; (8000fa8 <MX_GPIO_Init+0xcc>)
 8000f0e:	f043 0320 	orr.w	r3, r3, #32
 8000f12:	6193      	str	r3, [r2, #24]
 8000f14:	4b24      	ldr	r3, [pc, #144]	; (8000fa8 <MX_GPIO_Init+0xcc>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	f003 0320 	and.w	r3, r3, #32
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f20:	4b21      	ldr	r3, [pc, #132]	; (8000fa8 <MX_GPIO_Init+0xcc>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	4a20      	ldr	r2, [pc, #128]	; (8000fa8 <MX_GPIO_Init+0xcc>)
 8000f26:	f043 0304 	orr.w	r3, r3, #4
 8000f2a:	6193      	str	r3, [r2, #24]
 8000f2c:	4b1e      	ldr	r3, [pc, #120]	; (8000fa8 <MX_GPIO_Init+0xcc>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	f003 0304 	and.w	r3, r3, #4
 8000f34:	607b      	str	r3, [r7, #4]
 8000f36:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f38:	4b1b      	ldr	r3, [pc, #108]	; (8000fa8 <MX_GPIO_Init+0xcc>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	4a1a      	ldr	r2, [pc, #104]	; (8000fa8 <MX_GPIO_Init+0xcc>)
 8000f3e:	f043 0308 	orr.w	r3, r3, #8
 8000f42:	6193      	str	r3, [r2, #24]
 8000f44:	4b18      	ldr	r3, [pc, #96]	; (8000fa8 <MX_GPIO_Init+0xcc>)
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	f003 0308 	and.w	r3, r3, #8
 8000f4c:	603b      	str	r3, [r7, #0]
 8000f4e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2120      	movs	r1, #32
 8000f54:	4815      	ldr	r0, [pc, #84]	; (8000fac <MX_GPIO_Init+0xd0>)
 8000f56:	f000 fd9f 	bl	8001a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f60:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <MX_GPIO_Init+0xd4>)
 8000f62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f68:	f107 0310 	add.w	r3, r7, #16
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4811      	ldr	r0, [pc, #68]	; (8000fb4 <MX_GPIO_Init+0xd8>)
 8000f70:	f000 fc0e 	bl	8001790 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f74:	2320      	movs	r3, #32
 8000f76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f80:	2302      	movs	r3, #2
 8000f82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f84:	f107 0310 	add.w	r3, r7, #16
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4808      	ldr	r0, [pc, #32]	; (8000fac <MX_GPIO_Init+0xd0>)
 8000f8c:	f000 fc00 	bl	8001790 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f90:	2200      	movs	r2, #0
 8000f92:	2100      	movs	r1, #0
 8000f94:	2028      	movs	r0, #40	; 0x28
 8000f96:	f000 fb14 	bl	80015c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f9a:	2028      	movs	r0, #40	; 0x28
 8000f9c:	f000 fb2d 	bl	80015fa <HAL_NVIC_EnableIRQ>

}
 8000fa0:	bf00      	nop
 8000fa2:	3720      	adds	r7, #32
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	40010800 	.word	0x40010800
 8000fb0:	10110000 	.word	0x10110000
 8000fb4:	40011000 	.word	0x40011000

08000fb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000fbc:	b672      	cpsid	i
}
 8000fbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <Error_Handler+0x8>
	...

08000fc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fca:	4b15      	ldr	r3, [pc, #84]	; (8001020 <HAL_MspInit+0x5c>)
 8000fcc:	699b      	ldr	r3, [r3, #24]
 8000fce:	4a14      	ldr	r2, [pc, #80]	; (8001020 <HAL_MspInit+0x5c>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	6193      	str	r3, [r2, #24]
 8000fd6:	4b12      	ldr	r3, [pc, #72]	; (8001020 <HAL_MspInit+0x5c>)
 8000fd8:	699b      	ldr	r3, [r3, #24]
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe2:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <HAL_MspInit+0x5c>)
 8000fe4:	69db      	ldr	r3, [r3, #28]
 8000fe6:	4a0e      	ldr	r2, [pc, #56]	; (8001020 <HAL_MspInit+0x5c>)
 8000fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fec:	61d3      	str	r3, [r2, #28]
 8000fee:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <HAL_MspInit+0x5c>)
 8000ff0:	69db      	ldr	r3, [r3, #28]
 8000ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <HAL_MspInit+0x60>)
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	4a04      	ldr	r2, [pc, #16]	; (8001024 <HAL_MspInit+0x60>)
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001016:	bf00      	nop
 8001018:	3714      	adds	r7, #20
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr
 8001020:	40021000 	.word	0x40021000
 8001024:	40010000 	.word	0x40010000

08001028 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 0310 	add.w	r3, r7, #16
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a15      	ldr	r2, [pc, #84]	; (8001098 <HAL_I2C_MspInit+0x70>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d123      	bne.n	8001090 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001048:	4b14      	ldr	r3, [pc, #80]	; (800109c <HAL_I2C_MspInit+0x74>)
 800104a:	699b      	ldr	r3, [r3, #24]
 800104c:	4a13      	ldr	r2, [pc, #76]	; (800109c <HAL_I2C_MspInit+0x74>)
 800104e:	f043 0308 	orr.w	r3, r3, #8
 8001052:	6193      	str	r3, [r2, #24]
 8001054:	4b11      	ldr	r3, [pc, #68]	; (800109c <HAL_I2C_MspInit+0x74>)
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	f003 0308 	and.w	r3, r3, #8
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001060:	23c0      	movs	r3, #192	; 0xc0
 8001062:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001064:	2312      	movs	r3, #18
 8001066:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001068:	2303      	movs	r3, #3
 800106a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106c:	f107 0310 	add.w	r3, r7, #16
 8001070:	4619      	mov	r1, r3
 8001072:	480b      	ldr	r0, [pc, #44]	; (80010a0 <HAL_I2C_MspInit+0x78>)
 8001074:	f000 fb8c 	bl	8001790 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001078:	4b08      	ldr	r3, [pc, #32]	; (800109c <HAL_I2C_MspInit+0x74>)
 800107a:	69db      	ldr	r3, [r3, #28]
 800107c:	4a07      	ldr	r2, [pc, #28]	; (800109c <HAL_I2C_MspInit+0x74>)
 800107e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001082:	61d3      	str	r3, [r2, #28]
 8001084:	4b05      	ldr	r3, [pc, #20]	; (800109c <HAL_I2C_MspInit+0x74>)
 8001086:	69db      	ldr	r3, [r3, #28]
 8001088:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001090:	bf00      	nop
 8001092:	3720      	adds	r7, #32
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40005400 	.word	0x40005400
 800109c:	40021000 	.word	0x40021000
 80010a0:	40010c00 	.word	0x40010c00

080010a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 0310 	add.w	r3, r7, #16
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a16      	ldr	r2, [pc, #88]	; (8001118 <HAL_TIM_Base_MspInit+0x74>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d124      	bne.n	800110e <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010c4:	4b15      	ldr	r3, [pc, #84]	; (800111c <HAL_TIM_Base_MspInit+0x78>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	4a14      	ldr	r2, [pc, #80]	; (800111c <HAL_TIM_Base_MspInit+0x78>)
 80010ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010ce:	6193      	str	r3, [r2, #24]
 80010d0:	4b12      	ldr	r3, [pc, #72]	; (800111c <HAL_TIM_Base_MspInit+0x78>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010dc:	4b0f      	ldr	r3, [pc, #60]	; (800111c <HAL_TIM_Base_MspInit+0x78>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	4a0e      	ldr	r2, [pc, #56]	; (800111c <HAL_TIM_Base_MspInit+0x78>)
 80010e2:	f043 0304 	orr.w	r3, r3, #4
 80010e6:	6193      	str	r3, [r2, #24]
 80010e8:	4b0c      	ldr	r3, [pc, #48]	; (800111c <HAL_TIM_Base_MspInit+0x78>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	f003 0304 	and.w	r3, r3, #4
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001102:	f107 0310 	add.w	r3, r7, #16
 8001106:	4619      	mov	r1, r3
 8001108:	4805      	ldr	r0, [pc, #20]	; (8001120 <HAL_TIM_Base_MspInit+0x7c>)
 800110a:	f000 fb41 	bl	8001790 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800110e:	bf00      	nop
 8001110:	3720      	adds	r7, #32
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40012c00 	.word	0x40012c00
 800111c:	40021000 	.word	0x40021000
 8001120:	40010800 	.word	0x40010800

08001124 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b088      	sub	sp, #32
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 0310 	add.w	r3, r7, #16
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a10      	ldr	r2, [pc, #64]	; (8001180 <HAL_TIM_MspPostInit+0x5c>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d118      	bne.n	8001176 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001144:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <HAL_TIM_MspPostInit+0x60>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	4a0e      	ldr	r2, [pc, #56]	; (8001184 <HAL_TIM_MspPostInit+0x60>)
 800114a:	f043 0304 	orr.w	r3, r3, #4
 800114e:	6193      	str	r3, [r2, #24]
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <HAL_TIM_MspPostInit+0x60>)
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	f003 0304 	and.w	r3, r3, #4
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800115c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001160:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001162:	2302      	movs	r3, #2
 8001164:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2302      	movs	r3, #2
 8001168:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116a:	f107 0310 	add.w	r3, r7, #16
 800116e:	4619      	mov	r1, r3
 8001170:	4805      	ldr	r0, [pc, #20]	; (8001188 <HAL_TIM_MspPostInit+0x64>)
 8001172:	f000 fb0d 	bl	8001790 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001176:	bf00      	nop
 8001178:	3720      	adds	r7, #32
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40012c00 	.word	0x40012c00
 8001184:	40021000 	.word	0x40021000
 8001188:	40010800 	.word	0x40010800

0800118c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b088      	sub	sp, #32
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 0310 	add.w	r3, r7, #16
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a19      	ldr	r2, [pc, #100]	; (800120c <HAL_UART_MspInit+0x80>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d12b      	bne.n	8001204 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011ac:	4b18      	ldr	r3, [pc, #96]	; (8001210 <HAL_UART_MspInit+0x84>)
 80011ae:	69db      	ldr	r3, [r3, #28]
 80011b0:	4a17      	ldr	r2, [pc, #92]	; (8001210 <HAL_UART_MspInit+0x84>)
 80011b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b6:	61d3      	str	r3, [r2, #28]
 80011b8:	4b15      	ldr	r3, [pc, #84]	; (8001210 <HAL_UART_MspInit+0x84>)
 80011ba:	69db      	ldr	r3, [r3, #28]
 80011bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <HAL_UART_MspInit+0x84>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	4a11      	ldr	r2, [pc, #68]	; (8001210 <HAL_UART_MspInit+0x84>)
 80011ca:	f043 0304 	orr.w	r3, r3, #4
 80011ce:	6193      	str	r3, [r2, #24]
 80011d0:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <HAL_UART_MspInit+0x84>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	f003 0304 	and.w	r3, r3, #4
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011dc:	230c      	movs	r3, #12
 80011de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2302      	movs	r3, #2
 80011e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e8:	f107 0310 	add.w	r3, r7, #16
 80011ec:	4619      	mov	r1, r3
 80011ee:	4809      	ldr	r0, [pc, #36]	; (8001214 <HAL_UART_MspInit+0x88>)
 80011f0:	f000 face 	bl	8001790 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011f4:	2200      	movs	r2, #0
 80011f6:	2100      	movs	r1, #0
 80011f8:	2026      	movs	r0, #38	; 0x26
 80011fa:	f000 f9e2 	bl	80015c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011fe:	2026      	movs	r0, #38	; 0x26
 8001200:	f000 f9fb 	bl	80015fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001204:	bf00      	nop
 8001206:	3720      	adds	r7, #32
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40004400 	.word	0x40004400
 8001210:	40021000 	.word	0x40021000
 8001214:	40010800 	.word	0x40010800

08001218 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800121c:	e7fe      	b.n	800121c <NMI_Handler+0x4>

0800121e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001222:	e7fe      	b.n	8001222 <HardFault_Handler+0x4>

08001224 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001228:	e7fe      	b.n	8001228 <MemManage_Handler+0x4>

0800122a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800122e:	e7fe      	b.n	800122e <BusFault_Handler+0x4>

08001230 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001234:	e7fe      	b.n	8001234 <UsageFault_Handler+0x4>

08001236 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr

08001242 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr

0800124e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr

0800125a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800125e:	f000 f8bd 	bl	80013dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800126c:	4802      	ldr	r0, [pc, #8]	; (8001278 <USART2_IRQHandler+0x10>)
 800126e:	f002 f9bf 	bl	80035f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000128 	.word	0x20000128

0800127c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001280:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001284:	f000 fc20 	bl	8001ac8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001288:	bf00      	nop
 800128a:	bd80      	pop	{r7, pc}

0800128c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001294:	4a14      	ldr	r2, [pc, #80]	; (80012e8 <_sbrk+0x5c>)
 8001296:	4b15      	ldr	r3, [pc, #84]	; (80012ec <_sbrk+0x60>)
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012a0:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <_sbrk+0x64>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d102      	bne.n	80012ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012a8:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <_sbrk+0x64>)
 80012aa:	4a12      	ldr	r2, [pc, #72]	; (80012f4 <_sbrk+0x68>)
 80012ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ae:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <_sbrk+0x64>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4413      	add	r3, r2
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d207      	bcs.n	80012cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012bc:	f002 fd72 	bl	8003da4 <__errno>
 80012c0:	4603      	mov	r3, r0
 80012c2:	220c      	movs	r2, #12
 80012c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012c6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ca:	e009      	b.n	80012e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012cc:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <_sbrk+0x64>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012d2:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <_sbrk+0x64>)
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4413      	add	r3, r2
 80012da:	4a05      	ldr	r2, [pc, #20]	; (80012f0 <_sbrk+0x64>)
 80012dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012de:	68fb      	ldr	r3, [r7, #12]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20005000 	.word	0x20005000
 80012ec:	00000400 	.word	0x00000400
 80012f0:	200029e8 	.word	0x200029e8
 80012f4:	20002a00 	.word	0x20002a00

080012f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr

08001304 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001304:	480c      	ldr	r0, [pc, #48]	; (8001338 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001306:	490d      	ldr	r1, [pc, #52]	; (800133c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001308:	4a0d      	ldr	r2, [pc, #52]	; (8001340 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800130a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800130c:	e002      	b.n	8001314 <LoopCopyDataInit>

0800130e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800130e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001312:	3304      	adds	r3, #4

08001314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001318:	d3f9      	bcc.n	800130e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800131a:	4a0a      	ldr	r2, [pc, #40]	; (8001344 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800131c:	4c0a      	ldr	r4, [pc, #40]	; (8001348 <LoopFillZerobss+0x22>)
  movs r3, #0
 800131e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001320:	e001      	b.n	8001326 <LoopFillZerobss>

08001322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001324:	3204      	adds	r2, #4

08001326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001328:	d3fb      	bcc.n	8001322 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800132a:	f7ff ffe5 	bl	80012f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800132e:	f002 fd3f 	bl	8003db0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001332:	f7ff fc3d 	bl	8000bb0 <main>
  bx lr
 8001336:	4770      	bx	lr
  ldr r0, =_sdata
 8001338:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800133c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001340:	08004a84 	.word	0x08004a84
  ldr r2, =_sbss
 8001344:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001348:	20002a00 	.word	0x20002a00

0800134c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800134c:	e7fe      	b.n	800134c <ADC1_2_IRQHandler>
	...

08001350 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <HAL_Init+0x28>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a07      	ldr	r2, [pc, #28]	; (8001378 <HAL_Init+0x28>)
 800135a:	f043 0310 	orr.w	r3, r3, #16
 800135e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001360:	2003      	movs	r0, #3
 8001362:	f000 f923 	bl	80015ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001366:	2000      	movs	r0, #0
 8001368:	f000 f808 	bl	800137c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800136c:	f7ff fe2a 	bl	8000fc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40022000 	.word	0x40022000

0800137c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <HAL_InitTick+0x54>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <HAL_InitTick+0x58>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	4619      	mov	r1, r3
 800138e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001392:	fbb3 f3f1 	udiv	r3, r3, r1
 8001396:	fbb2 f3f3 	udiv	r3, r2, r3
 800139a:	4618      	mov	r0, r3
 800139c:	f000 f93b 	bl	8001616 <HAL_SYSTICK_Config>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e00e      	b.n	80013c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b0f      	cmp	r3, #15
 80013ae:	d80a      	bhi.n	80013c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013b0:	2200      	movs	r2, #0
 80013b2:	6879      	ldr	r1, [r7, #4]
 80013b4:	f04f 30ff 	mov.w	r0, #4294967295
 80013b8:	f000 f903 	bl	80015c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013bc:	4a06      	ldr	r2, [pc, #24]	; (80013d8 <HAL_InitTick+0x5c>)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013c2:	2300      	movs	r3, #0
 80013c4:	e000      	b.n	80013c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000000 	.word	0x20000000
 80013d4:	20000008 	.word	0x20000008
 80013d8:	20000004 	.word	0x20000004

080013dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013e0:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <HAL_IncTick+0x1c>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	461a      	mov	r2, r3
 80013e6:	4b05      	ldr	r3, [pc, #20]	; (80013fc <HAL_IncTick+0x20>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4413      	add	r3, r2
 80013ec:	4a03      	ldr	r2, [pc, #12]	; (80013fc <HAL_IncTick+0x20>)
 80013ee:	6013      	str	r3, [r2, #0]
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr
 80013f8:	20000008 	.word	0x20000008
 80013fc:	200029ec 	.word	0x200029ec

08001400 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return uwTick;
 8001404:	4b02      	ldr	r3, [pc, #8]	; (8001410 <HAL_GetTick+0x10>)
 8001406:	681b      	ldr	r3, [r3, #0]
}
 8001408:	4618      	mov	r0, r3
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr
 8001410:	200029ec 	.word	0x200029ec

08001414 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <__NVIC_SetPriorityGrouping+0x44>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800142a:	68ba      	ldr	r2, [r7, #8]
 800142c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001430:	4013      	ands	r3, r2
 8001432:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800143c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001444:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001446:	4a04      	ldr	r2, [pc, #16]	; (8001458 <__NVIC_SetPriorityGrouping+0x44>)
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	60d3      	str	r3, [r2, #12]
}
 800144c:	bf00      	nop
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001460:	4b04      	ldr	r3, [pc, #16]	; (8001474 <__NVIC_GetPriorityGrouping+0x18>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	0a1b      	lsrs	r3, r3, #8
 8001466:	f003 0307 	and.w	r3, r3, #7
}
 800146a:	4618      	mov	r0, r3
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	2b00      	cmp	r3, #0
 8001488:	db0b      	blt.n	80014a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	f003 021f 	and.w	r2, r3, #31
 8001490:	4906      	ldr	r1, [pc, #24]	; (80014ac <__NVIC_EnableIRQ+0x34>)
 8001492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001496:	095b      	lsrs	r3, r3, #5
 8001498:	2001      	movs	r0, #1
 800149a:	fa00 f202 	lsl.w	r2, r0, r2
 800149e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr
 80014ac:	e000e100 	.word	0xe000e100

080014b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	6039      	str	r1, [r7, #0]
 80014ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	db0a      	blt.n	80014da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	490c      	ldr	r1, [pc, #48]	; (80014fc <__NVIC_SetPriority+0x4c>)
 80014ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ce:	0112      	lsls	r2, r2, #4
 80014d0:	b2d2      	uxtb	r2, r2
 80014d2:	440b      	add	r3, r1
 80014d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d8:	e00a      	b.n	80014f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	4908      	ldr	r1, [pc, #32]	; (8001500 <__NVIC_SetPriority+0x50>)
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	f003 030f 	and.w	r3, r3, #15
 80014e6:	3b04      	subs	r3, #4
 80014e8:	0112      	lsls	r2, r2, #4
 80014ea:	b2d2      	uxtb	r2, r2
 80014ec:	440b      	add	r3, r1
 80014ee:	761a      	strb	r2, [r3, #24]
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000e100 	.word	0xe000e100
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001504:	b480      	push	{r7}
 8001506:	b089      	sub	sp, #36	; 0x24
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	f1c3 0307 	rsb	r3, r3, #7
 800151e:	2b04      	cmp	r3, #4
 8001520:	bf28      	it	cs
 8001522:	2304      	movcs	r3, #4
 8001524:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	3304      	adds	r3, #4
 800152a:	2b06      	cmp	r3, #6
 800152c:	d902      	bls.n	8001534 <NVIC_EncodePriority+0x30>
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	3b03      	subs	r3, #3
 8001532:	e000      	b.n	8001536 <NVIC_EncodePriority+0x32>
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001538:	f04f 32ff 	mov.w	r2, #4294967295
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	43da      	mvns	r2, r3
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	401a      	ands	r2, r3
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800154c:	f04f 31ff 	mov.w	r1, #4294967295
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	fa01 f303 	lsl.w	r3, r1, r3
 8001556:	43d9      	mvns	r1, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800155c:	4313      	orrs	r3, r2
         );
}
 800155e:	4618      	mov	r0, r3
 8001560:	3724      	adds	r7, #36	; 0x24
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr

08001568 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3b01      	subs	r3, #1
 8001574:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001578:	d301      	bcc.n	800157e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800157a:	2301      	movs	r3, #1
 800157c:	e00f      	b.n	800159e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800157e:	4a0a      	ldr	r2, [pc, #40]	; (80015a8 <SysTick_Config+0x40>)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3b01      	subs	r3, #1
 8001584:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001586:	210f      	movs	r1, #15
 8001588:	f04f 30ff 	mov.w	r0, #4294967295
 800158c:	f7ff ff90 	bl	80014b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001590:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <SysTick_Config+0x40>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001596:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <SysTick_Config+0x40>)
 8001598:	2207      	movs	r2, #7
 800159a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	e000e010 	.word	0xe000e010

080015ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff ff2d 	bl	8001414 <__NVIC_SetPriorityGrouping>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b086      	sub	sp, #24
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	4603      	mov	r3, r0
 80015ca:	60b9      	str	r1, [r7, #8]
 80015cc:	607a      	str	r2, [r7, #4]
 80015ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015d4:	f7ff ff42 	bl	800145c <__NVIC_GetPriorityGrouping>
 80015d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	68b9      	ldr	r1, [r7, #8]
 80015de:	6978      	ldr	r0, [r7, #20]
 80015e0:	f7ff ff90 	bl	8001504 <NVIC_EncodePriority>
 80015e4:	4602      	mov	r2, r0
 80015e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ea:	4611      	mov	r1, r2
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff ff5f 	bl	80014b0 <__NVIC_SetPriority>
}
 80015f2:	bf00      	nop
 80015f4:	3718      	adds	r7, #24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	4603      	mov	r3, r0
 8001602:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff ff35 	bl	8001478 <__NVIC_EnableIRQ>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff ffa2 	bl	8001568 <SysTick_Config>
 8001624:	4603      	mov	r3, r0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800162e:	b480      	push	{r7}
 8001630:	b085      	sub	sp, #20
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001636:	2300      	movs	r3, #0
 8001638:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001640:	2b02      	cmp	r3, #2
 8001642:	d008      	beq.n	8001656 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2204      	movs	r2, #4
 8001648:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e020      	b.n	8001698 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f022 020e 	bic.w	r2, r2, #14
 8001664:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 0201 	bic.w	r2, r2, #1
 8001674:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800167e:	2101      	movs	r1, #1
 8001680:	fa01 f202 	lsl.w	r2, r1, r2
 8001684:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2201      	movs	r2, #1
 800168a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001696:	7bfb      	ldrb	r3, [r7, #15]
}
 8001698:	4618      	mov	r0, r3
 800169a:	3714      	adds	r7, #20
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr
	...

080016a4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016ac:	2300      	movs	r3, #0
 80016ae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d005      	beq.n	80016c6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2204      	movs	r2, #4
 80016be:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	73fb      	strb	r3, [r7, #15]
 80016c4:	e051      	b.n	800176a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f022 020e 	bic.w	r2, r2, #14
 80016d4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f022 0201 	bic.w	r2, r2, #1
 80016e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a22      	ldr	r2, [pc, #136]	; (8001774 <HAL_DMA_Abort_IT+0xd0>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d029      	beq.n	8001744 <HAL_DMA_Abort_IT+0xa0>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a20      	ldr	r2, [pc, #128]	; (8001778 <HAL_DMA_Abort_IT+0xd4>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d022      	beq.n	8001740 <HAL_DMA_Abort_IT+0x9c>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a1f      	ldr	r2, [pc, #124]	; (800177c <HAL_DMA_Abort_IT+0xd8>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d01a      	beq.n	800173a <HAL_DMA_Abort_IT+0x96>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a1d      	ldr	r2, [pc, #116]	; (8001780 <HAL_DMA_Abort_IT+0xdc>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d012      	beq.n	8001734 <HAL_DMA_Abort_IT+0x90>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a1c      	ldr	r2, [pc, #112]	; (8001784 <HAL_DMA_Abort_IT+0xe0>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d00a      	beq.n	800172e <HAL_DMA_Abort_IT+0x8a>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a1a      	ldr	r2, [pc, #104]	; (8001788 <HAL_DMA_Abort_IT+0xe4>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d102      	bne.n	8001728 <HAL_DMA_Abort_IT+0x84>
 8001722:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001726:	e00e      	b.n	8001746 <HAL_DMA_Abort_IT+0xa2>
 8001728:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800172c:	e00b      	b.n	8001746 <HAL_DMA_Abort_IT+0xa2>
 800172e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001732:	e008      	b.n	8001746 <HAL_DMA_Abort_IT+0xa2>
 8001734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001738:	e005      	b.n	8001746 <HAL_DMA_Abort_IT+0xa2>
 800173a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800173e:	e002      	b.n	8001746 <HAL_DMA_Abort_IT+0xa2>
 8001740:	2310      	movs	r3, #16
 8001742:	e000      	b.n	8001746 <HAL_DMA_Abort_IT+0xa2>
 8001744:	2301      	movs	r3, #1
 8001746:	4a11      	ldr	r2, [pc, #68]	; (800178c <HAL_DMA_Abort_IT+0xe8>)
 8001748:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2201      	movs	r2, #1
 800174e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800175e:	2b00      	cmp	r3, #0
 8001760:	d003      	beq.n	800176a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	4798      	blx	r3
    } 
  }
  return status;
 800176a:	7bfb      	ldrb	r3, [r7, #15]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40020008 	.word	0x40020008
 8001778:	4002001c 	.word	0x4002001c
 800177c:	40020030 	.word	0x40020030
 8001780:	40020044 	.word	0x40020044
 8001784:	40020058 	.word	0x40020058
 8001788:	4002006c 	.word	0x4002006c
 800178c:	40020000 	.word	0x40020000

08001790 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001790:	b480      	push	{r7}
 8001792:	b08b      	sub	sp, #44	; 0x2c
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800179a:	2300      	movs	r3, #0
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800179e:	2300      	movs	r3, #0
 80017a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017a2:	e169      	b.n	8001a78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017a4:	2201      	movs	r2, #1
 80017a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	69fa      	ldr	r2, [r7, #28]
 80017b4:	4013      	ands	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	429a      	cmp	r2, r3
 80017be:	f040 8158 	bne.w	8001a72 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	4a9a      	ldr	r2, [pc, #616]	; (8001a30 <HAL_GPIO_Init+0x2a0>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d05e      	beq.n	800188a <HAL_GPIO_Init+0xfa>
 80017cc:	4a98      	ldr	r2, [pc, #608]	; (8001a30 <HAL_GPIO_Init+0x2a0>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d875      	bhi.n	80018be <HAL_GPIO_Init+0x12e>
 80017d2:	4a98      	ldr	r2, [pc, #608]	; (8001a34 <HAL_GPIO_Init+0x2a4>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d058      	beq.n	800188a <HAL_GPIO_Init+0xfa>
 80017d8:	4a96      	ldr	r2, [pc, #600]	; (8001a34 <HAL_GPIO_Init+0x2a4>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d86f      	bhi.n	80018be <HAL_GPIO_Init+0x12e>
 80017de:	4a96      	ldr	r2, [pc, #600]	; (8001a38 <HAL_GPIO_Init+0x2a8>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d052      	beq.n	800188a <HAL_GPIO_Init+0xfa>
 80017e4:	4a94      	ldr	r2, [pc, #592]	; (8001a38 <HAL_GPIO_Init+0x2a8>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d869      	bhi.n	80018be <HAL_GPIO_Init+0x12e>
 80017ea:	4a94      	ldr	r2, [pc, #592]	; (8001a3c <HAL_GPIO_Init+0x2ac>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d04c      	beq.n	800188a <HAL_GPIO_Init+0xfa>
 80017f0:	4a92      	ldr	r2, [pc, #584]	; (8001a3c <HAL_GPIO_Init+0x2ac>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d863      	bhi.n	80018be <HAL_GPIO_Init+0x12e>
 80017f6:	4a92      	ldr	r2, [pc, #584]	; (8001a40 <HAL_GPIO_Init+0x2b0>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d046      	beq.n	800188a <HAL_GPIO_Init+0xfa>
 80017fc:	4a90      	ldr	r2, [pc, #576]	; (8001a40 <HAL_GPIO_Init+0x2b0>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d85d      	bhi.n	80018be <HAL_GPIO_Init+0x12e>
 8001802:	2b12      	cmp	r3, #18
 8001804:	d82a      	bhi.n	800185c <HAL_GPIO_Init+0xcc>
 8001806:	2b12      	cmp	r3, #18
 8001808:	d859      	bhi.n	80018be <HAL_GPIO_Init+0x12e>
 800180a:	a201      	add	r2, pc, #4	; (adr r2, 8001810 <HAL_GPIO_Init+0x80>)
 800180c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001810:	0800188b 	.word	0x0800188b
 8001814:	08001865 	.word	0x08001865
 8001818:	08001877 	.word	0x08001877
 800181c:	080018b9 	.word	0x080018b9
 8001820:	080018bf 	.word	0x080018bf
 8001824:	080018bf 	.word	0x080018bf
 8001828:	080018bf 	.word	0x080018bf
 800182c:	080018bf 	.word	0x080018bf
 8001830:	080018bf 	.word	0x080018bf
 8001834:	080018bf 	.word	0x080018bf
 8001838:	080018bf 	.word	0x080018bf
 800183c:	080018bf 	.word	0x080018bf
 8001840:	080018bf 	.word	0x080018bf
 8001844:	080018bf 	.word	0x080018bf
 8001848:	080018bf 	.word	0x080018bf
 800184c:	080018bf 	.word	0x080018bf
 8001850:	080018bf 	.word	0x080018bf
 8001854:	0800186d 	.word	0x0800186d
 8001858:	08001881 	.word	0x08001881
 800185c:	4a79      	ldr	r2, [pc, #484]	; (8001a44 <HAL_GPIO_Init+0x2b4>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d013      	beq.n	800188a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001862:	e02c      	b.n	80018be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	623b      	str	r3, [r7, #32]
          break;
 800186a:	e029      	b.n	80018c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	3304      	adds	r3, #4
 8001872:	623b      	str	r3, [r7, #32]
          break;
 8001874:	e024      	b.n	80018c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	3308      	adds	r3, #8
 800187c:	623b      	str	r3, [r7, #32]
          break;
 800187e:	e01f      	b.n	80018c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	330c      	adds	r3, #12
 8001886:	623b      	str	r3, [r7, #32]
          break;
 8001888:	e01a      	b.n	80018c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d102      	bne.n	8001898 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001892:	2304      	movs	r3, #4
 8001894:	623b      	str	r3, [r7, #32]
          break;
 8001896:	e013      	b.n	80018c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d105      	bne.n	80018ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018a0:	2308      	movs	r3, #8
 80018a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	69fa      	ldr	r2, [r7, #28]
 80018a8:	611a      	str	r2, [r3, #16]
          break;
 80018aa:	e009      	b.n	80018c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018ac:	2308      	movs	r3, #8
 80018ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	69fa      	ldr	r2, [r7, #28]
 80018b4:	615a      	str	r2, [r3, #20]
          break;
 80018b6:	e003      	b.n	80018c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018b8:	2300      	movs	r3, #0
 80018ba:	623b      	str	r3, [r7, #32]
          break;
 80018bc:	e000      	b.n	80018c0 <HAL_GPIO_Init+0x130>
          break;
 80018be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	2bff      	cmp	r3, #255	; 0xff
 80018c4:	d801      	bhi.n	80018ca <HAL_GPIO_Init+0x13a>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	e001      	b.n	80018ce <HAL_GPIO_Init+0x13e>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	3304      	adds	r3, #4
 80018ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	2bff      	cmp	r3, #255	; 0xff
 80018d4:	d802      	bhi.n	80018dc <HAL_GPIO_Init+0x14c>
 80018d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	e002      	b.n	80018e2 <HAL_GPIO_Init+0x152>
 80018dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018de:	3b08      	subs	r3, #8
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	210f      	movs	r1, #15
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	fa01 f303 	lsl.w	r3, r1, r3
 80018f0:	43db      	mvns	r3, r3
 80018f2:	401a      	ands	r2, r3
 80018f4:	6a39      	ldr	r1, [r7, #32]
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	fa01 f303 	lsl.w	r3, r1, r3
 80018fc:	431a      	orrs	r2, r3
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190a:	2b00      	cmp	r3, #0
 800190c:	f000 80b1 	beq.w	8001a72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001910:	4b4d      	ldr	r3, [pc, #308]	; (8001a48 <HAL_GPIO_Init+0x2b8>)
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	4a4c      	ldr	r2, [pc, #304]	; (8001a48 <HAL_GPIO_Init+0x2b8>)
 8001916:	f043 0301 	orr.w	r3, r3, #1
 800191a:	6193      	str	r3, [r2, #24]
 800191c:	4b4a      	ldr	r3, [pc, #296]	; (8001a48 <HAL_GPIO_Init+0x2b8>)
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001928:	4a48      	ldr	r2, [pc, #288]	; (8001a4c <HAL_GPIO_Init+0x2bc>)
 800192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192c:	089b      	lsrs	r3, r3, #2
 800192e:	3302      	adds	r3, #2
 8001930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001934:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	f003 0303 	and.w	r3, r3, #3
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	220f      	movs	r2, #15
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	43db      	mvns	r3, r3
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	4013      	ands	r3, r2
 800194a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4a40      	ldr	r2, [pc, #256]	; (8001a50 <HAL_GPIO_Init+0x2c0>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d013      	beq.n	800197c <HAL_GPIO_Init+0x1ec>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a3f      	ldr	r2, [pc, #252]	; (8001a54 <HAL_GPIO_Init+0x2c4>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d00d      	beq.n	8001978 <HAL_GPIO_Init+0x1e8>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a3e      	ldr	r2, [pc, #248]	; (8001a58 <HAL_GPIO_Init+0x2c8>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d007      	beq.n	8001974 <HAL_GPIO_Init+0x1e4>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a3d      	ldr	r2, [pc, #244]	; (8001a5c <HAL_GPIO_Init+0x2cc>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d101      	bne.n	8001970 <HAL_GPIO_Init+0x1e0>
 800196c:	2303      	movs	r3, #3
 800196e:	e006      	b.n	800197e <HAL_GPIO_Init+0x1ee>
 8001970:	2304      	movs	r3, #4
 8001972:	e004      	b.n	800197e <HAL_GPIO_Init+0x1ee>
 8001974:	2302      	movs	r3, #2
 8001976:	e002      	b.n	800197e <HAL_GPIO_Init+0x1ee>
 8001978:	2301      	movs	r3, #1
 800197a:	e000      	b.n	800197e <HAL_GPIO_Init+0x1ee>
 800197c:	2300      	movs	r3, #0
 800197e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001980:	f002 0203 	and.w	r2, r2, #3
 8001984:	0092      	lsls	r2, r2, #2
 8001986:	4093      	lsls	r3, r2
 8001988:	68fa      	ldr	r2, [r7, #12]
 800198a:	4313      	orrs	r3, r2
 800198c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800198e:	492f      	ldr	r1, [pc, #188]	; (8001a4c <HAL_GPIO_Init+0x2bc>)
 8001990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001992:	089b      	lsrs	r3, r3, #2
 8001994:	3302      	adds	r3, #2
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d006      	beq.n	80019b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019a8:	4b2d      	ldr	r3, [pc, #180]	; (8001a60 <HAL_GPIO_Init+0x2d0>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	492c      	ldr	r1, [pc, #176]	; (8001a60 <HAL_GPIO_Init+0x2d0>)
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	600b      	str	r3, [r1, #0]
 80019b4:	e006      	b.n	80019c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019b6:	4b2a      	ldr	r3, [pc, #168]	; (8001a60 <HAL_GPIO_Init+0x2d0>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	43db      	mvns	r3, r3
 80019be:	4928      	ldr	r1, [pc, #160]	; (8001a60 <HAL_GPIO_Init+0x2d0>)
 80019c0:	4013      	ands	r3, r2
 80019c2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d006      	beq.n	80019de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019d0:	4b23      	ldr	r3, [pc, #140]	; (8001a60 <HAL_GPIO_Init+0x2d0>)
 80019d2:	685a      	ldr	r2, [r3, #4]
 80019d4:	4922      	ldr	r1, [pc, #136]	; (8001a60 <HAL_GPIO_Init+0x2d0>)
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	4313      	orrs	r3, r2
 80019da:	604b      	str	r3, [r1, #4]
 80019dc:	e006      	b.n	80019ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019de:	4b20      	ldr	r3, [pc, #128]	; (8001a60 <HAL_GPIO_Init+0x2d0>)
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	43db      	mvns	r3, r3
 80019e6:	491e      	ldr	r1, [pc, #120]	; (8001a60 <HAL_GPIO_Init+0x2d0>)
 80019e8:	4013      	ands	r3, r2
 80019ea:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d006      	beq.n	8001a06 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019f8:	4b19      	ldr	r3, [pc, #100]	; (8001a60 <HAL_GPIO_Init+0x2d0>)
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	4918      	ldr	r1, [pc, #96]	; (8001a60 <HAL_GPIO_Init+0x2d0>)
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	608b      	str	r3, [r1, #8]
 8001a04:	e006      	b.n	8001a14 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a06:	4b16      	ldr	r3, [pc, #88]	; (8001a60 <HAL_GPIO_Init+0x2d0>)
 8001a08:	689a      	ldr	r2, [r3, #8]
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	4914      	ldr	r1, [pc, #80]	; (8001a60 <HAL_GPIO_Init+0x2d0>)
 8001a10:	4013      	ands	r3, r2
 8001a12:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d021      	beq.n	8001a64 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a20:	4b0f      	ldr	r3, [pc, #60]	; (8001a60 <HAL_GPIO_Init+0x2d0>)
 8001a22:	68da      	ldr	r2, [r3, #12]
 8001a24:	490e      	ldr	r1, [pc, #56]	; (8001a60 <HAL_GPIO_Init+0x2d0>)
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	60cb      	str	r3, [r1, #12]
 8001a2c:	e021      	b.n	8001a72 <HAL_GPIO_Init+0x2e2>
 8001a2e:	bf00      	nop
 8001a30:	10320000 	.word	0x10320000
 8001a34:	10310000 	.word	0x10310000
 8001a38:	10220000 	.word	0x10220000
 8001a3c:	10210000 	.word	0x10210000
 8001a40:	10120000 	.word	0x10120000
 8001a44:	10110000 	.word	0x10110000
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40010000 	.word	0x40010000
 8001a50:	40010800 	.word	0x40010800
 8001a54:	40010c00 	.word	0x40010c00
 8001a58:	40011000 	.word	0x40011000
 8001a5c:	40011400 	.word	0x40011400
 8001a60:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a64:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <HAL_GPIO_Init+0x304>)
 8001a66:	68da      	ldr	r2, [r3, #12]
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	4909      	ldr	r1, [pc, #36]	; (8001a94 <HAL_GPIO_Init+0x304>)
 8001a6e:	4013      	ands	r3, r2
 8001a70:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a74:	3301      	adds	r3, #1
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f47f ae8e 	bne.w	80017a4 <HAL_GPIO_Init+0x14>
  }
}
 8001a88:	bf00      	nop
 8001a8a:	bf00      	nop
 8001a8c:	372c      	adds	r7, #44	; 0x2c
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr
 8001a94:	40010400 	.word	0x40010400

08001a98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	807b      	strh	r3, [r7, #2]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001aa8:	787b      	ldrb	r3, [r7, #1]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aae:	887a      	ldrh	r2, [r7, #2]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ab4:	e003      	b.n	8001abe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ab6:	887b      	ldrh	r3, [r7, #2]
 8001ab8:	041a      	lsls	r2, r3, #16
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	611a      	str	r2, [r3, #16]
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr

08001ac8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ad2:	4b08      	ldr	r3, [pc, #32]	; (8001af4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ad4:	695a      	ldr	r2, [r3, #20]
 8001ad6:	88fb      	ldrh	r3, [r7, #6]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d006      	beq.n	8001aec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ade:	4a05      	ldr	r2, [pc, #20]	; (8001af4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ae0:	88fb      	ldrh	r3, [r7, #6]
 8001ae2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ae4:	88fb      	ldrh	r3, [r7, #6]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f000 f806 	bl	8001af8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001aec:	bf00      	nop
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40010400 	.word	0x40010400

08001af8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr

08001b0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e12b      	b.n	8001d76 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d106      	bne.n	8001b38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff fa78 	bl	8001028 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2224      	movs	r2, #36	; 0x24
 8001b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 0201 	bic.w	r2, r2, #1
 8001b4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b70:	f000 fce4 	bl	800253c <HAL_RCC_GetPCLK1Freq>
 8001b74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	4a81      	ldr	r2, [pc, #516]	; (8001d80 <HAL_I2C_Init+0x274>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d807      	bhi.n	8001b90 <HAL_I2C_Init+0x84>
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	4a80      	ldr	r2, [pc, #512]	; (8001d84 <HAL_I2C_Init+0x278>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	bf94      	ite	ls
 8001b88:	2301      	movls	r3, #1
 8001b8a:	2300      	movhi	r3, #0
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	e006      	b.n	8001b9e <HAL_I2C_Init+0x92>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	4a7d      	ldr	r2, [pc, #500]	; (8001d88 <HAL_I2C_Init+0x27c>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	bf94      	ite	ls
 8001b98:	2301      	movls	r3, #1
 8001b9a:	2300      	movhi	r3, #0
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e0e7      	b.n	8001d76 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	4a78      	ldr	r2, [pc, #480]	; (8001d8c <HAL_I2C_Init+0x280>)
 8001baa:	fba2 2303 	umull	r2, r3, r2, r3
 8001bae:	0c9b      	lsrs	r3, r3, #18
 8001bb0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68ba      	ldr	r2, [r7, #8]
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	4a6a      	ldr	r2, [pc, #424]	; (8001d80 <HAL_I2C_Init+0x274>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d802      	bhi.n	8001be0 <HAL_I2C_Init+0xd4>
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	e009      	b.n	8001bf4 <HAL_I2C_Init+0xe8>
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001be6:	fb02 f303 	mul.w	r3, r2, r3
 8001bea:	4a69      	ldr	r2, [pc, #420]	; (8001d90 <HAL_I2C_Init+0x284>)
 8001bec:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf0:	099b      	lsrs	r3, r3, #6
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	6812      	ldr	r2, [r2, #0]
 8001bf8:	430b      	orrs	r3, r1
 8001bfa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c06:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	495c      	ldr	r1, [pc, #368]	; (8001d80 <HAL_I2C_Init+0x274>)
 8001c10:	428b      	cmp	r3, r1
 8001c12:	d819      	bhi.n	8001c48 <HAL_I2C_Init+0x13c>
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	1e59      	subs	r1, r3, #1
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c22:	1c59      	adds	r1, r3, #1
 8001c24:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001c28:	400b      	ands	r3, r1
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00a      	beq.n	8001c44 <HAL_I2C_Init+0x138>
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	1e59      	subs	r1, r3, #1
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c42:	e051      	b.n	8001ce8 <HAL_I2C_Init+0x1dc>
 8001c44:	2304      	movs	r3, #4
 8001c46:	e04f      	b.n	8001ce8 <HAL_I2C_Init+0x1dc>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d111      	bne.n	8001c74 <HAL_I2C_Init+0x168>
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	1e58      	subs	r0, r3, #1
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6859      	ldr	r1, [r3, #4]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	440b      	add	r3, r1
 8001c5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c62:	3301      	adds	r3, #1
 8001c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	bf0c      	ite	eq
 8001c6c:	2301      	moveq	r3, #1
 8001c6e:	2300      	movne	r3, #0
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	e012      	b.n	8001c9a <HAL_I2C_Init+0x18e>
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	1e58      	subs	r0, r3, #1
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6859      	ldr	r1, [r3, #4]
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	440b      	add	r3, r1
 8001c82:	0099      	lsls	r1, r3, #2
 8001c84:	440b      	add	r3, r1
 8001c86:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	bf0c      	ite	eq
 8001c94:	2301      	moveq	r3, #1
 8001c96:	2300      	movne	r3, #0
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <HAL_I2C_Init+0x196>
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e022      	b.n	8001ce8 <HAL_I2C_Init+0x1dc>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d10e      	bne.n	8001cc8 <HAL_I2C_Init+0x1bc>
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	1e58      	subs	r0, r3, #1
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6859      	ldr	r1, [r3, #4]
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	440b      	add	r3, r1
 8001cb8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cc6:	e00f      	b.n	8001ce8 <HAL_I2C_Init+0x1dc>
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	1e58      	subs	r0, r3, #1
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6859      	ldr	r1, [r3, #4]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	440b      	add	r3, r1
 8001cd6:	0099      	lsls	r1, r3, #2
 8001cd8:	440b      	add	r3, r1
 8001cda:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cde:	3301      	adds	r3, #1
 8001ce0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ce4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ce8:	6879      	ldr	r1, [r7, #4]
 8001cea:	6809      	ldr	r1, [r1, #0]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	69da      	ldr	r2, [r3, #28]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a1b      	ldr	r3, [r3, #32]
 8001d02:	431a      	orrs	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	6911      	ldr	r1, [r2, #16]
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	68d2      	ldr	r2, [r2, #12]
 8001d22:	4311      	orrs	r1, r2
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	6812      	ldr	r2, [r2, #0]
 8001d28:	430b      	orrs	r3, r1
 8001d2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	695a      	ldr	r2, [r3, #20]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	430a      	orrs	r2, r1
 8001d46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f042 0201 	orr.w	r2, r2, #1
 8001d56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2220      	movs	r2, #32
 8001d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	000186a0 	.word	0x000186a0
 8001d84:	001e847f 	.word	0x001e847f
 8001d88:	003d08ff 	.word	0x003d08ff
 8001d8c:	431bde83 	.word	0x431bde83
 8001d90:	10624dd3 	.word	0x10624dd3

08001d94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e272      	b.n	800228c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f000 8087 	beq.w	8001ec2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001db4:	4b92      	ldr	r3, [pc, #584]	; (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 030c 	and.w	r3, r3, #12
 8001dbc:	2b04      	cmp	r3, #4
 8001dbe:	d00c      	beq.n	8001dda <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001dc0:	4b8f      	ldr	r3, [pc, #572]	; (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f003 030c 	and.w	r3, r3, #12
 8001dc8:	2b08      	cmp	r3, #8
 8001dca:	d112      	bne.n	8001df2 <HAL_RCC_OscConfig+0x5e>
 8001dcc:	4b8c      	ldr	r3, [pc, #560]	; (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dd8:	d10b      	bne.n	8001df2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dda:	4b89      	ldr	r3, [pc, #548]	; (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d06c      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x12c>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d168      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e24c      	b.n	800228c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dfa:	d106      	bne.n	8001e0a <HAL_RCC_OscConfig+0x76>
 8001dfc:	4b80      	ldr	r3, [pc, #512]	; (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a7f      	ldr	r2, [pc, #508]	; (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001e02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e06:	6013      	str	r3, [r2, #0]
 8001e08:	e02e      	b.n	8001e68 <HAL_RCC_OscConfig+0xd4>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d10c      	bne.n	8001e2c <HAL_RCC_OscConfig+0x98>
 8001e12:	4b7b      	ldr	r3, [pc, #492]	; (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a7a      	ldr	r2, [pc, #488]	; (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001e18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e1c:	6013      	str	r3, [r2, #0]
 8001e1e:	4b78      	ldr	r3, [pc, #480]	; (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a77      	ldr	r2, [pc, #476]	; (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001e24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e28:	6013      	str	r3, [r2, #0]
 8001e2a:	e01d      	b.n	8001e68 <HAL_RCC_OscConfig+0xd4>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e34:	d10c      	bne.n	8001e50 <HAL_RCC_OscConfig+0xbc>
 8001e36:	4b72      	ldr	r3, [pc, #456]	; (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a71      	ldr	r2, [pc, #452]	; (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e40:	6013      	str	r3, [r2, #0]
 8001e42:	4b6f      	ldr	r3, [pc, #444]	; (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a6e      	ldr	r2, [pc, #440]	; (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e4c:	6013      	str	r3, [r2, #0]
 8001e4e:	e00b      	b.n	8001e68 <HAL_RCC_OscConfig+0xd4>
 8001e50:	4b6b      	ldr	r3, [pc, #428]	; (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a6a      	ldr	r2, [pc, #424]	; (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e5a:	6013      	str	r3, [r2, #0]
 8001e5c:	4b68      	ldr	r3, [pc, #416]	; (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a67      	ldr	r2, [pc, #412]	; (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001e62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d013      	beq.n	8001e98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e70:	f7ff fac6 	bl	8001400 <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e78:	f7ff fac2 	bl	8001400 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b64      	cmp	r3, #100	; 0x64
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e200      	b.n	800228c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e8a:	4b5d      	ldr	r3, [pc, #372]	; (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d0f0      	beq.n	8001e78 <HAL_RCC_OscConfig+0xe4>
 8001e96:	e014      	b.n	8001ec2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e98:	f7ff fab2 	bl	8001400 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ea0:	f7ff faae 	bl	8001400 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b64      	cmp	r3, #100	; 0x64
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e1ec      	b.n	800228c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eb2:	4b53      	ldr	r3, [pc, #332]	; (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1f0      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x10c>
 8001ebe:	e000      	b.n	8001ec2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d063      	beq.n	8001f96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ece:	4b4c      	ldr	r3, [pc, #304]	; (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f003 030c 	and.w	r3, r3, #12
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00b      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001eda:	4b49      	ldr	r3, [pc, #292]	; (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f003 030c 	and.w	r3, r3, #12
 8001ee2:	2b08      	cmp	r3, #8
 8001ee4:	d11c      	bne.n	8001f20 <HAL_RCC_OscConfig+0x18c>
 8001ee6:	4b46      	ldr	r3, [pc, #280]	; (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d116      	bne.n	8001f20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ef2:	4b43      	ldr	r3, [pc, #268]	; (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d005      	beq.n	8001f0a <HAL_RCC_OscConfig+0x176>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d001      	beq.n	8001f0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e1c0      	b.n	800228c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f0a:	4b3d      	ldr	r3, [pc, #244]	; (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	4939      	ldr	r1, [pc, #228]	; (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f1e:	e03a      	b.n	8001f96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	691b      	ldr	r3, [r3, #16]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d020      	beq.n	8001f6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f28:	4b36      	ldr	r3, [pc, #216]	; (8002004 <HAL_RCC_OscConfig+0x270>)
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2e:	f7ff fa67 	bl	8001400 <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f36:	f7ff fa63 	bl	8001400 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e1a1      	b.n	800228c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f48:	4b2d      	ldr	r3, [pc, #180]	; (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d0f0      	beq.n	8001f36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f54:	4b2a      	ldr	r3, [pc, #168]	; (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	695b      	ldr	r3, [r3, #20]
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	4927      	ldr	r1, [pc, #156]	; (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	600b      	str	r3, [r1, #0]
 8001f68:	e015      	b.n	8001f96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f6a:	4b26      	ldr	r3, [pc, #152]	; (8002004 <HAL_RCC_OscConfig+0x270>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f70:	f7ff fa46 	bl	8001400 <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f78:	f7ff fa42 	bl	8001400 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e180      	b.n	800228c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f8a:	4b1d      	ldr	r3, [pc, #116]	; (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1f0      	bne.n	8001f78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0308 	and.w	r3, r3, #8
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d03a      	beq.n	8002018 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d019      	beq.n	8001fde <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001faa:	4b17      	ldr	r3, [pc, #92]	; (8002008 <HAL_RCC_OscConfig+0x274>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb0:	f7ff fa26 	bl	8001400 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fb8:	f7ff fa22 	bl	8001400 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e160      	b.n	800228c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fca:	4b0d      	ldr	r3, [pc, #52]	; (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0f0      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001fd6:	2001      	movs	r0, #1
 8001fd8:	f000 fad8 	bl	800258c <RCC_Delay>
 8001fdc:	e01c      	b.n	8002018 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fde:	4b0a      	ldr	r3, [pc, #40]	; (8002008 <HAL_RCC_OscConfig+0x274>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe4:	f7ff fa0c 	bl	8001400 <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fea:	e00f      	b.n	800200c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fec:	f7ff fa08 	bl	8001400 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d908      	bls.n	800200c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e146      	b.n	800228c <HAL_RCC_OscConfig+0x4f8>
 8001ffe:	bf00      	nop
 8002000:	40021000 	.word	0x40021000
 8002004:	42420000 	.word	0x42420000
 8002008:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800200c:	4b92      	ldr	r3, [pc, #584]	; (8002258 <HAL_RCC_OscConfig+0x4c4>)
 800200e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1e9      	bne.n	8001fec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 80a6 	beq.w	8002172 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002026:	2300      	movs	r3, #0
 8002028:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800202a:	4b8b      	ldr	r3, [pc, #556]	; (8002258 <HAL_RCC_OscConfig+0x4c4>)
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d10d      	bne.n	8002052 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002036:	4b88      	ldr	r3, [pc, #544]	; (8002258 <HAL_RCC_OscConfig+0x4c4>)
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	4a87      	ldr	r2, [pc, #540]	; (8002258 <HAL_RCC_OscConfig+0x4c4>)
 800203c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002040:	61d3      	str	r3, [r2, #28]
 8002042:	4b85      	ldr	r3, [pc, #532]	; (8002258 <HAL_RCC_OscConfig+0x4c4>)
 8002044:	69db      	ldr	r3, [r3, #28]
 8002046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204a:	60bb      	str	r3, [r7, #8]
 800204c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800204e:	2301      	movs	r3, #1
 8002050:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002052:	4b82      	ldr	r3, [pc, #520]	; (800225c <HAL_RCC_OscConfig+0x4c8>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205a:	2b00      	cmp	r3, #0
 800205c:	d118      	bne.n	8002090 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800205e:	4b7f      	ldr	r3, [pc, #508]	; (800225c <HAL_RCC_OscConfig+0x4c8>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a7e      	ldr	r2, [pc, #504]	; (800225c <HAL_RCC_OscConfig+0x4c8>)
 8002064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002068:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800206a:	f7ff f9c9 	bl	8001400 <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002072:	f7ff f9c5 	bl	8001400 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b64      	cmp	r3, #100	; 0x64
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e103      	b.n	800228c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002084:	4b75      	ldr	r3, [pc, #468]	; (800225c <HAL_RCC_OscConfig+0x4c8>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0f0      	beq.n	8002072 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d106      	bne.n	80020a6 <HAL_RCC_OscConfig+0x312>
 8002098:	4b6f      	ldr	r3, [pc, #444]	; (8002258 <HAL_RCC_OscConfig+0x4c4>)
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	4a6e      	ldr	r2, [pc, #440]	; (8002258 <HAL_RCC_OscConfig+0x4c4>)
 800209e:	f043 0301 	orr.w	r3, r3, #1
 80020a2:	6213      	str	r3, [r2, #32]
 80020a4:	e02d      	b.n	8002102 <HAL_RCC_OscConfig+0x36e>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10c      	bne.n	80020c8 <HAL_RCC_OscConfig+0x334>
 80020ae:	4b6a      	ldr	r3, [pc, #424]	; (8002258 <HAL_RCC_OscConfig+0x4c4>)
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	4a69      	ldr	r2, [pc, #420]	; (8002258 <HAL_RCC_OscConfig+0x4c4>)
 80020b4:	f023 0301 	bic.w	r3, r3, #1
 80020b8:	6213      	str	r3, [r2, #32]
 80020ba:	4b67      	ldr	r3, [pc, #412]	; (8002258 <HAL_RCC_OscConfig+0x4c4>)
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	4a66      	ldr	r2, [pc, #408]	; (8002258 <HAL_RCC_OscConfig+0x4c4>)
 80020c0:	f023 0304 	bic.w	r3, r3, #4
 80020c4:	6213      	str	r3, [r2, #32]
 80020c6:	e01c      	b.n	8002102 <HAL_RCC_OscConfig+0x36e>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	2b05      	cmp	r3, #5
 80020ce:	d10c      	bne.n	80020ea <HAL_RCC_OscConfig+0x356>
 80020d0:	4b61      	ldr	r3, [pc, #388]	; (8002258 <HAL_RCC_OscConfig+0x4c4>)
 80020d2:	6a1b      	ldr	r3, [r3, #32]
 80020d4:	4a60      	ldr	r2, [pc, #384]	; (8002258 <HAL_RCC_OscConfig+0x4c4>)
 80020d6:	f043 0304 	orr.w	r3, r3, #4
 80020da:	6213      	str	r3, [r2, #32]
 80020dc:	4b5e      	ldr	r3, [pc, #376]	; (8002258 <HAL_RCC_OscConfig+0x4c4>)
 80020de:	6a1b      	ldr	r3, [r3, #32]
 80020e0:	4a5d      	ldr	r2, [pc, #372]	; (8002258 <HAL_RCC_OscConfig+0x4c4>)
 80020e2:	f043 0301 	orr.w	r3, r3, #1
 80020e6:	6213      	str	r3, [r2, #32]
 80020e8:	e00b      	b.n	8002102 <HAL_RCC_OscConfig+0x36e>
 80020ea:	4b5b      	ldr	r3, [pc, #364]	; (8002258 <HAL_RCC_OscConfig+0x4c4>)
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	4a5a      	ldr	r2, [pc, #360]	; (8002258 <HAL_RCC_OscConfig+0x4c4>)
 80020f0:	f023 0301 	bic.w	r3, r3, #1
 80020f4:	6213      	str	r3, [r2, #32]
 80020f6:	4b58      	ldr	r3, [pc, #352]	; (8002258 <HAL_RCC_OscConfig+0x4c4>)
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	4a57      	ldr	r2, [pc, #348]	; (8002258 <HAL_RCC_OscConfig+0x4c4>)
 80020fc:	f023 0304 	bic.w	r3, r3, #4
 8002100:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d015      	beq.n	8002136 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800210a:	f7ff f979 	bl	8001400 <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002110:	e00a      	b.n	8002128 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002112:	f7ff f975 	bl	8001400 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002120:	4293      	cmp	r3, r2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e0b1      	b.n	800228c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002128:	4b4b      	ldr	r3, [pc, #300]	; (8002258 <HAL_RCC_OscConfig+0x4c4>)
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0ee      	beq.n	8002112 <HAL_RCC_OscConfig+0x37e>
 8002134:	e014      	b.n	8002160 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002136:	f7ff f963 	bl	8001400 <HAL_GetTick>
 800213a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800213c:	e00a      	b.n	8002154 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800213e:	f7ff f95f 	bl	8001400 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	f241 3288 	movw	r2, #5000	; 0x1388
 800214c:	4293      	cmp	r3, r2
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e09b      	b.n	800228c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002154:	4b40      	ldr	r3, [pc, #256]	; (8002258 <HAL_RCC_OscConfig+0x4c4>)
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d1ee      	bne.n	800213e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002160:	7dfb      	ldrb	r3, [r7, #23]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d105      	bne.n	8002172 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002166:	4b3c      	ldr	r3, [pc, #240]	; (8002258 <HAL_RCC_OscConfig+0x4c4>)
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	4a3b      	ldr	r2, [pc, #236]	; (8002258 <HAL_RCC_OscConfig+0x4c4>)
 800216c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002170:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	2b00      	cmp	r3, #0
 8002178:	f000 8087 	beq.w	800228a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800217c:	4b36      	ldr	r3, [pc, #216]	; (8002258 <HAL_RCC_OscConfig+0x4c4>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f003 030c 	and.w	r3, r3, #12
 8002184:	2b08      	cmp	r3, #8
 8002186:	d061      	beq.n	800224c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	69db      	ldr	r3, [r3, #28]
 800218c:	2b02      	cmp	r3, #2
 800218e:	d146      	bne.n	800221e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002190:	4b33      	ldr	r3, [pc, #204]	; (8002260 <HAL_RCC_OscConfig+0x4cc>)
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002196:	f7ff f933 	bl	8001400 <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800219c:	e008      	b.n	80021b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800219e:	f7ff f92f 	bl	8001400 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e06d      	b.n	800228c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021b0:	4b29      	ldr	r3, [pc, #164]	; (8002258 <HAL_RCC_OscConfig+0x4c4>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d1f0      	bne.n	800219e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021c4:	d108      	bne.n	80021d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021c6:	4b24      	ldr	r3, [pc, #144]	; (8002258 <HAL_RCC_OscConfig+0x4c4>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	4921      	ldr	r1, [pc, #132]	; (8002258 <HAL_RCC_OscConfig+0x4c4>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021d8:	4b1f      	ldr	r3, [pc, #124]	; (8002258 <HAL_RCC_OscConfig+0x4c4>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a19      	ldr	r1, [r3, #32]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e8:	430b      	orrs	r3, r1
 80021ea:	491b      	ldr	r1, [pc, #108]	; (8002258 <HAL_RCC_OscConfig+0x4c4>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021f0:	4b1b      	ldr	r3, [pc, #108]	; (8002260 <HAL_RCC_OscConfig+0x4cc>)
 80021f2:	2201      	movs	r2, #1
 80021f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f6:	f7ff f903 	bl	8001400 <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021fc:	e008      	b.n	8002210 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021fe:	f7ff f8ff 	bl	8001400 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e03d      	b.n	800228c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002210:	4b11      	ldr	r3, [pc, #68]	; (8002258 <HAL_RCC_OscConfig+0x4c4>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0f0      	beq.n	80021fe <HAL_RCC_OscConfig+0x46a>
 800221c:	e035      	b.n	800228a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800221e:	4b10      	ldr	r3, [pc, #64]	; (8002260 <HAL_RCC_OscConfig+0x4cc>)
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002224:	f7ff f8ec 	bl	8001400 <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800222c:	f7ff f8e8 	bl	8001400 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e026      	b.n	800228c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800223e:	4b06      	ldr	r3, [pc, #24]	; (8002258 <HAL_RCC_OscConfig+0x4c4>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1f0      	bne.n	800222c <HAL_RCC_OscConfig+0x498>
 800224a:	e01e      	b.n	800228a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	69db      	ldr	r3, [r3, #28]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d107      	bne.n	8002264 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e019      	b.n	800228c <HAL_RCC_OscConfig+0x4f8>
 8002258:	40021000 	.word	0x40021000
 800225c:	40007000 	.word	0x40007000
 8002260:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002264:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <HAL_RCC_OscConfig+0x500>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	429a      	cmp	r2, r3
 8002276:	d106      	bne.n	8002286 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002282:	429a      	cmp	r2, r3
 8002284:	d001      	beq.n	800228a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e000      	b.n	800228c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3718      	adds	r7, #24
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40021000 	.word	0x40021000

08002298 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e0d0      	b.n	800244e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022ac:	4b6a      	ldr	r3, [pc, #424]	; (8002458 <HAL_RCC_ClockConfig+0x1c0>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0307 	and.w	r3, r3, #7
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d910      	bls.n	80022dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ba:	4b67      	ldr	r3, [pc, #412]	; (8002458 <HAL_RCC_ClockConfig+0x1c0>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f023 0207 	bic.w	r2, r3, #7
 80022c2:	4965      	ldr	r1, [pc, #404]	; (8002458 <HAL_RCC_ClockConfig+0x1c0>)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ca:	4b63      	ldr	r3, [pc, #396]	; (8002458 <HAL_RCC_ClockConfig+0x1c0>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d001      	beq.n	80022dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e0b8      	b.n	800244e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d020      	beq.n	800232a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d005      	beq.n	8002300 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022f4:	4b59      	ldr	r3, [pc, #356]	; (800245c <HAL_RCC_ClockConfig+0x1c4>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	4a58      	ldr	r2, [pc, #352]	; (800245c <HAL_RCC_ClockConfig+0x1c4>)
 80022fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0308 	and.w	r3, r3, #8
 8002308:	2b00      	cmp	r3, #0
 800230a:	d005      	beq.n	8002318 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800230c:	4b53      	ldr	r3, [pc, #332]	; (800245c <HAL_RCC_ClockConfig+0x1c4>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	4a52      	ldr	r2, [pc, #328]	; (800245c <HAL_RCC_ClockConfig+0x1c4>)
 8002312:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002316:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002318:	4b50      	ldr	r3, [pc, #320]	; (800245c <HAL_RCC_ClockConfig+0x1c4>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	494d      	ldr	r1, [pc, #308]	; (800245c <HAL_RCC_ClockConfig+0x1c4>)
 8002326:	4313      	orrs	r3, r2
 8002328:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	2b00      	cmp	r3, #0
 8002334:	d040      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d107      	bne.n	800234e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800233e:	4b47      	ldr	r3, [pc, #284]	; (800245c <HAL_RCC_ClockConfig+0x1c4>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d115      	bne.n	8002376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e07f      	b.n	800244e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	2b02      	cmp	r3, #2
 8002354:	d107      	bne.n	8002366 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002356:	4b41      	ldr	r3, [pc, #260]	; (800245c <HAL_RCC_ClockConfig+0x1c4>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d109      	bne.n	8002376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e073      	b.n	800244e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002366:	4b3d      	ldr	r3, [pc, #244]	; (800245c <HAL_RCC_ClockConfig+0x1c4>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e06b      	b.n	800244e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002376:	4b39      	ldr	r3, [pc, #228]	; (800245c <HAL_RCC_ClockConfig+0x1c4>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f023 0203 	bic.w	r2, r3, #3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	4936      	ldr	r1, [pc, #216]	; (800245c <HAL_RCC_ClockConfig+0x1c4>)
 8002384:	4313      	orrs	r3, r2
 8002386:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002388:	f7ff f83a 	bl	8001400 <HAL_GetTick>
 800238c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800238e:	e00a      	b.n	80023a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002390:	f7ff f836 	bl	8001400 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	f241 3288 	movw	r2, #5000	; 0x1388
 800239e:	4293      	cmp	r3, r2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e053      	b.n	800244e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023a6:	4b2d      	ldr	r3, [pc, #180]	; (800245c <HAL_RCC_ClockConfig+0x1c4>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f003 020c 	and.w	r2, r3, #12
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d1eb      	bne.n	8002390 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023b8:	4b27      	ldr	r3, [pc, #156]	; (8002458 <HAL_RCC_ClockConfig+0x1c0>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0307 	and.w	r3, r3, #7
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d210      	bcs.n	80023e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023c6:	4b24      	ldr	r3, [pc, #144]	; (8002458 <HAL_RCC_ClockConfig+0x1c0>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f023 0207 	bic.w	r2, r3, #7
 80023ce:	4922      	ldr	r1, [pc, #136]	; (8002458 <HAL_RCC_ClockConfig+0x1c0>)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023d6:	4b20      	ldr	r3, [pc, #128]	; (8002458 <HAL_RCC_ClockConfig+0x1c0>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	683a      	ldr	r2, [r7, #0]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d001      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e032      	b.n	800244e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d008      	beq.n	8002406 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023f4:	4b19      	ldr	r3, [pc, #100]	; (800245c <HAL_RCC_ClockConfig+0x1c4>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	4916      	ldr	r1, [pc, #88]	; (800245c <HAL_RCC_ClockConfig+0x1c4>)
 8002402:	4313      	orrs	r3, r2
 8002404:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0308 	and.w	r3, r3, #8
 800240e:	2b00      	cmp	r3, #0
 8002410:	d009      	beq.n	8002426 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002412:	4b12      	ldr	r3, [pc, #72]	; (800245c <HAL_RCC_ClockConfig+0x1c4>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	490e      	ldr	r1, [pc, #56]	; (800245c <HAL_RCC_ClockConfig+0x1c4>)
 8002422:	4313      	orrs	r3, r2
 8002424:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002426:	f000 f821 	bl	800246c <HAL_RCC_GetSysClockFreq>
 800242a:	4602      	mov	r2, r0
 800242c:	4b0b      	ldr	r3, [pc, #44]	; (800245c <HAL_RCC_ClockConfig+0x1c4>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	091b      	lsrs	r3, r3, #4
 8002432:	f003 030f 	and.w	r3, r3, #15
 8002436:	490a      	ldr	r1, [pc, #40]	; (8002460 <HAL_RCC_ClockConfig+0x1c8>)
 8002438:	5ccb      	ldrb	r3, [r1, r3]
 800243a:	fa22 f303 	lsr.w	r3, r2, r3
 800243e:	4a09      	ldr	r2, [pc, #36]	; (8002464 <HAL_RCC_ClockConfig+0x1cc>)
 8002440:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002442:	4b09      	ldr	r3, [pc, #36]	; (8002468 <HAL_RCC_ClockConfig+0x1d0>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	f7fe ff98 	bl	800137c <HAL_InitTick>

  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	40022000 	.word	0x40022000
 800245c:	40021000 	.word	0x40021000
 8002460:	08004930 	.word	0x08004930
 8002464:	20000000 	.word	0x20000000
 8002468:	20000004 	.word	0x20000004

0800246c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800246c:	b490      	push	{r4, r7}
 800246e:	b08a      	sub	sp, #40	; 0x28
 8002470:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002472:	4b29      	ldr	r3, [pc, #164]	; (8002518 <HAL_RCC_GetSysClockFreq+0xac>)
 8002474:	1d3c      	adds	r4, r7, #4
 8002476:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002478:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800247c:	f240 2301 	movw	r3, #513	; 0x201
 8002480:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002482:	2300      	movs	r3, #0
 8002484:	61fb      	str	r3, [r7, #28]
 8002486:	2300      	movs	r3, #0
 8002488:	61bb      	str	r3, [r7, #24]
 800248a:	2300      	movs	r3, #0
 800248c:	627b      	str	r3, [r7, #36]	; 0x24
 800248e:	2300      	movs	r3, #0
 8002490:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002492:	2300      	movs	r3, #0
 8002494:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002496:	4b21      	ldr	r3, [pc, #132]	; (800251c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	f003 030c 	and.w	r3, r3, #12
 80024a2:	2b04      	cmp	r3, #4
 80024a4:	d002      	beq.n	80024ac <HAL_RCC_GetSysClockFreq+0x40>
 80024a6:	2b08      	cmp	r3, #8
 80024a8:	d003      	beq.n	80024b2 <HAL_RCC_GetSysClockFreq+0x46>
 80024aa:	e02b      	b.n	8002504 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024ac:	4b1c      	ldr	r3, [pc, #112]	; (8002520 <HAL_RCC_GetSysClockFreq+0xb4>)
 80024ae:	623b      	str	r3, [r7, #32]
      break;
 80024b0:	e02b      	b.n	800250a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	0c9b      	lsrs	r3, r3, #18
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	3328      	adds	r3, #40	; 0x28
 80024bc:	443b      	add	r3, r7
 80024be:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80024c2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d012      	beq.n	80024f4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024ce:	4b13      	ldr	r3, [pc, #76]	; (800251c <HAL_RCC_GetSysClockFreq+0xb0>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	0c5b      	lsrs	r3, r3, #17
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	3328      	adds	r3, #40	; 0x28
 80024da:	443b      	add	r3, r7
 80024dc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80024e0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	4a0e      	ldr	r2, [pc, #56]	; (8002520 <HAL_RCC_GetSysClockFreq+0xb4>)
 80024e6:	fb03 f202 	mul.w	r2, r3, r2
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f0:	627b      	str	r3, [r7, #36]	; 0x24
 80024f2:	e004      	b.n	80024fe <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	4a0b      	ldr	r2, [pc, #44]	; (8002524 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024f8:	fb02 f303 	mul.w	r3, r2, r3
 80024fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	623b      	str	r3, [r7, #32]
      break;
 8002502:	e002      	b.n	800250a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002504:	4b06      	ldr	r3, [pc, #24]	; (8002520 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002506:	623b      	str	r3, [r7, #32]
      break;
 8002508:	bf00      	nop
    }
  }
  return sysclockfreq;
 800250a:	6a3b      	ldr	r3, [r7, #32]
}
 800250c:	4618      	mov	r0, r3
 800250e:	3728      	adds	r7, #40	; 0x28
 8002510:	46bd      	mov	sp, r7
 8002512:	bc90      	pop	{r4, r7}
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	0800491c 	.word	0x0800491c
 800251c:	40021000 	.word	0x40021000
 8002520:	007a1200 	.word	0x007a1200
 8002524:	003d0900 	.word	0x003d0900

08002528 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800252c:	4b02      	ldr	r3, [pc, #8]	; (8002538 <HAL_RCC_GetHCLKFreq+0x10>)
 800252e:	681b      	ldr	r3, [r3, #0]
}
 8002530:	4618      	mov	r0, r3
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr
 8002538:	20000000 	.word	0x20000000

0800253c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002540:	f7ff fff2 	bl	8002528 <HAL_RCC_GetHCLKFreq>
 8002544:	4602      	mov	r2, r0
 8002546:	4b05      	ldr	r3, [pc, #20]	; (800255c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	0a1b      	lsrs	r3, r3, #8
 800254c:	f003 0307 	and.w	r3, r3, #7
 8002550:	4903      	ldr	r1, [pc, #12]	; (8002560 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002552:	5ccb      	ldrb	r3, [r1, r3]
 8002554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002558:	4618      	mov	r0, r3
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40021000 	.word	0x40021000
 8002560:	08004940 	.word	0x08004940

08002564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002568:	f7ff ffde 	bl	8002528 <HAL_RCC_GetHCLKFreq>
 800256c:	4602      	mov	r2, r0
 800256e:	4b05      	ldr	r3, [pc, #20]	; (8002584 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	0adb      	lsrs	r3, r3, #11
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	4903      	ldr	r1, [pc, #12]	; (8002588 <HAL_RCC_GetPCLK2Freq+0x24>)
 800257a:	5ccb      	ldrb	r3, [r1, r3]
 800257c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002580:	4618      	mov	r0, r3
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40021000 	.word	0x40021000
 8002588:	08004940 	.word	0x08004940

0800258c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002594:	4b0a      	ldr	r3, [pc, #40]	; (80025c0 <RCC_Delay+0x34>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a0a      	ldr	r2, [pc, #40]	; (80025c4 <RCC_Delay+0x38>)
 800259a:	fba2 2303 	umull	r2, r3, r2, r3
 800259e:	0a5b      	lsrs	r3, r3, #9
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	fb02 f303 	mul.w	r3, r2, r3
 80025a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025a8:	bf00      	nop
  }
  while (Delay --);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	1e5a      	subs	r2, r3, #1
 80025ae:	60fa      	str	r2, [r7, #12]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1f9      	bne.n	80025a8 <RCC_Delay+0x1c>
}
 80025b4:	bf00      	nop
 80025b6:	bf00      	nop
 80025b8:	3714      	adds	r7, #20
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr
 80025c0:	20000000 	.word	0x20000000
 80025c4:	10624dd3 	.word	0x10624dd3

080025c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e041      	b.n	800265e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d106      	bne.n	80025f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7fe fd58 	bl	80010a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2202      	movs	r2, #2
 80025f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3304      	adds	r3, #4
 8002604:	4619      	mov	r1, r3
 8002606:	4610      	mov	r0, r2
 8002608:	f000 faf4 	bl	8002bf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b082      	sub	sp, #8
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e041      	b.n	80026fc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b00      	cmp	r3, #0
 8002682:	d106      	bne.n	8002692 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 f839 	bl	8002704 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2202      	movs	r2, #2
 8002696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	3304      	adds	r3, #4
 80026a2:	4619      	mov	r1, r3
 80026a4:	4610      	mov	r0, r2
 80026a6:	f000 faa5 	bl	8002bf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2201      	movs	r2, #1
 80026ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2201      	movs	r2, #1
 80026b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2201      	movs	r2, #1
 80026d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	bc80      	pop	{r7}
 8002714:	4770      	bx	lr

08002716 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b082      	sub	sp, #8
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d101      	bne.n	8002728 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e041      	b.n	80027ac <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800272e:	b2db      	uxtb	r3, r3
 8002730:	2b00      	cmp	r3, #0
 8002732:	d106      	bne.n	8002742 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 f839 	bl	80027b4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2202      	movs	r2, #2
 8002746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	3304      	adds	r3, #4
 8002752:	4619      	mov	r1, r3
 8002754:	4610      	mov	r0, r2
 8002756:	f000 fa4d 	bl	8002bf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2201      	movs	r2, #1
 8002776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bc80      	pop	{r7}
 80027c4:	4770      	bx	lr

080027c6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b084      	sub	sp, #16
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	60f8      	str	r0, [r7, #12]
 80027ce:	60b9      	str	r1, [r7, #8]
 80027d0:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d101      	bne.n	80027e0 <HAL_TIM_IC_ConfigChannel+0x1a>
 80027dc:	2302      	movs	r3, #2
 80027de:	e082      	b.n	80028e6 <HAL_TIM_IC_ConfigChannel+0x120>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d11b      	bne.n	8002826 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6818      	ldr	r0, [r3, #0]
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	6819      	ldr	r1, [r3, #0]
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	f000 fbe3 	bl	8002fc8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	699a      	ldr	r2, [r3, #24]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 020c 	bic.w	r2, r2, #12
 8002810:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6999      	ldr	r1, [r3, #24]
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	430a      	orrs	r2, r1
 8002822:	619a      	str	r2, [r3, #24]
 8002824:	e05a      	b.n	80028dc <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b04      	cmp	r3, #4
 800282a:	d11c      	bne.n	8002866 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6818      	ldr	r0, [r3, #0]
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	6819      	ldr	r1, [r3, #0]
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	685a      	ldr	r2, [r3, #4]
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	f000 fc4c 	bl	80030d8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	699a      	ldr	r2, [r3, #24]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800284e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6999      	ldr	r1, [r3, #24]
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	021a      	lsls	r2, r3, #8
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	430a      	orrs	r2, r1
 8002862:	619a      	str	r2, [r3, #24]
 8002864:	e03a      	b.n	80028dc <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b08      	cmp	r3, #8
 800286a:	d11b      	bne.n	80028a4 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6818      	ldr	r0, [r3, #0]
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	6819      	ldr	r1, [r3, #0]
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	685a      	ldr	r2, [r3, #4]
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f000 fc97 	bl	80031ae <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	69da      	ldr	r2, [r3, #28]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 020c 	bic.w	r2, r2, #12
 800288e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	69d9      	ldr	r1, [r3, #28]
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	430a      	orrs	r2, r1
 80028a0:	61da      	str	r2, [r3, #28]
 80028a2:	e01b      	b.n	80028dc <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6818      	ldr	r0, [r3, #0]
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	6819      	ldr	r1, [r3, #0]
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	f000 fcb6 	bl	8003224 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	69da      	ldr	r2, [r3, #28]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80028c6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	69d9      	ldr	r1, [r3, #28]
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	021a      	lsls	r2, r3, #8
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	430a      	orrs	r2, r1
 80028da:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
	...

080028f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002902:	2b01      	cmp	r3, #1
 8002904:	d101      	bne.n	800290a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002906:	2302      	movs	r3, #2
 8002908:	e0ac      	b.n	8002a64 <HAL_TIM_PWM_ConfigChannel+0x174>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b0c      	cmp	r3, #12
 8002916:	f200 809f 	bhi.w	8002a58 <HAL_TIM_PWM_ConfigChannel+0x168>
 800291a:	a201      	add	r2, pc, #4	; (adr r2, 8002920 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800291c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002920:	08002955 	.word	0x08002955
 8002924:	08002a59 	.word	0x08002a59
 8002928:	08002a59 	.word	0x08002a59
 800292c:	08002a59 	.word	0x08002a59
 8002930:	08002995 	.word	0x08002995
 8002934:	08002a59 	.word	0x08002a59
 8002938:	08002a59 	.word	0x08002a59
 800293c:	08002a59 	.word	0x08002a59
 8002940:	080029d7 	.word	0x080029d7
 8002944:	08002a59 	.word	0x08002a59
 8002948:	08002a59 	.word	0x08002a59
 800294c:	08002a59 	.word	0x08002a59
 8002950:	08002a17 	.word	0x08002a17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68b9      	ldr	r1, [r7, #8]
 800295a:	4618      	mov	r0, r3
 800295c:	f000 f9ac 	bl	8002cb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	699a      	ldr	r2, [r3, #24]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f042 0208 	orr.w	r2, r2, #8
 800296e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	699a      	ldr	r2, [r3, #24]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 0204 	bic.w	r2, r2, #4
 800297e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6999      	ldr	r1, [r3, #24]
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	691a      	ldr	r2, [r3, #16]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	430a      	orrs	r2, r1
 8002990:	619a      	str	r2, [r3, #24]
      break;
 8002992:	e062      	b.n	8002a5a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68b9      	ldr	r1, [r7, #8]
 800299a:	4618      	mov	r0, r3
 800299c:	f000 f9f2 	bl	8002d84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	699a      	ldr	r2, [r3, #24]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	699a      	ldr	r2, [r3, #24]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6999      	ldr	r1, [r3, #24]
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	021a      	lsls	r2, r3, #8
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	619a      	str	r2, [r3, #24]
      break;
 80029d4:	e041      	b.n	8002a5a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68b9      	ldr	r1, [r7, #8]
 80029dc:	4618      	mov	r0, r3
 80029de:	f000 fa3b 	bl	8002e58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	69da      	ldr	r2, [r3, #28]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f042 0208 	orr.w	r2, r2, #8
 80029f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	69da      	ldr	r2, [r3, #28]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 0204 	bic.w	r2, r2, #4
 8002a00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	69d9      	ldr	r1, [r3, #28]
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	691a      	ldr	r2, [r3, #16]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	61da      	str	r2, [r3, #28]
      break;
 8002a14:	e021      	b.n	8002a5a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68b9      	ldr	r1, [r7, #8]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f000 fa85 	bl	8002f2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	69da      	ldr	r2, [r3, #28]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	69da      	ldr	r2, [r3, #28]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	69d9      	ldr	r1, [r3, #28]
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	021a      	lsls	r2, r3, #8
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	61da      	str	r2, [r3, #28]
      break;
 8002a56:	e000      	b.n	8002a5a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002a58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d101      	bne.n	8002a84 <HAL_TIM_ConfigClockSource+0x18>
 8002a80:	2302      	movs	r3, #2
 8002a82:	e0b3      	b.n	8002bec <HAL_TIM_ConfigClockSource+0x180>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2202      	movs	r2, #2
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002aa2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002aaa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002abc:	d03e      	beq.n	8002b3c <HAL_TIM_ConfigClockSource+0xd0>
 8002abe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ac2:	f200 8087 	bhi.w	8002bd4 <HAL_TIM_ConfigClockSource+0x168>
 8002ac6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aca:	f000 8085 	beq.w	8002bd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ad2:	d87f      	bhi.n	8002bd4 <HAL_TIM_ConfigClockSource+0x168>
 8002ad4:	2b70      	cmp	r3, #112	; 0x70
 8002ad6:	d01a      	beq.n	8002b0e <HAL_TIM_ConfigClockSource+0xa2>
 8002ad8:	2b70      	cmp	r3, #112	; 0x70
 8002ada:	d87b      	bhi.n	8002bd4 <HAL_TIM_ConfigClockSource+0x168>
 8002adc:	2b60      	cmp	r3, #96	; 0x60
 8002ade:	d050      	beq.n	8002b82 <HAL_TIM_ConfigClockSource+0x116>
 8002ae0:	2b60      	cmp	r3, #96	; 0x60
 8002ae2:	d877      	bhi.n	8002bd4 <HAL_TIM_ConfigClockSource+0x168>
 8002ae4:	2b50      	cmp	r3, #80	; 0x50
 8002ae6:	d03c      	beq.n	8002b62 <HAL_TIM_ConfigClockSource+0xf6>
 8002ae8:	2b50      	cmp	r3, #80	; 0x50
 8002aea:	d873      	bhi.n	8002bd4 <HAL_TIM_ConfigClockSource+0x168>
 8002aec:	2b40      	cmp	r3, #64	; 0x40
 8002aee:	d058      	beq.n	8002ba2 <HAL_TIM_ConfigClockSource+0x136>
 8002af0:	2b40      	cmp	r3, #64	; 0x40
 8002af2:	d86f      	bhi.n	8002bd4 <HAL_TIM_ConfigClockSource+0x168>
 8002af4:	2b30      	cmp	r3, #48	; 0x30
 8002af6:	d064      	beq.n	8002bc2 <HAL_TIM_ConfigClockSource+0x156>
 8002af8:	2b30      	cmp	r3, #48	; 0x30
 8002afa:	d86b      	bhi.n	8002bd4 <HAL_TIM_ConfigClockSource+0x168>
 8002afc:	2b20      	cmp	r3, #32
 8002afe:	d060      	beq.n	8002bc2 <HAL_TIM_ConfigClockSource+0x156>
 8002b00:	2b20      	cmp	r3, #32
 8002b02:	d867      	bhi.n	8002bd4 <HAL_TIM_ConfigClockSource+0x168>
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d05c      	beq.n	8002bc2 <HAL_TIM_ConfigClockSource+0x156>
 8002b08:	2b10      	cmp	r3, #16
 8002b0a:	d05a      	beq.n	8002bc2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002b0c:	e062      	b.n	8002bd4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6818      	ldr	r0, [r3, #0]
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	6899      	ldr	r1, [r3, #8]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	f000 fbd7 	bl	80032d0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b30:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	609a      	str	r2, [r3, #8]
      break;
 8002b3a:	e04e      	b.n	8002bda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6818      	ldr	r0, [r3, #0]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	6899      	ldr	r1, [r3, #8]
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	f000 fbc0 	bl	80032d0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689a      	ldr	r2, [r3, #8]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b5e:	609a      	str	r2, [r3, #8]
      break;
 8002b60:	e03b      	b.n	8002bda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6818      	ldr	r0, [r3, #0]
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	6859      	ldr	r1, [r3, #4]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	f000 fa84 	bl	800307c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2150      	movs	r1, #80	; 0x50
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 fb8e 	bl	800329c <TIM_ITRx_SetConfig>
      break;
 8002b80:	e02b      	b.n	8002bda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6818      	ldr	r0, [r3, #0]
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	6859      	ldr	r1, [r3, #4]
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	f000 fade 	bl	8003150 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2160      	movs	r1, #96	; 0x60
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f000 fb7e 	bl	800329c <TIM_ITRx_SetConfig>
      break;
 8002ba0:	e01b      	b.n	8002bda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6818      	ldr	r0, [r3, #0]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	6859      	ldr	r1, [r3, #4]
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	f000 fa64 	bl	800307c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2140      	movs	r1, #64	; 0x40
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 fb6e 	bl	800329c <TIM_ITRx_SetConfig>
      break;
 8002bc0:	e00b      	b.n	8002bda <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4610      	mov	r0, r2
 8002bce:	f000 fb65 	bl	800329c <TIM_ITRx_SetConfig>
        break;
 8002bd2:	e002      	b.n	8002bda <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002bd4:	bf00      	nop
 8002bd6:	e000      	b.n	8002bda <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002bd8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a29      	ldr	r2, [pc, #164]	; (8002cac <TIM_Base_SetConfig+0xb8>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d00b      	beq.n	8002c24 <TIM_Base_SetConfig+0x30>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c12:	d007      	beq.n	8002c24 <TIM_Base_SetConfig+0x30>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a26      	ldr	r2, [pc, #152]	; (8002cb0 <TIM_Base_SetConfig+0xbc>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d003      	beq.n	8002c24 <TIM_Base_SetConfig+0x30>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a25      	ldr	r2, [pc, #148]	; (8002cb4 <TIM_Base_SetConfig+0xc0>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d108      	bne.n	8002c36 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a1c      	ldr	r2, [pc, #112]	; (8002cac <TIM_Base_SetConfig+0xb8>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d00b      	beq.n	8002c56 <TIM_Base_SetConfig+0x62>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c44:	d007      	beq.n	8002c56 <TIM_Base_SetConfig+0x62>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a19      	ldr	r2, [pc, #100]	; (8002cb0 <TIM_Base_SetConfig+0xbc>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d003      	beq.n	8002c56 <TIM_Base_SetConfig+0x62>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a18      	ldr	r2, [pc, #96]	; (8002cb4 <TIM_Base_SetConfig+0xc0>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d108      	bne.n	8002c68 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a07      	ldr	r2, [pc, #28]	; (8002cac <TIM_Base_SetConfig+0xb8>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d103      	bne.n	8002c9c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	691a      	ldr	r2, [r3, #16]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	615a      	str	r2, [r3, #20]
}
 8002ca2:	bf00      	nop
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr
 8002cac:	40012c00 	.word	0x40012c00
 8002cb0:	40000400 	.word	0x40000400
 8002cb4:	40000800 	.word	0x40000800

08002cb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b087      	sub	sp, #28
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	f023 0201 	bic.w	r2, r3, #1
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f023 0303 	bic.w	r3, r3, #3
 8002cee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f023 0302 	bic.w	r3, r3, #2
 8002d00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a1c      	ldr	r2, [pc, #112]	; (8002d80 <TIM_OC1_SetConfig+0xc8>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d10c      	bne.n	8002d2e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	f023 0308 	bic.w	r3, r3, #8
 8002d1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	f023 0304 	bic.w	r3, r3, #4
 8002d2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a13      	ldr	r2, [pc, #76]	; (8002d80 <TIM_OC1_SetConfig+0xc8>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d111      	bne.n	8002d5a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	621a      	str	r2, [r3, #32]
}
 8002d74:	bf00      	nop
 8002d76:	371c      	adds	r7, #28
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bc80      	pop	{r7}
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	40012c00 	.word	0x40012c00

08002d84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b087      	sub	sp, #28
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	f023 0210 	bic.w	r2, r3, #16
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	021b      	lsls	r3, r3, #8
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	f023 0320 	bic.w	r3, r3, #32
 8002dce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	011b      	lsls	r3, r3, #4
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a1d      	ldr	r2, [pc, #116]	; (8002e54 <TIM_OC2_SetConfig+0xd0>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d10d      	bne.n	8002e00 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	011b      	lsls	r3, r3, #4
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dfe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a14      	ldr	r2, [pc, #80]	; (8002e54 <TIM_OC2_SetConfig+0xd0>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d113      	bne.n	8002e30 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	695b      	ldr	r3, [r3, #20]
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	621a      	str	r2, [r3, #32]
}
 8002e4a:	bf00      	nop
 8002e4c:	371c      	adds	r7, #28
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bc80      	pop	{r7}
 8002e52:	4770      	bx	lr
 8002e54:	40012c00 	.word	0x40012c00

08002e58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b087      	sub	sp, #28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f023 0303 	bic.w	r3, r3, #3
 8002e8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ea0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	021b      	lsls	r3, r3, #8
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a1d      	ldr	r2, [pc, #116]	; (8002f28 <TIM_OC3_SetConfig+0xd0>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d10d      	bne.n	8002ed2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ebc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	021b      	lsls	r3, r3, #8
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ed0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a14      	ldr	r2, [pc, #80]	; (8002f28 <TIM_OC3_SetConfig+0xd0>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d113      	bne.n	8002f02 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ee0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ee8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	011b      	lsls	r3, r3, #4
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	011b      	lsls	r3, r3, #4
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	697a      	ldr	r2, [r7, #20]
 8002f1a:	621a      	str	r2, [r3, #32]
}
 8002f1c:	bf00      	nop
 8002f1e:	371c      	adds	r7, #28
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bc80      	pop	{r7}
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	40012c00 	.word	0x40012c00

08002f2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b087      	sub	sp, #28
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	021b      	lsls	r3, r3, #8
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	031b      	lsls	r3, r3, #12
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a0f      	ldr	r2, [pc, #60]	; (8002fc4 <TIM_OC4_SetConfig+0x98>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d109      	bne.n	8002fa0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	695b      	ldr	r3, [r3, #20]
 8002f98:	019b      	lsls	r3, r3, #6
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	621a      	str	r2, [r3, #32]
}
 8002fba:	bf00      	nop
 8002fbc:	371c      	adds	r7, #28
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bc80      	pop	{r7}
 8002fc2:	4770      	bx	lr
 8002fc4:	40012c00 	.word	0x40012c00

08002fc8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b087      	sub	sp, #28
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
 8002fd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	f023 0201 	bic.w	r2, r3, #1
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	4a1f      	ldr	r2, [pc, #124]	; (8003070 <TIM_TI1_SetConfig+0xa8>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d00b      	beq.n	800300e <TIM_TI1_SetConfig+0x46>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ffc:	d007      	beq.n	800300e <TIM_TI1_SetConfig+0x46>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	4a1c      	ldr	r2, [pc, #112]	; (8003074 <TIM_TI1_SetConfig+0xac>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d003      	beq.n	800300e <TIM_TI1_SetConfig+0x46>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	4a1b      	ldr	r2, [pc, #108]	; (8003078 <TIM_TI1_SetConfig+0xb0>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d101      	bne.n	8003012 <TIM_TI1_SetConfig+0x4a>
 800300e:	2301      	movs	r3, #1
 8003010:	e000      	b.n	8003014 <TIM_TI1_SetConfig+0x4c>
 8003012:	2300      	movs	r3, #0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d008      	beq.n	800302a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	f023 0303 	bic.w	r3, r3, #3
 800301e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4313      	orrs	r3, r2
 8003026:	617b      	str	r3, [r7, #20]
 8003028:	e003      	b.n	8003032 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	f043 0301 	orr.w	r3, r3, #1
 8003030:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003038:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	011b      	lsls	r3, r3, #4
 800303e:	b2db      	uxtb	r3, r3
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	4313      	orrs	r3, r2
 8003044:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	f023 030a 	bic.w	r3, r3, #10
 800304c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	f003 030a 	and.w	r3, r3, #10
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	4313      	orrs	r3, r2
 8003058:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	697a      	ldr	r2, [r7, #20]
 800305e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	621a      	str	r2, [r3, #32]
}
 8003066:	bf00      	nop
 8003068:	371c      	adds	r7, #28
 800306a:	46bd      	mov	sp, r7
 800306c:	bc80      	pop	{r7}
 800306e:	4770      	bx	lr
 8003070:	40012c00 	.word	0x40012c00
 8003074:	40000400 	.word	0x40000400
 8003078:	40000800 	.word	0x40000800

0800307c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800307c:	b480      	push	{r7}
 800307e:	b087      	sub	sp, #28
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	f023 0201 	bic.w	r2, r3, #1
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	011b      	lsls	r3, r3, #4
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	f023 030a 	bic.w	r3, r3, #10
 80030b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	4313      	orrs	r3, r2
 80030c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	621a      	str	r2, [r3, #32]
}
 80030ce:	bf00      	nop
 80030d0:	371c      	adds	r7, #28
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bc80      	pop	{r7}
 80030d6:	4770      	bx	lr

080030d8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80030d8:	b480      	push	{r7}
 80030da:	b087      	sub	sp, #28
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
 80030e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	f023 0210 	bic.w	r2, r3, #16
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003104:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	021b      	lsls	r3, r3, #8
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	4313      	orrs	r3, r2
 800310e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003116:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	031b      	lsls	r3, r3, #12
 800311c:	b29b      	uxth	r3, r3
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	4313      	orrs	r3, r2
 8003122:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800312a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	4313      	orrs	r3, r2
 8003138:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	621a      	str	r2, [r3, #32]
}
 8003146:	bf00      	nop
 8003148:	371c      	adds	r7, #28
 800314a:	46bd      	mov	sp, r7
 800314c:	bc80      	pop	{r7}
 800314e:	4770      	bx	lr

08003150 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003150:	b480      	push	{r7}
 8003152:	b087      	sub	sp, #28
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6a1b      	ldr	r3, [r3, #32]
 8003160:	f023 0210 	bic.w	r2, r3, #16
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800317a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	031b      	lsls	r3, r3, #12
 8003180:	697a      	ldr	r2, [r7, #20]
 8003182:	4313      	orrs	r3, r2
 8003184:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800318c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	011b      	lsls	r3, r3, #4
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	4313      	orrs	r3, r2
 8003196:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	621a      	str	r2, [r3, #32]
}
 80031a4:	bf00      	nop
 80031a6:	371c      	adds	r7, #28
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bc80      	pop	{r7}
 80031ac:	4770      	bx	lr

080031ae <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b087      	sub	sp, #28
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	60f8      	str	r0, [r7, #12]
 80031b6:	60b9      	str	r1, [r7, #8]
 80031b8:	607a      	str	r2, [r7, #4]
 80031ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6a1b      	ldr	r3, [r3, #32]
 80031c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	69db      	ldr	r3, [r3, #28]
 80031cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f023 0303 	bic.w	r3, r3, #3
 80031da:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031ea:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	011b      	lsls	r3, r3, #4
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031fe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	021b      	lsls	r3, r3, #8
 8003204:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	4313      	orrs	r3, r2
 800320c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	697a      	ldr	r2, [r7, #20]
 8003212:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	621a      	str	r2, [r3, #32]
}
 800321a:	bf00      	nop
 800321c:	371c      	adds	r7, #28
 800321e:	46bd      	mov	sp, r7
 8003220:	bc80      	pop	{r7}
 8003222:	4770      	bx	lr

08003224 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003224:	b480      	push	{r7}
 8003226:	b087      	sub	sp, #28
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
 8003230:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6a1b      	ldr	r3, [r3, #32]
 8003248:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003250:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	021b      	lsls	r3, r3, #8
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	4313      	orrs	r3, r2
 800325a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003262:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	031b      	lsls	r3, r3, #12
 8003268:	b29b      	uxth	r3, r3
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	4313      	orrs	r3, r2
 800326e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003276:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	031b      	lsls	r3, r3, #12
 800327c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	4313      	orrs	r3, r2
 8003284:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	621a      	str	r2, [r3, #32]
}
 8003292:	bf00      	nop
 8003294:	371c      	adds	r7, #28
 8003296:	46bd      	mov	sp, r7
 8003298:	bc80      	pop	{r7}
 800329a:	4770      	bx	lr

0800329c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032b2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	f043 0307 	orr.w	r3, r3, #7
 80032be:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	609a      	str	r2, [r3, #8]
}
 80032c6:	bf00      	nop
 80032c8:	3714      	adds	r7, #20
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bc80      	pop	{r7}
 80032ce:	4770      	bx	lr

080032d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b087      	sub	sp, #28
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
 80032dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	021a      	lsls	r2, r3, #8
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	431a      	orrs	r2, r3
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	609a      	str	r2, [r3, #8]
}
 8003304:	bf00      	nop
 8003306:	371c      	adds	r7, #28
 8003308:	46bd      	mov	sp, r7
 800330a:	bc80      	pop	{r7}
 800330c:	4770      	bx	lr
	...

08003310 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003320:	2b01      	cmp	r3, #1
 8003322:	d101      	bne.n	8003328 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003324:	2302      	movs	r3, #2
 8003326:	e046      	b.n	80033b6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2202      	movs	r2, #2
 8003334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800334e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	4313      	orrs	r3, r2
 8003358:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a16      	ldr	r2, [pc, #88]	; (80033c0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d00e      	beq.n	800338a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003374:	d009      	beq.n	800338a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a12      	ldr	r2, [pc, #72]	; (80033c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d004      	beq.n	800338a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a10      	ldr	r2, [pc, #64]	; (80033c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d10c      	bne.n	80033a4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003390:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	68ba      	ldr	r2, [r7, #8]
 8003398:	4313      	orrs	r3, r2
 800339a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68ba      	ldr	r2, [r7, #8]
 80033a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3714      	adds	r7, #20
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bc80      	pop	{r7}
 80033be:	4770      	bx	lr
 80033c0:	40012c00 	.word	0x40012c00
 80033c4:	40000400 	.word	0x40000400
 80033c8:	40000800 	.word	0x40000800

080033cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d101      	bne.n	80033e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80033e4:	2302      	movs	r3, #2
 80033e6:	e03d      	b.n	8003464 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	4313      	orrs	r3, r2
 800340a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	4313      	orrs	r3, r2
 8003418:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4313      	orrs	r3, r2
 8003426:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	4313      	orrs	r3, r2
 8003434:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	4313      	orrs	r3, r2
 8003442:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	4313      	orrs	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3714      	adds	r7, #20
 8003468:	46bd      	mov	sp, r7
 800346a:	bc80      	pop	{r7}
 800346c:	4770      	bx	lr

0800346e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b082      	sub	sp, #8
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d101      	bne.n	8003480 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e03f      	b.n	8003500 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b00      	cmp	r3, #0
 800348a:	d106      	bne.n	800349a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f7fd fe79 	bl	800118c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2224      	movs	r2, #36	; 0x24
 800349e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68da      	ldr	r2, [r3, #12]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034b0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 fbe4 	bl	8003c80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	691a      	ldr	r2, [r3, #16]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034c6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	695a      	ldr	r2, [r3, #20]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034d6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68da      	ldr	r2, [r3, #12]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034e6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2220      	movs	r2, #32
 80034f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2220      	movs	r2, #32
 80034fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3708      	adds	r7, #8
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	4613      	mov	r3, r2
 8003514:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b20      	cmp	r3, #32
 8003520:	d130      	bne.n	8003584 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d002      	beq.n	800352e <HAL_UART_Transmit_IT+0x26>
 8003528:	88fb      	ldrh	r3, [r7, #6]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e029      	b.n	8003586 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003538:	2b01      	cmp	r3, #1
 800353a:	d101      	bne.n	8003540 <HAL_UART_Transmit_IT+0x38>
 800353c:	2302      	movs	r3, #2
 800353e:	e022      	b.n	8003586 <HAL_UART_Transmit_IT+0x7e>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	88fa      	ldrh	r2, [r7, #6]
 8003552:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	88fa      	ldrh	r2, [r7, #6]
 8003558:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2221      	movs	r2, #33	; 0x21
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68da      	ldr	r2, [r3, #12]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800357e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003580:	2300      	movs	r3, #0
 8003582:	e000      	b.n	8003586 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003584:	2302      	movs	r3, #2
  }
}
 8003586:	4618      	mov	r0, r3
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	bc80      	pop	{r7}
 800358e:	4770      	bx	lr

08003590 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	4613      	mov	r3, r2
 800359c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b20      	cmp	r3, #32
 80035a8:	d11d      	bne.n	80035e6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d002      	beq.n	80035b6 <HAL_UART_Receive_IT+0x26>
 80035b0:	88fb      	ldrh	r3, [r7, #6]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e016      	b.n	80035e8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d101      	bne.n	80035c8 <HAL_UART_Receive_IT+0x38>
 80035c4:	2302      	movs	r3, #2
 80035c6:	e00f      	b.n	80035e8 <HAL_UART_Receive_IT+0x58>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80035d6:	88fb      	ldrh	r3, [r7, #6]
 80035d8:	461a      	mov	r2, r3
 80035da:	68b9      	ldr	r1, [r7, #8]
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f000 f9c5 	bl	800396c <UART_Start_Receive_IT>
 80035e2:	4603      	mov	r3, r0
 80035e4:	e000      	b.n	80035e8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80035e6:	2302      	movs	r3, #2
  }
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b08a      	sub	sp, #40	; 0x28
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003610:	2300      	movs	r3, #0
 8003612:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003614:	2300      	movs	r3, #0
 8003616:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361a:	f003 030f 	and.w	r3, r3, #15
 800361e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10d      	bne.n	8003642 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003628:	f003 0320 	and.w	r3, r3, #32
 800362c:	2b00      	cmp	r3, #0
 800362e:	d008      	beq.n	8003642 <HAL_UART_IRQHandler+0x52>
 8003630:	6a3b      	ldr	r3, [r7, #32]
 8003632:	f003 0320 	and.w	r3, r3, #32
 8003636:	2b00      	cmp	r3, #0
 8003638:	d003      	beq.n	8003642 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 fa76 	bl	8003b2c <UART_Receive_IT>
      return;
 8003640:	e17b      	b.n	800393a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 80b1 	beq.w	80037ac <HAL_UART_IRQHandler+0x1bc>
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	f003 0301 	and.w	r3, r3, #1
 8003650:	2b00      	cmp	r3, #0
 8003652:	d105      	bne.n	8003660 <HAL_UART_IRQHandler+0x70>
 8003654:	6a3b      	ldr	r3, [r7, #32]
 8003656:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800365a:	2b00      	cmp	r3, #0
 800365c:	f000 80a6 	beq.w	80037ac <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00a      	beq.n	8003680 <HAL_UART_IRQHandler+0x90>
 800366a:	6a3b      	ldr	r3, [r7, #32]
 800366c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003670:	2b00      	cmp	r3, #0
 8003672:	d005      	beq.n	8003680 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003678:	f043 0201 	orr.w	r2, r3, #1
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003682:	f003 0304 	and.w	r3, r3, #4
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00a      	beq.n	80036a0 <HAL_UART_IRQHandler+0xb0>
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	2b00      	cmp	r3, #0
 8003692:	d005      	beq.n	80036a0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003698:	f043 0202 	orr.w	r2, r3, #2
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00a      	beq.n	80036c0 <HAL_UART_IRQHandler+0xd0>
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	f003 0301 	and.w	r3, r3, #1
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d005      	beq.n	80036c0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b8:	f043 0204 	orr.w	r2, r3, #4
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c2:	f003 0308 	and.w	r3, r3, #8
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00f      	beq.n	80036ea <HAL_UART_IRQHandler+0xfa>
 80036ca:	6a3b      	ldr	r3, [r7, #32]
 80036cc:	f003 0320 	and.w	r3, r3, #32
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d104      	bne.n	80036de <HAL_UART_IRQHandler+0xee>
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d005      	beq.n	80036ea <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e2:	f043 0208 	orr.w	r2, r3, #8
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 811e 	beq.w	8003930 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f6:	f003 0320 	and.w	r3, r3, #32
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d007      	beq.n	800370e <HAL_UART_IRQHandler+0x11e>
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	f003 0320 	and.w	r3, r3, #32
 8003704:	2b00      	cmp	r3, #0
 8003706:	d002      	beq.n	800370e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f000 fa0f 	bl	8003b2c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003718:	2b00      	cmp	r3, #0
 800371a:	bf14      	ite	ne
 800371c:	2301      	movne	r3, #1
 800371e:	2300      	moveq	r3, #0
 8003720:	b2db      	uxtb	r3, r3
 8003722:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003728:	f003 0308 	and.w	r3, r3, #8
 800372c:	2b00      	cmp	r3, #0
 800372e:	d102      	bne.n	8003736 <HAL_UART_IRQHandler+0x146>
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d031      	beq.n	800379a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f951 	bl	80039de <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003746:	2b00      	cmp	r3, #0
 8003748:	d023      	beq.n	8003792 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	695a      	ldr	r2, [r3, #20]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003758:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375e:	2b00      	cmp	r3, #0
 8003760:	d013      	beq.n	800378a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003766:	4a76      	ldr	r2, [pc, #472]	; (8003940 <HAL_UART_IRQHandler+0x350>)
 8003768:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376e:	4618      	mov	r0, r3
 8003770:	f7fd ff98 	bl	80016a4 <HAL_DMA_Abort_IT>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d016      	beq.n	80037a8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003784:	4610      	mov	r0, r2
 8003786:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003788:	e00e      	b.n	80037a8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f8da 	bl	8003944 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003790:	e00a      	b.n	80037a8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f8d6 	bl	8003944 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003798:	e006      	b.n	80037a8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f8d2 	bl	8003944 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80037a6:	e0c3      	b.n	8003930 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037a8:	bf00      	nop
    return;
 80037aa:	e0c1      	b.n	8003930 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	f040 80a1 	bne.w	80038f8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80037b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b8:	f003 0310 	and.w	r3, r3, #16
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 809b 	beq.w	80038f8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80037c2:	6a3b      	ldr	r3, [r7, #32]
 80037c4:	f003 0310 	and.w	r3, r3, #16
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f000 8095 	beq.w	80038f8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037ce:	2300      	movs	r3, #0
 80037d0:	60fb      	str	r3, [r7, #12]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	60fb      	str	r3, [r7, #12]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	60fb      	str	r3, [r7, #12]
 80037e2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d04e      	beq.n	8003890 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80037fc:	8a3b      	ldrh	r3, [r7, #16]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	f000 8098 	beq.w	8003934 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003808:	8a3a      	ldrh	r2, [r7, #16]
 800380a:	429a      	cmp	r2, r3
 800380c:	f080 8092 	bcs.w	8003934 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	8a3a      	ldrh	r2, [r7, #16]
 8003814:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	2b20      	cmp	r3, #32
 800381e:	d02b      	beq.n	8003878 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68da      	ldr	r2, [r3, #12]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800382e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	695a      	ldr	r2, [r3, #20]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 0201 	bic.w	r2, r2, #1
 800383e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	695a      	ldr	r2, [r3, #20]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800384e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2220      	movs	r2, #32
 8003854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68da      	ldr	r2, [r3, #12]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 0210 	bic.w	r2, r2, #16
 800386c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003872:	4618      	mov	r0, r3
 8003874:	f7fd fedb 	bl	800162e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003880:	b29b      	uxth	r3, r3
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	b29b      	uxth	r3, r3
 8003886:	4619      	mov	r1, r3
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 f864 	bl	8003956 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800388e:	e051      	b.n	8003934 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003898:	b29b      	uxth	r3, r3
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d047      	beq.n	8003938 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80038a8:	8a7b      	ldrh	r3, [r7, #18]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d044      	beq.n	8003938 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68da      	ldr	r2, [r3, #12]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80038bc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695a      	ldr	r2, [r3, #20]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 0201 	bic.w	r2, r2, #1
 80038cc:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2220      	movs	r2, #32
 80038d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68da      	ldr	r2, [r3, #12]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 0210 	bic.w	r2, r2, #16
 80038ea:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80038ec:	8a7b      	ldrh	r3, [r7, #18]
 80038ee:	4619      	mov	r1, r3
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 f830 	bl	8003956 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80038f6:	e01f      	b.n	8003938 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80038f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d008      	beq.n	8003914 <HAL_UART_IRQHandler+0x324>
 8003902:	6a3b      	ldr	r3, [r7, #32]
 8003904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003908:	2b00      	cmp	r3, #0
 800390a:	d003      	beq.n	8003914 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 f8a6 	bl	8003a5e <UART_Transmit_IT>
    return;
 8003912:	e012      	b.n	800393a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00d      	beq.n	800393a <HAL_UART_IRQHandler+0x34a>
 800391e:	6a3b      	ldr	r3, [r7, #32]
 8003920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003924:	2b00      	cmp	r3, #0
 8003926:	d008      	beq.n	800393a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 f8e7 	bl	8003afc <UART_EndTransmit_IT>
    return;
 800392e:	e004      	b.n	800393a <HAL_UART_IRQHandler+0x34a>
    return;
 8003930:	bf00      	nop
 8003932:	e002      	b.n	800393a <HAL_UART_IRQHandler+0x34a>
      return;
 8003934:	bf00      	nop
 8003936:	e000      	b.n	800393a <HAL_UART_IRQHandler+0x34a>
      return;
 8003938:	bf00      	nop
  }
}
 800393a:	3728      	adds	r7, #40	; 0x28
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	08003a37 	.word	0x08003a37

08003944 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	bc80      	pop	{r7}
 8003954:	4770      	bx	lr

08003956 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003956:	b480      	push	{r7}
 8003958:	b083      	sub	sp, #12
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
 800395e:	460b      	mov	r3, r1
 8003960:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003962:	bf00      	nop
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	bc80      	pop	{r7}
 800396a:	4770      	bx	lr

0800396c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	4613      	mov	r3, r2
 8003978:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	68ba      	ldr	r2, [r7, #8]
 800397e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	88fa      	ldrh	r2, [r7, #6]
 8003984:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	88fa      	ldrh	r2, [r7, #6]
 800398a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2222      	movs	r2, #34	; 0x22
 8003996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68da      	ldr	r2, [r3, #12]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039b0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	695a      	ldr	r2, [r3, #20]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f042 0201 	orr.w	r2, r2, #1
 80039c0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68da      	ldr	r2, [r3, #12]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f042 0220 	orr.w	r2, r2, #32
 80039d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3714      	adds	r7, #20
 80039d8:	46bd      	mov	sp, r7
 80039da:	bc80      	pop	{r7}
 80039dc:	4770      	bx	lr

080039de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039de:	b480      	push	{r7}
 80039e0:	b083      	sub	sp, #12
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68da      	ldr	r2, [r3, #12]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80039f4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	695a      	ldr	r2, [r3, #20]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f022 0201 	bic.w	r2, r2, #1
 8003a04:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d107      	bne.n	8003a1e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68da      	ldr	r2, [r3, #12]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 0210 	bic.w	r2, r2, #16
 8003a1c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2220      	movs	r2, #32
 8003a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bc80      	pop	{r7}
 8003a34:	4770      	bx	lr

08003a36 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b084      	sub	sp, #16
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f7ff ff77 	bl	8003944 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a56:	bf00      	nop
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b085      	sub	sp, #20
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b21      	cmp	r3, #33	; 0x21
 8003a70:	d13e      	bne.n	8003af0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a7a:	d114      	bne.n	8003aa6 <UART_Transmit_IT+0x48>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d110      	bne.n	8003aa6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a1b      	ldr	r3, [r3, #32]
 8003a88:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	881b      	ldrh	r3, [r3, #0]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a98:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	1c9a      	adds	r2, r3, #2
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	621a      	str	r2, [r3, #32]
 8003aa4:	e008      	b.n	8003ab8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	1c59      	adds	r1, r3, #1
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	6211      	str	r1, [r2, #32]
 8003ab0:	781a      	ldrb	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10f      	bne.n	8003aec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68da      	ldr	r2, [r3, #12]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ada:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68da      	ldr	r2, [r3, #12]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003aea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003aec:	2300      	movs	r3, #0
 8003aee:	e000      	b.n	8003af2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003af0:	2302      	movs	r3, #2
  }
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3714      	adds	r7, #20
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bc80      	pop	{r7}
 8003afa:	4770      	bx	lr

08003afc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68da      	ldr	r2, [r3, #12]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b12:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2220      	movs	r2, #32
 8003b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f7fc fc81 	bl	8000424 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3708      	adds	r7, #8
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b22      	cmp	r3, #34	; 0x22
 8003b3e:	f040 8099 	bne.w	8003c74 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b4a:	d117      	bne.n	8003b7c <UART_Receive_IT+0x50>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d113      	bne.n	8003b7c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003b54:	2300      	movs	r3, #0
 8003b56:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5c:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b74:	1c9a      	adds	r2, r3, #2
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	629a      	str	r2, [r3, #40]	; 0x28
 8003b7a:	e026      	b.n	8003bca <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b80:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003b82:	2300      	movs	r3, #0
 8003b84:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b8e:	d007      	beq.n	8003ba0 <UART_Receive_IT+0x74>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10a      	bne.n	8003bae <UART_Receive_IT+0x82>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d106      	bne.n	8003bae <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	b2da      	uxtb	r2, r3
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	701a      	strb	r2, [r3, #0]
 8003bac:	e008      	b.n	8003bc0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc4:	1c5a      	adds	r2, r3, #1
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d148      	bne.n	8003c70 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68da      	ldr	r2, [r3, #12]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 0220 	bic.w	r2, r2, #32
 8003bec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68da      	ldr	r2, [r3, #12]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bfc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	695a      	ldr	r2, [r3, #20]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f022 0201 	bic.w	r2, r2, #1
 8003c0c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2220      	movs	r2, #32
 8003c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d123      	bne.n	8003c66 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68da      	ldr	r2, [r3, #12]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 0210 	bic.w	r2, r2, #16
 8003c32:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0310 	and.w	r3, r3, #16
 8003c3e:	2b10      	cmp	r3, #16
 8003c40:	d10a      	bne.n	8003c58 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c42:	2300      	movs	r3, #0
 8003c44:	60fb      	str	r3, [r7, #12]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	60fb      	str	r3, [r7, #12]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	60fb      	str	r3, [r7, #12]
 8003c56:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f7ff fe79 	bl	8003956 <HAL_UARTEx_RxEventCallback>
 8003c64:	e002      	b.n	8003c6c <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7fc fc10 	bl	800048c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	e002      	b.n	8003c76 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003c70:	2300      	movs	r3, #0
 8003c72:	e000      	b.n	8003c76 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003c74:	2302      	movs	r3, #2
  }
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3718      	adds	r7, #24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
	...

08003c80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68da      	ldr	r2, [r3, #12]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689a      	ldr	r2, [r3, #8]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003cba:	f023 030c 	bic.w	r3, r3, #12
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	6812      	ldr	r2, [r2, #0]
 8003cc2:	68b9      	ldr	r1, [r7, #8]
 8003cc4:	430b      	orrs	r3, r1
 8003cc6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	699a      	ldr	r2, [r3, #24]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a2c      	ldr	r2, [pc, #176]	; (8003d94 <UART_SetConfig+0x114>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d103      	bne.n	8003cf0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ce8:	f7fe fc3c 	bl	8002564 <HAL_RCC_GetPCLK2Freq>
 8003cec:	60f8      	str	r0, [r7, #12]
 8003cee:	e002      	b.n	8003cf6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003cf0:	f7fe fc24 	bl	800253c <HAL_RCC_GetPCLK1Freq>
 8003cf4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4413      	add	r3, r2
 8003cfe:	009a      	lsls	r2, r3, #2
 8003d00:	441a      	add	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d0c:	4a22      	ldr	r2, [pc, #136]	; (8003d98 <UART_SetConfig+0x118>)
 8003d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d12:	095b      	lsrs	r3, r3, #5
 8003d14:	0119      	lsls	r1, r3, #4
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	4413      	add	r3, r2
 8003d1e:	009a      	lsls	r2, r3, #2
 8003d20:	441a      	add	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d2c:	4b1a      	ldr	r3, [pc, #104]	; (8003d98 <UART_SetConfig+0x118>)
 8003d2e:	fba3 0302 	umull	r0, r3, r3, r2
 8003d32:	095b      	lsrs	r3, r3, #5
 8003d34:	2064      	movs	r0, #100	; 0x64
 8003d36:	fb00 f303 	mul.w	r3, r0, r3
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	011b      	lsls	r3, r3, #4
 8003d3e:	3332      	adds	r3, #50	; 0x32
 8003d40:	4a15      	ldr	r2, [pc, #84]	; (8003d98 <UART_SetConfig+0x118>)
 8003d42:	fba2 2303 	umull	r2, r3, r2, r3
 8003d46:	095b      	lsrs	r3, r3, #5
 8003d48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d4c:	4419      	add	r1, r3
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	4613      	mov	r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	4413      	add	r3, r2
 8003d56:	009a      	lsls	r2, r3, #2
 8003d58:	441a      	add	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d64:	4b0c      	ldr	r3, [pc, #48]	; (8003d98 <UART_SetConfig+0x118>)
 8003d66:	fba3 0302 	umull	r0, r3, r3, r2
 8003d6a:	095b      	lsrs	r3, r3, #5
 8003d6c:	2064      	movs	r0, #100	; 0x64
 8003d6e:	fb00 f303 	mul.w	r3, r0, r3
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	011b      	lsls	r3, r3, #4
 8003d76:	3332      	adds	r3, #50	; 0x32
 8003d78:	4a07      	ldr	r2, [pc, #28]	; (8003d98 <UART_SetConfig+0x118>)
 8003d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d7e:	095b      	lsrs	r3, r3, #5
 8003d80:	f003 020f 	and.w	r2, r3, #15
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	440a      	add	r2, r1
 8003d8a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003d8c:	bf00      	nop
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	40013800 	.word	0x40013800
 8003d98:	51eb851f 	.word	0x51eb851f

08003d9c <atoi>:
 8003d9c:	220a      	movs	r2, #10
 8003d9e:	2100      	movs	r1, #0
 8003da0:	f000 b8d0 	b.w	8003f44 <strtol>

08003da4 <__errno>:
 8003da4:	4b01      	ldr	r3, [pc, #4]	; (8003dac <__errno+0x8>)
 8003da6:	6818      	ldr	r0, [r3, #0]
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	2000000c 	.word	0x2000000c

08003db0 <__libc_init_array>:
 8003db0:	b570      	push	{r4, r5, r6, lr}
 8003db2:	2600      	movs	r6, #0
 8003db4:	4d0c      	ldr	r5, [pc, #48]	; (8003de8 <__libc_init_array+0x38>)
 8003db6:	4c0d      	ldr	r4, [pc, #52]	; (8003dec <__libc_init_array+0x3c>)
 8003db8:	1b64      	subs	r4, r4, r5
 8003dba:	10a4      	asrs	r4, r4, #2
 8003dbc:	42a6      	cmp	r6, r4
 8003dbe:	d109      	bne.n	8003dd4 <__libc_init_array+0x24>
 8003dc0:	f000 fd36 	bl	8004830 <_init>
 8003dc4:	2600      	movs	r6, #0
 8003dc6:	4d0a      	ldr	r5, [pc, #40]	; (8003df0 <__libc_init_array+0x40>)
 8003dc8:	4c0a      	ldr	r4, [pc, #40]	; (8003df4 <__libc_init_array+0x44>)
 8003dca:	1b64      	subs	r4, r4, r5
 8003dcc:	10a4      	asrs	r4, r4, #2
 8003dce:	42a6      	cmp	r6, r4
 8003dd0:	d105      	bne.n	8003dde <__libc_init_array+0x2e>
 8003dd2:	bd70      	pop	{r4, r5, r6, pc}
 8003dd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dd8:	4798      	blx	r3
 8003dda:	3601      	adds	r6, #1
 8003ddc:	e7ee      	b.n	8003dbc <__libc_init_array+0xc>
 8003dde:	f855 3b04 	ldr.w	r3, [r5], #4
 8003de2:	4798      	blx	r3
 8003de4:	3601      	adds	r6, #1
 8003de6:	e7f2      	b.n	8003dce <__libc_init_array+0x1e>
 8003de8:	08004a7c 	.word	0x08004a7c
 8003dec:	08004a7c 	.word	0x08004a7c
 8003df0:	08004a7c 	.word	0x08004a7c
 8003df4:	08004a80 	.word	0x08004a80

08003df8 <memcpy>:
 8003df8:	440a      	add	r2, r1
 8003dfa:	4291      	cmp	r1, r2
 8003dfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e00:	d100      	bne.n	8003e04 <memcpy+0xc>
 8003e02:	4770      	bx	lr
 8003e04:	b510      	push	{r4, lr}
 8003e06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e0a:	4291      	cmp	r1, r2
 8003e0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e10:	d1f9      	bne.n	8003e06 <memcpy+0xe>
 8003e12:	bd10      	pop	{r4, pc}

08003e14 <memset>:
 8003e14:	4603      	mov	r3, r0
 8003e16:	4402      	add	r2, r0
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d100      	bne.n	8003e1e <memset+0xa>
 8003e1c:	4770      	bx	lr
 8003e1e:	f803 1b01 	strb.w	r1, [r3], #1
 8003e22:	e7f9      	b.n	8003e18 <memset+0x4>

08003e24 <strncmp>:
 8003e24:	4603      	mov	r3, r0
 8003e26:	b510      	push	{r4, lr}
 8003e28:	b172      	cbz	r2, 8003e48 <strncmp+0x24>
 8003e2a:	3901      	subs	r1, #1
 8003e2c:	1884      	adds	r4, r0, r2
 8003e2e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8003e32:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8003e36:	4290      	cmp	r0, r2
 8003e38:	d101      	bne.n	8003e3e <strncmp+0x1a>
 8003e3a:	42a3      	cmp	r3, r4
 8003e3c:	d101      	bne.n	8003e42 <strncmp+0x1e>
 8003e3e:	1a80      	subs	r0, r0, r2
 8003e40:	bd10      	pop	{r4, pc}
 8003e42:	2800      	cmp	r0, #0
 8003e44:	d1f3      	bne.n	8003e2e <strncmp+0xa>
 8003e46:	e7fa      	b.n	8003e3e <strncmp+0x1a>
 8003e48:	4610      	mov	r0, r2
 8003e4a:	e7f9      	b.n	8003e40 <strncmp+0x1c>

08003e4c <_strtol_l.constprop.0>:
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e52:	4680      	mov	r8, r0
 8003e54:	d001      	beq.n	8003e5a <_strtol_l.constprop.0+0xe>
 8003e56:	2b24      	cmp	r3, #36	; 0x24
 8003e58:	d906      	bls.n	8003e68 <_strtol_l.constprop.0+0x1c>
 8003e5a:	f7ff ffa3 	bl	8003da4 <__errno>
 8003e5e:	2316      	movs	r3, #22
 8003e60:	6003      	str	r3, [r0, #0]
 8003e62:	2000      	movs	r0, #0
 8003e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e68:	460d      	mov	r5, r1
 8003e6a:	4f35      	ldr	r7, [pc, #212]	; (8003f40 <_strtol_l.constprop.0+0xf4>)
 8003e6c:	4628      	mov	r0, r5
 8003e6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003e72:	5de6      	ldrb	r6, [r4, r7]
 8003e74:	f016 0608 	ands.w	r6, r6, #8
 8003e78:	d1f8      	bne.n	8003e6c <_strtol_l.constprop.0+0x20>
 8003e7a:	2c2d      	cmp	r4, #45	; 0x2d
 8003e7c:	d12f      	bne.n	8003ede <_strtol_l.constprop.0+0x92>
 8003e7e:	2601      	movs	r6, #1
 8003e80:	782c      	ldrb	r4, [r5, #0]
 8003e82:	1c85      	adds	r5, r0, #2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d057      	beq.n	8003f38 <_strtol_l.constprop.0+0xec>
 8003e88:	2b10      	cmp	r3, #16
 8003e8a:	d109      	bne.n	8003ea0 <_strtol_l.constprop.0+0x54>
 8003e8c:	2c30      	cmp	r4, #48	; 0x30
 8003e8e:	d107      	bne.n	8003ea0 <_strtol_l.constprop.0+0x54>
 8003e90:	7828      	ldrb	r0, [r5, #0]
 8003e92:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8003e96:	2858      	cmp	r0, #88	; 0x58
 8003e98:	d149      	bne.n	8003f2e <_strtol_l.constprop.0+0xe2>
 8003e9a:	2310      	movs	r3, #16
 8003e9c:	786c      	ldrb	r4, [r5, #1]
 8003e9e:	3502      	adds	r5, #2
 8003ea0:	2700      	movs	r7, #0
 8003ea2:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8003ea6:	f10e 3eff 	add.w	lr, lr, #4294967295
 8003eaa:	fbbe f9f3 	udiv	r9, lr, r3
 8003eae:	4638      	mov	r0, r7
 8003eb0:	fb03 ea19 	mls	sl, r3, r9, lr
 8003eb4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8003eb8:	f1bc 0f09 	cmp.w	ip, #9
 8003ebc:	d814      	bhi.n	8003ee8 <_strtol_l.constprop.0+0x9c>
 8003ebe:	4664      	mov	r4, ip
 8003ec0:	42a3      	cmp	r3, r4
 8003ec2:	dd22      	ble.n	8003f0a <_strtol_l.constprop.0+0xbe>
 8003ec4:	2f00      	cmp	r7, #0
 8003ec6:	db1d      	blt.n	8003f04 <_strtol_l.constprop.0+0xb8>
 8003ec8:	4581      	cmp	r9, r0
 8003eca:	d31b      	bcc.n	8003f04 <_strtol_l.constprop.0+0xb8>
 8003ecc:	d101      	bne.n	8003ed2 <_strtol_l.constprop.0+0x86>
 8003ece:	45a2      	cmp	sl, r4
 8003ed0:	db18      	blt.n	8003f04 <_strtol_l.constprop.0+0xb8>
 8003ed2:	2701      	movs	r7, #1
 8003ed4:	fb00 4003 	mla	r0, r0, r3, r4
 8003ed8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003edc:	e7ea      	b.n	8003eb4 <_strtol_l.constprop.0+0x68>
 8003ede:	2c2b      	cmp	r4, #43	; 0x2b
 8003ee0:	bf04      	itt	eq
 8003ee2:	782c      	ldrbeq	r4, [r5, #0]
 8003ee4:	1c85      	addeq	r5, r0, #2
 8003ee6:	e7cd      	b.n	8003e84 <_strtol_l.constprop.0+0x38>
 8003ee8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8003eec:	f1bc 0f19 	cmp.w	ip, #25
 8003ef0:	d801      	bhi.n	8003ef6 <_strtol_l.constprop.0+0xaa>
 8003ef2:	3c37      	subs	r4, #55	; 0x37
 8003ef4:	e7e4      	b.n	8003ec0 <_strtol_l.constprop.0+0x74>
 8003ef6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8003efa:	f1bc 0f19 	cmp.w	ip, #25
 8003efe:	d804      	bhi.n	8003f0a <_strtol_l.constprop.0+0xbe>
 8003f00:	3c57      	subs	r4, #87	; 0x57
 8003f02:	e7dd      	b.n	8003ec0 <_strtol_l.constprop.0+0x74>
 8003f04:	f04f 37ff 	mov.w	r7, #4294967295
 8003f08:	e7e6      	b.n	8003ed8 <_strtol_l.constprop.0+0x8c>
 8003f0a:	2f00      	cmp	r7, #0
 8003f0c:	da07      	bge.n	8003f1e <_strtol_l.constprop.0+0xd2>
 8003f0e:	2322      	movs	r3, #34	; 0x22
 8003f10:	4670      	mov	r0, lr
 8003f12:	f8c8 3000 	str.w	r3, [r8]
 8003f16:	2a00      	cmp	r2, #0
 8003f18:	d0a4      	beq.n	8003e64 <_strtol_l.constprop.0+0x18>
 8003f1a:	1e69      	subs	r1, r5, #1
 8003f1c:	e005      	b.n	8003f2a <_strtol_l.constprop.0+0xde>
 8003f1e:	b106      	cbz	r6, 8003f22 <_strtol_l.constprop.0+0xd6>
 8003f20:	4240      	negs	r0, r0
 8003f22:	2a00      	cmp	r2, #0
 8003f24:	d09e      	beq.n	8003e64 <_strtol_l.constprop.0+0x18>
 8003f26:	2f00      	cmp	r7, #0
 8003f28:	d1f7      	bne.n	8003f1a <_strtol_l.constprop.0+0xce>
 8003f2a:	6011      	str	r1, [r2, #0]
 8003f2c:	e79a      	b.n	8003e64 <_strtol_l.constprop.0+0x18>
 8003f2e:	2430      	movs	r4, #48	; 0x30
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1b5      	bne.n	8003ea0 <_strtol_l.constprop.0+0x54>
 8003f34:	2308      	movs	r3, #8
 8003f36:	e7b3      	b.n	8003ea0 <_strtol_l.constprop.0+0x54>
 8003f38:	2c30      	cmp	r4, #48	; 0x30
 8003f3a:	d0a9      	beq.n	8003e90 <_strtol_l.constprop.0+0x44>
 8003f3c:	230a      	movs	r3, #10
 8003f3e:	e7af      	b.n	8003ea0 <_strtol_l.constprop.0+0x54>
 8003f40:	08004949 	.word	0x08004949

08003f44 <strtol>:
 8003f44:	4613      	mov	r3, r2
 8003f46:	460a      	mov	r2, r1
 8003f48:	4601      	mov	r1, r0
 8003f4a:	4802      	ldr	r0, [pc, #8]	; (8003f54 <strtol+0x10>)
 8003f4c:	6800      	ldr	r0, [r0, #0]
 8003f4e:	f7ff bf7d 	b.w	8003e4c <_strtol_l.constprop.0>
 8003f52:	bf00      	nop
 8003f54:	2000000c 	.word	0x2000000c

08003f58 <_vsiprintf_r>:
 8003f58:	b500      	push	{lr}
 8003f5a:	b09b      	sub	sp, #108	; 0x6c
 8003f5c:	9100      	str	r1, [sp, #0]
 8003f5e:	9104      	str	r1, [sp, #16]
 8003f60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f64:	9105      	str	r1, [sp, #20]
 8003f66:	9102      	str	r1, [sp, #8]
 8003f68:	4905      	ldr	r1, [pc, #20]	; (8003f80 <_vsiprintf_r+0x28>)
 8003f6a:	9103      	str	r1, [sp, #12]
 8003f6c:	4669      	mov	r1, sp
 8003f6e:	f000 f86f 	bl	8004050 <_svfiprintf_r>
 8003f72:	2200      	movs	r2, #0
 8003f74:	9b00      	ldr	r3, [sp, #0]
 8003f76:	701a      	strb	r2, [r3, #0]
 8003f78:	b01b      	add	sp, #108	; 0x6c
 8003f7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8003f7e:	bf00      	nop
 8003f80:	ffff0208 	.word	0xffff0208

08003f84 <vsiprintf>:
 8003f84:	4613      	mov	r3, r2
 8003f86:	460a      	mov	r2, r1
 8003f88:	4601      	mov	r1, r0
 8003f8a:	4802      	ldr	r0, [pc, #8]	; (8003f94 <vsiprintf+0x10>)
 8003f8c:	6800      	ldr	r0, [r0, #0]
 8003f8e:	f7ff bfe3 	b.w	8003f58 <_vsiprintf_r>
 8003f92:	bf00      	nop
 8003f94:	2000000c 	.word	0x2000000c

08003f98 <__ssputs_r>:
 8003f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f9c:	688e      	ldr	r6, [r1, #8]
 8003f9e:	4682      	mov	sl, r0
 8003fa0:	429e      	cmp	r6, r3
 8003fa2:	460c      	mov	r4, r1
 8003fa4:	4690      	mov	r8, r2
 8003fa6:	461f      	mov	r7, r3
 8003fa8:	d838      	bhi.n	800401c <__ssputs_r+0x84>
 8003faa:	898a      	ldrh	r2, [r1, #12]
 8003fac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003fb0:	d032      	beq.n	8004018 <__ssputs_r+0x80>
 8003fb2:	6825      	ldr	r5, [r4, #0]
 8003fb4:	6909      	ldr	r1, [r1, #16]
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	eba5 0901 	sub.w	r9, r5, r1
 8003fbc:	6965      	ldr	r5, [r4, #20]
 8003fbe:	444b      	add	r3, r9
 8003fc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003fc4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003fc8:	106d      	asrs	r5, r5, #1
 8003fca:	429d      	cmp	r5, r3
 8003fcc:	bf38      	it	cc
 8003fce:	461d      	movcc	r5, r3
 8003fd0:	0553      	lsls	r3, r2, #21
 8003fd2:	d531      	bpl.n	8004038 <__ssputs_r+0xa0>
 8003fd4:	4629      	mov	r1, r5
 8003fd6:	f000 fb61 	bl	800469c <_malloc_r>
 8003fda:	4606      	mov	r6, r0
 8003fdc:	b950      	cbnz	r0, 8003ff4 <__ssputs_r+0x5c>
 8003fde:	230c      	movs	r3, #12
 8003fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fe4:	f8ca 3000 	str.w	r3, [sl]
 8003fe8:	89a3      	ldrh	r3, [r4, #12]
 8003fea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fee:	81a3      	strh	r3, [r4, #12]
 8003ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ff4:	464a      	mov	r2, r9
 8003ff6:	6921      	ldr	r1, [r4, #16]
 8003ff8:	f7ff fefe 	bl	8003df8 <memcpy>
 8003ffc:	89a3      	ldrh	r3, [r4, #12]
 8003ffe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004006:	81a3      	strh	r3, [r4, #12]
 8004008:	6126      	str	r6, [r4, #16]
 800400a:	444e      	add	r6, r9
 800400c:	6026      	str	r6, [r4, #0]
 800400e:	463e      	mov	r6, r7
 8004010:	6165      	str	r5, [r4, #20]
 8004012:	eba5 0509 	sub.w	r5, r5, r9
 8004016:	60a5      	str	r5, [r4, #8]
 8004018:	42be      	cmp	r6, r7
 800401a:	d900      	bls.n	800401e <__ssputs_r+0x86>
 800401c:	463e      	mov	r6, r7
 800401e:	4632      	mov	r2, r6
 8004020:	4641      	mov	r1, r8
 8004022:	6820      	ldr	r0, [r4, #0]
 8004024:	f000 fab8 	bl	8004598 <memmove>
 8004028:	68a3      	ldr	r3, [r4, #8]
 800402a:	2000      	movs	r0, #0
 800402c:	1b9b      	subs	r3, r3, r6
 800402e:	60a3      	str	r3, [r4, #8]
 8004030:	6823      	ldr	r3, [r4, #0]
 8004032:	4433      	add	r3, r6
 8004034:	6023      	str	r3, [r4, #0]
 8004036:	e7db      	b.n	8003ff0 <__ssputs_r+0x58>
 8004038:	462a      	mov	r2, r5
 800403a:	f000 fba3 	bl	8004784 <_realloc_r>
 800403e:	4606      	mov	r6, r0
 8004040:	2800      	cmp	r0, #0
 8004042:	d1e1      	bne.n	8004008 <__ssputs_r+0x70>
 8004044:	4650      	mov	r0, sl
 8004046:	6921      	ldr	r1, [r4, #16]
 8004048:	f000 fac0 	bl	80045cc <_free_r>
 800404c:	e7c7      	b.n	8003fde <__ssputs_r+0x46>
	...

08004050 <_svfiprintf_r>:
 8004050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004054:	4698      	mov	r8, r3
 8004056:	898b      	ldrh	r3, [r1, #12]
 8004058:	4607      	mov	r7, r0
 800405a:	061b      	lsls	r3, r3, #24
 800405c:	460d      	mov	r5, r1
 800405e:	4614      	mov	r4, r2
 8004060:	b09d      	sub	sp, #116	; 0x74
 8004062:	d50e      	bpl.n	8004082 <_svfiprintf_r+0x32>
 8004064:	690b      	ldr	r3, [r1, #16]
 8004066:	b963      	cbnz	r3, 8004082 <_svfiprintf_r+0x32>
 8004068:	2140      	movs	r1, #64	; 0x40
 800406a:	f000 fb17 	bl	800469c <_malloc_r>
 800406e:	6028      	str	r0, [r5, #0]
 8004070:	6128      	str	r0, [r5, #16]
 8004072:	b920      	cbnz	r0, 800407e <_svfiprintf_r+0x2e>
 8004074:	230c      	movs	r3, #12
 8004076:	603b      	str	r3, [r7, #0]
 8004078:	f04f 30ff 	mov.w	r0, #4294967295
 800407c:	e0d1      	b.n	8004222 <_svfiprintf_r+0x1d2>
 800407e:	2340      	movs	r3, #64	; 0x40
 8004080:	616b      	str	r3, [r5, #20]
 8004082:	2300      	movs	r3, #0
 8004084:	9309      	str	r3, [sp, #36]	; 0x24
 8004086:	2320      	movs	r3, #32
 8004088:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800408c:	2330      	movs	r3, #48	; 0x30
 800408e:	f04f 0901 	mov.w	r9, #1
 8004092:	f8cd 800c 	str.w	r8, [sp, #12]
 8004096:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800423c <_svfiprintf_r+0x1ec>
 800409a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800409e:	4623      	mov	r3, r4
 80040a0:	469a      	mov	sl, r3
 80040a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80040a6:	b10a      	cbz	r2, 80040ac <_svfiprintf_r+0x5c>
 80040a8:	2a25      	cmp	r2, #37	; 0x25
 80040aa:	d1f9      	bne.n	80040a0 <_svfiprintf_r+0x50>
 80040ac:	ebba 0b04 	subs.w	fp, sl, r4
 80040b0:	d00b      	beq.n	80040ca <_svfiprintf_r+0x7a>
 80040b2:	465b      	mov	r3, fp
 80040b4:	4622      	mov	r2, r4
 80040b6:	4629      	mov	r1, r5
 80040b8:	4638      	mov	r0, r7
 80040ba:	f7ff ff6d 	bl	8003f98 <__ssputs_r>
 80040be:	3001      	adds	r0, #1
 80040c0:	f000 80aa 	beq.w	8004218 <_svfiprintf_r+0x1c8>
 80040c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80040c6:	445a      	add	r2, fp
 80040c8:	9209      	str	r2, [sp, #36]	; 0x24
 80040ca:	f89a 3000 	ldrb.w	r3, [sl]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f000 80a2 	beq.w	8004218 <_svfiprintf_r+0x1c8>
 80040d4:	2300      	movs	r3, #0
 80040d6:	f04f 32ff 	mov.w	r2, #4294967295
 80040da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040de:	f10a 0a01 	add.w	sl, sl, #1
 80040e2:	9304      	str	r3, [sp, #16]
 80040e4:	9307      	str	r3, [sp, #28]
 80040e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80040ea:	931a      	str	r3, [sp, #104]	; 0x68
 80040ec:	4654      	mov	r4, sl
 80040ee:	2205      	movs	r2, #5
 80040f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040f4:	4851      	ldr	r0, [pc, #324]	; (800423c <_svfiprintf_r+0x1ec>)
 80040f6:	f000 fa41 	bl	800457c <memchr>
 80040fa:	9a04      	ldr	r2, [sp, #16]
 80040fc:	b9d8      	cbnz	r0, 8004136 <_svfiprintf_r+0xe6>
 80040fe:	06d0      	lsls	r0, r2, #27
 8004100:	bf44      	itt	mi
 8004102:	2320      	movmi	r3, #32
 8004104:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004108:	0711      	lsls	r1, r2, #28
 800410a:	bf44      	itt	mi
 800410c:	232b      	movmi	r3, #43	; 0x2b
 800410e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004112:	f89a 3000 	ldrb.w	r3, [sl]
 8004116:	2b2a      	cmp	r3, #42	; 0x2a
 8004118:	d015      	beq.n	8004146 <_svfiprintf_r+0xf6>
 800411a:	4654      	mov	r4, sl
 800411c:	2000      	movs	r0, #0
 800411e:	f04f 0c0a 	mov.w	ip, #10
 8004122:	9a07      	ldr	r2, [sp, #28]
 8004124:	4621      	mov	r1, r4
 8004126:	f811 3b01 	ldrb.w	r3, [r1], #1
 800412a:	3b30      	subs	r3, #48	; 0x30
 800412c:	2b09      	cmp	r3, #9
 800412e:	d94e      	bls.n	80041ce <_svfiprintf_r+0x17e>
 8004130:	b1b0      	cbz	r0, 8004160 <_svfiprintf_r+0x110>
 8004132:	9207      	str	r2, [sp, #28]
 8004134:	e014      	b.n	8004160 <_svfiprintf_r+0x110>
 8004136:	eba0 0308 	sub.w	r3, r0, r8
 800413a:	fa09 f303 	lsl.w	r3, r9, r3
 800413e:	4313      	orrs	r3, r2
 8004140:	46a2      	mov	sl, r4
 8004142:	9304      	str	r3, [sp, #16]
 8004144:	e7d2      	b.n	80040ec <_svfiprintf_r+0x9c>
 8004146:	9b03      	ldr	r3, [sp, #12]
 8004148:	1d19      	adds	r1, r3, #4
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	9103      	str	r1, [sp, #12]
 800414e:	2b00      	cmp	r3, #0
 8004150:	bfbb      	ittet	lt
 8004152:	425b      	neglt	r3, r3
 8004154:	f042 0202 	orrlt.w	r2, r2, #2
 8004158:	9307      	strge	r3, [sp, #28]
 800415a:	9307      	strlt	r3, [sp, #28]
 800415c:	bfb8      	it	lt
 800415e:	9204      	strlt	r2, [sp, #16]
 8004160:	7823      	ldrb	r3, [r4, #0]
 8004162:	2b2e      	cmp	r3, #46	; 0x2e
 8004164:	d10c      	bne.n	8004180 <_svfiprintf_r+0x130>
 8004166:	7863      	ldrb	r3, [r4, #1]
 8004168:	2b2a      	cmp	r3, #42	; 0x2a
 800416a:	d135      	bne.n	80041d8 <_svfiprintf_r+0x188>
 800416c:	9b03      	ldr	r3, [sp, #12]
 800416e:	3402      	adds	r4, #2
 8004170:	1d1a      	adds	r2, r3, #4
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	9203      	str	r2, [sp, #12]
 8004176:	2b00      	cmp	r3, #0
 8004178:	bfb8      	it	lt
 800417a:	f04f 33ff 	movlt.w	r3, #4294967295
 800417e:	9305      	str	r3, [sp, #20]
 8004180:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004240 <_svfiprintf_r+0x1f0>
 8004184:	2203      	movs	r2, #3
 8004186:	4650      	mov	r0, sl
 8004188:	7821      	ldrb	r1, [r4, #0]
 800418a:	f000 f9f7 	bl	800457c <memchr>
 800418e:	b140      	cbz	r0, 80041a2 <_svfiprintf_r+0x152>
 8004190:	2340      	movs	r3, #64	; 0x40
 8004192:	eba0 000a 	sub.w	r0, r0, sl
 8004196:	fa03 f000 	lsl.w	r0, r3, r0
 800419a:	9b04      	ldr	r3, [sp, #16]
 800419c:	3401      	adds	r4, #1
 800419e:	4303      	orrs	r3, r0
 80041a0:	9304      	str	r3, [sp, #16]
 80041a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041a6:	2206      	movs	r2, #6
 80041a8:	4826      	ldr	r0, [pc, #152]	; (8004244 <_svfiprintf_r+0x1f4>)
 80041aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80041ae:	f000 f9e5 	bl	800457c <memchr>
 80041b2:	2800      	cmp	r0, #0
 80041b4:	d038      	beq.n	8004228 <_svfiprintf_r+0x1d8>
 80041b6:	4b24      	ldr	r3, [pc, #144]	; (8004248 <_svfiprintf_r+0x1f8>)
 80041b8:	bb1b      	cbnz	r3, 8004202 <_svfiprintf_r+0x1b2>
 80041ba:	9b03      	ldr	r3, [sp, #12]
 80041bc:	3307      	adds	r3, #7
 80041be:	f023 0307 	bic.w	r3, r3, #7
 80041c2:	3308      	adds	r3, #8
 80041c4:	9303      	str	r3, [sp, #12]
 80041c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041c8:	4433      	add	r3, r6
 80041ca:	9309      	str	r3, [sp, #36]	; 0x24
 80041cc:	e767      	b.n	800409e <_svfiprintf_r+0x4e>
 80041ce:	460c      	mov	r4, r1
 80041d0:	2001      	movs	r0, #1
 80041d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80041d6:	e7a5      	b.n	8004124 <_svfiprintf_r+0xd4>
 80041d8:	2300      	movs	r3, #0
 80041da:	f04f 0c0a 	mov.w	ip, #10
 80041de:	4619      	mov	r1, r3
 80041e0:	3401      	adds	r4, #1
 80041e2:	9305      	str	r3, [sp, #20]
 80041e4:	4620      	mov	r0, r4
 80041e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041ea:	3a30      	subs	r2, #48	; 0x30
 80041ec:	2a09      	cmp	r2, #9
 80041ee:	d903      	bls.n	80041f8 <_svfiprintf_r+0x1a8>
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d0c5      	beq.n	8004180 <_svfiprintf_r+0x130>
 80041f4:	9105      	str	r1, [sp, #20]
 80041f6:	e7c3      	b.n	8004180 <_svfiprintf_r+0x130>
 80041f8:	4604      	mov	r4, r0
 80041fa:	2301      	movs	r3, #1
 80041fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8004200:	e7f0      	b.n	80041e4 <_svfiprintf_r+0x194>
 8004202:	ab03      	add	r3, sp, #12
 8004204:	9300      	str	r3, [sp, #0]
 8004206:	462a      	mov	r2, r5
 8004208:	4638      	mov	r0, r7
 800420a:	4b10      	ldr	r3, [pc, #64]	; (800424c <_svfiprintf_r+0x1fc>)
 800420c:	a904      	add	r1, sp, #16
 800420e:	f3af 8000 	nop.w
 8004212:	1c42      	adds	r2, r0, #1
 8004214:	4606      	mov	r6, r0
 8004216:	d1d6      	bne.n	80041c6 <_svfiprintf_r+0x176>
 8004218:	89ab      	ldrh	r3, [r5, #12]
 800421a:	065b      	lsls	r3, r3, #25
 800421c:	f53f af2c 	bmi.w	8004078 <_svfiprintf_r+0x28>
 8004220:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004222:	b01d      	add	sp, #116	; 0x74
 8004224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004228:	ab03      	add	r3, sp, #12
 800422a:	9300      	str	r3, [sp, #0]
 800422c:	462a      	mov	r2, r5
 800422e:	4638      	mov	r0, r7
 8004230:	4b06      	ldr	r3, [pc, #24]	; (800424c <_svfiprintf_r+0x1fc>)
 8004232:	a904      	add	r1, sp, #16
 8004234:	f000 f87c 	bl	8004330 <_printf_i>
 8004238:	e7eb      	b.n	8004212 <_svfiprintf_r+0x1c2>
 800423a:	bf00      	nop
 800423c:	08004a49 	.word	0x08004a49
 8004240:	08004a4f 	.word	0x08004a4f
 8004244:	08004a53 	.word	0x08004a53
 8004248:	00000000 	.word	0x00000000
 800424c:	08003f99 	.word	0x08003f99

08004250 <_printf_common>:
 8004250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004254:	4616      	mov	r6, r2
 8004256:	4699      	mov	r9, r3
 8004258:	688a      	ldr	r2, [r1, #8]
 800425a:	690b      	ldr	r3, [r1, #16]
 800425c:	4607      	mov	r7, r0
 800425e:	4293      	cmp	r3, r2
 8004260:	bfb8      	it	lt
 8004262:	4613      	movlt	r3, r2
 8004264:	6033      	str	r3, [r6, #0]
 8004266:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800426a:	460c      	mov	r4, r1
 800426c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004270:	b10a      	cbz	r2, 8004276 <_printf_common+0x26>
 8004272:	3301      	adds	r3, #1
 8004274:	6033      	str	r3, [r6, #0]
 8004276:	6823      	ldr	r3, [r4, #0]
 8004278:	0699      	lsls	r1, r3, #26
 800427a:	bf42      	ittt	mi
 800427c:	6833      	ldrmi	r3, [r6, #0]
 800427e:	3302      	addmi	r3, #2
 8004280:	6033      	strmi	r3, [r6, #0]
 8004282:	6825      	ldr	r5, [r4, #0]
 8004284:	f015 0506 	ands.w	r5, r5, #6
 8004288:	d106      	bne.n	8004298 <_printf_common+0x48>
 800428a:	f104 0a19 	add.w	sl, r4, #25
 800428e:	68e3      	ldr	r3, [r4, #12]
 8004290:	6832      	ldr	r2, [r6, #0]
 8004292:	1a9b      	subs	r3, r3, r2
 8004294:	42ab      	cmp	r3, r5
 8004296:	dc28      	bgt.n	80042ea <_printf_common+0x9a>
 8004298:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800429c:	1e13      	subs	r3, r2, #0
 800429e:	6822      	ldr	r2, [r4, #0]
 80042a0:	bf18      	it	ne
 80042a2:	2301      	movne	r3, #1
 80042a4:	0692      	lsls	r2, r2, #26
 80042a6:	d42d      	bmi.n	8004304 <_printf_common+0xb4>
 80042a8:	4649      	mov	r1, r9
 80042aa:	4638      	mov	r0, r7
 80042ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042b0:	47c0      	blx	r8
 80042b2:	3001      	adds	r0, #1
 80042b4:	d020      	beq.n	80042f8 <_printf_common+0xa8>
 80042b6:	6823      	ldr	r3, [r4, #0]
 80042b8:	68e5      	ldr	r5, [r4, #12]
 80042ba:	f003 0306 	and.w	r3, r3, #6
 80042be:	2b04      	cmp	r3, #4
 80042c0:	bf18      	it	ne
 80042c2:	2500      	movne	r5, #0
 80042c4:	6832      	ldr	r2, [r6, #0]
 80042c6:	f04f 0600 	mov.w	r6, #0
 80042ca:	68a3      	ldr	r3, [r4, #8]
 80042cc:	bf08      	it	eq
 80042ce:	1aad      	subeq	r5, r5, r2
 80042d0:	6922      	ldr	r2, [r4, #16]
 80042d2:	bf08      	it	eq
 80042d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042d8:	4293      	cmp	r3, r2
 80042da:	bfc4      	itt	gt
 80042dc:	1a9b      	subgt	r3, r3, r2
 80042de:	18ed      	addgt	r5, r5, r3
 80042e0:	341a      	adds	r4, #26
 80042e2:	42b5      	cmp	r5, r6
 80042e4:	d11a      	bne.n	800431c <_printf_common+0xcc>
 80042e6:	2000      	movs	r0, #0
 80042e8:	e008      	b.n	80042fc <_printf_common+0xac>
 80042ea:	2301      	movs	r3, #1
 80042ec:	4652      	mov	r2, sl
 80042ee:	4649      	mov	r1, r9
 80042f0:	4638      	mov	r0, r7
 80042f2:	47c0      	blx	r8
 80042f4:	3001      	adds	r0, #1
 80042f6:	d103      	bne.n	8004300 <_printf_common+0xb0>
 80042f8:	f04f 30ff 	mov.w	r0, #4294967295
 80042fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004300:	3501      	adds	r5, #1
 8004302:	e7c4      	b.n	800428e <_printf_common+0x3e>
 8004304:	2030      	movs	r0, #48	; 0x30
 8004306:	18e1      	adds	r1, r4, r3
 8004308:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800430c:	1c5a      	adds	r2, r3, #1
 800430e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004312:	4422      	add	r2, r4
 8004314:	3302      	adds	r3, #2
 8004316:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800431a:	e7c5      	b.n	80042a8 <_printf_common+0x58>
 800431c:	2301      	movs	r3, #1
 800431e:	4622      	mov	r2, r4
 8004320:	4649      	mov	r1, r9
 8004322:	4638      	mov	r0, r7
 8004324:	47c0      	blx	r8
 8004326:	3001      	adds	r0, #1
 8004328:	d0e6      	beq.n	80042f8 <_printf_common+0xa8>
 800432a:	3601      	adds	r6, #1
 800432c:	e7d9      	b.n	80042e2 <_printf_common+0x92>
	...

08004330 <_printf_i>:
 8004330:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004334:	7e0f      	ldrb	r7, [r1, #24]
 8004336:	4691      	mov	r9, r2
 8004338:	2f78      	cmp	r7, #120	; 0x78
 800433a:	4680      	mov	r8, r0
 800433c:	460c      	mov	r4, r1
 800433e:	469a      	mov	sl, r3
 8004340:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004342:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004346:	d807      	bhi.n	8004358 <_printf_i+0x28>
 8004348:	2f62      	cmp	r7, #98	; 0x62
 800434a:	d80a      	bhi.n	8004362 <_printf_i+0x32>
 800434c:	2f00      	cmp	r7, #0
 800434e:	f000 80d9 	beq.w	8004504 <_printf_i+0x1d4>
 8004352:	2f58      	cmp	r7, #88	; 0x58
 8004354:	f000 80a4 	beq.w	80044a0 <_printf_i+0x170>
 8004358:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800435c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004360:	e03a      	b.n	80043d8 <_printf_i+0xa8>
 8004362:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004366:	2b15      	cmp	r3, #21
 8004368:	d8f6      	bhi.n	8004358 <_printf_i+0x28>
 800436a:	a101      	add	r1, pc, #4	; (adr r1, 8004370 <_printf_i+0x40>)
 800436c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004370:	080043c9 	.word	0x080043c9
 8004374:	080043dd 	.word	0x080043dd
 8004378:	08004359 	.word	0x08004359
 800437c:	08004359 	.word	0x08004359
 8004380:	08004359 	.word	0x08004359
 8004384:	08004359 	.word	0x08004359
 8004388:	080043dd 	.word	0x080043dd
 800438c:	08004359 	.word	0x08004359
 8004390:	08004359 	.word	0x08004359
 8004394:	08004359 	.word	0x08004359
 8004398:	08004359 	.word	0x08004359
 800439c:	080044eb 	.word	0x080044eb
 80043a0:	0800440d 	.word	0x0800440d
 80043a4:	080044cd 	.word	0x080044cd
 80043a8:	08004359 	.word	0x08004359
 80043ac:	08004359 	.word	0x08004359
 80043b0:	0800450d 	.word	0x0800450d
 80043b4:	08004359 	.word	0x08004359
 80043b8:	0800440d 	.word	0x0800440d
 80043bc:	08004359 	.word	0x08004359
 80043c0:	08004359 	.word	0x08004359
 80043c4:	080044d5 	.word	0x080044d5
 80043c8:	682b      	ldr	r3, [r5, #0]
 80043ca:	1d1a      	adds	r2, r3, #4
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	602a      	str	r2, [r5, #0]
 80043d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043d8:	2301      	movs	r3, #1
 80043da:	e0a4      	b.n	8004526 <_printf_i+0x1f6>
 80043dc:	6820      	ldr	r0, [r4, #0]
 80043de:	6829      	ldr	r1, [r5, #0]
 80043e0:	0606      	lsls	r6, r0, #24
 80043e2:	f101 0304 	add.w	r3, r1, #4
 80043e6:	d50a      	bpl.n	80043fe <_printf_i+0xce>
 80043e8:	680e      	ldr	r6, [r1, #0]
 80043ea:	602b      	str	r3, [r5, #0]
 80043ec:	2e00      	cmp	r6, #0
 80043ee:	da03      	bge.n	80043f8 <_printf_i+0xc8>
 80043f0:	232d      	movs	r3, #45	; 0x2d
 80043f2:	4276      	negs	r6, r6
 80043f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043f8:	230a      	movs	r3, #10
 80043fa:	485e      	ldr	r0, [pc, #376]	; (8004574 <_printf_i+0x244>)
 80043fc:	e019      	b.n	8004432 <_printf_i+0x102>
 80043fe:	680e      	ldr	r6, [r1, #0]
 8004400:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004404:	602b      	str	r3, [r5, #0]
 8004406:	bf18      	it	ne
 8004408:	b236      	sxthne	r6, r6
 800440a:	e7ef      	b.n	80043ec <_printf_i+0xbc>
 800440c:	682b      	ldr	r3, [r5, #0]
 800440e:	6820      	ldr	r0, [r4, #0]
 8004410:	1d19      	adds	r1, r3, #4
 8004412:	6029      	str	r1, [r5, #0]
 8004414:	0601      	lsls	r1, r0, #24
 8004416:	d501      	bpl.n	800441c <_printf_i+0xec>
 8004418:	681e      	ldr	r6, [r3, #0]
 800441a:	e002      	b.n	8004422 <_printf_i+0xf2>
 800441c:	0646      	lsls	r6, r0, #25
 800441e:	d5fb      	bpl.n	8004418 <_printf_i+0xe8>
 8004420:	881e      	ldrh	r6, [r3, #0]
 8004422:	2f6f      	cmp	r7, #111	; 0x6f
 8004424:	bf0c      	ite	eq
 8004426:	2308      	moveq	r3, #8
 8004428:	230a      	movne	r3, #10
 800442a:	4852      	ldr	r0, [pc, #328]	; (8004574 <_printf_i+0x244>)
 800442c:	2100      	movs	r1, #0
 800442e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004432:	6865      	ldr	r5, [r4, #4]
 8004434:	2d00      	cmp	r5, #0
 8004436:	bfa8      	it	ge
 8004438:	6821      	ldrge	r1, [r4, #0]
 800443a:	60a5      	str	r5, [r4, #8]
 800443c:	bfa4      	itt	ge
 800443e:	f021 0104 	bicge.w	r1, r1, #4
 8004442:	6021      	strge	r1, [r4, #0]
 8004444:	b90e      	cbnz	r6, 800444a <_printf_i+0x11a>
 8004446:	2d00      	cmp	r5, #0
 8004448:	d04d      	beq.n	80044e6 <_printf_i+0x1b6>
 800444a:	4615      	mov	r5, r2
 800444c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004450:	fb03 6711 	mls	r7, r3, r1, r6
 8004454:	5dc7      	ldrb	r7, [r0, r7]
 8004456:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800445a:	4637      	mov	r7, r6
 800445c:	42bb      	cmp	r3, r7
 800445e:	460e      	mov	r6, r1
 8004460:	d9f4      	bls.n	800444c <_printf_i+0x11c>
 8004462:	2b08      	cmp	r3, #8
 8004464:	d10b      	bne.n	800447e <_printf_i+0x14e>
 8004466:	6823      	ldr	r3, [r4, #0]
 8004468:	07de      	lsls	r6, r3, #31
 800446a:	d508      	bpl.n	800447e <_printf_i+0x14e>
 800446c:	6923      	ldr	r3, [r4, #16]
 800446e:	6861      	ldr	r1, [r4, #4]
 8004470:	4299      	cmp	r1, r3
 8004472:	bfde      	ittt	le
 8004474:	2330      	movle	r3, #48	; 0x30
 8004476:	f805 3c01 	strble.w	r3, [r5, #-1]
 800447a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800447e:	1b52      	subs	r2, r2, r5
 8004480:	6122      	str	r2, [r4, #16]
 8004482:	464b      	mov	r3, r9
 8004484:	4621      	mov	r1, r4
 8004486:	4640      	mov	r0, r8
 8004488:	f8cd a000 	str.w	sl, [sp]
 800448c:	aa03      	add	r2, sp, #12
 800448e:	f7ff fedf 	bl	8004250 <_printf_common>
 8004492:	3001      	adds	r0, #1
 8004494:	d14c      	bne.n	8004530 <_printf_i+0x200>
 8004496:	f04f 30ff 	mov.w	r0, #4294967295
 800449a:	b004      	add	sp, #16
 800449c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044a0:	4834      	ldr	r0, [pc, #208]	; (8004574 <_printf_i+0x244>)
 80044a2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80044a6:	6829      	ldr	r1, [r5, #0]
 80044a8:	6823      	ldr	r3, [r4, #0]
 80044aa:	f851 6b04 	ldr.w	r6, [r1], #4
 80044ae:	6029      	str	r1, [r5, #0]
 80044b0:	061d      	lsls	r5, r3, #24
 80044b2:	d514      	bpl.n	80044de <_printf_i+0x1ae>
 80044b4:	07df      	lsls	r7, r3, #31
 80044b6:	bf44      	itt	mi
 80044b8:	f043 0320 	orrmi.w	r3, r3, #32
 80044bc:	6023      	strmi	r3, [r4, #0]
 80044be:	b91e      	cbnz	r6, 80044c8 <_printf_i+0x198>
 80044c0:	6823      	ldr	r3, [r4, #0]
 80044c2:	f023 0320 	bic.w	r3, r3, #32
 80044c6:	6023      	str	r3, [r4, #0]
 80044c8:	2310      	movs	r3, #16
 80044ca:	e7af      	b.n	800442c <_printf_i+0xfc>
 80044cc:	6823      	ldr	r3, [r4, #0]
 80044ce:	f043 0320 	orr.w	r3, r3, #32
 80044d2:	6023      	str	r3, [r4, #0]
 80044d4:	2378      	movs	r3, #120	; 0x78
 80044d6:	4828      	ldr	r0, [pc, #160]	; (8004578 <_printf_i+0x248>)
 80044d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80044dc:	e7e3      	b.n	80044a6 <_printf_i+0x176>
 80044de:	0659      	lsls	r1, r3, #25
 80044e0:	bf48      	it	mi
 80044e2:	b2b6      	uxthmi	r6, r6
 80044e4:	e7e6      	b.n	80044b4 <_printf_i+0x184>
 80044e6:	4615      	mov	r5, r2
 80044e8:	e7bb      	b.n	8004462 <_printf_i+0x132>
 80044ea:	682b      	ldr	r3, [r5, #0]
 80044ec:	6826      	ldr	r6, [r4, #0]
 80044ee:	1d18      	adds	r0, r3, #4
 80044f0:	6961      	ldr	r1, [r4, #20]
 80044f2:	6028      	str	r0, [r5, #0]
 80044f4:	0635      	lsls	r5, r6, #24
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	d501      	bpl.n	80044fe <_printf_i+0x1ce>
 80044fa:	6019      	str	r1, [r3, #0]
 80044fc:	e002      	b.n	8004504 <_printf_i+0x1d4>
 80044fe:	0670      	lsls	r0, r6, #25
 8004500:	d5fb      	bpl.n	80044fa <_printf_i+0x1ca>
 8004502:	8019      	strh	r1, [r3, #0]
 8004504:	2300      	movs	r3, #0
 8004506:	4615      	mov	r5, r2
 8004508:	6123      	str	r3, [r4, #16]
 800450a:	e7ba      	b.n	8004482 <_printf_i+0x152>
 800450c:	682b      	ldr	r3, [r5, #0]
 800450e:	2100      	movs	r1, #0
 8004510:	1d1a      	adds	r2, r3, #4
 8004512:	602a      	str	r2, [r5, #0]
 8004514:	681d      	ldr	r5, [r3, #0]
 8004516:	6862      	ldr	r2, [r4, #4]
 8004518:	4628      	mov	r0, r5
 800451a:	f000 f82f 	bl	800457c <memchr>
 800451e:	b108      	cbz	r0, 8004524 <_printf_i+0x1f4>
 8004520:	1b40      	subs	r0, r0, r5
 8004522:	6060      	str	r0, [r4, #4]
 8004524:	6863      	ldr	r3, [r4, #4]
 8004526:	6123      	str	r3, [r4, #16]
 8004528:	2300      	movs	r3, #0
 800452a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800452e:	e7a8      	b.n	8004482 <_printf_i+0x152>
 8004530:	462a      	mov	r2, r5
 8004532:	4649      	mov	r1, r9
 8004534:	4640      	mov	r0, r8
 8004536:	6923      	ldr	r3, [r4, #16]
 8004538:	47d0      	blx	sl
 800453a:	3001      	adds	r0, #1
 800453c:	d0ab      	beq.n	8004496 <_printf_i+0x166>
 800453e:	6823      	ldr	r3, [r4, #0]
 8004540:	079b      	lsls	r3, r3, #30
 8004542:	d413      	bmi.n	800456c <_printf_i+0x23c>
 8004544:	68e0      	ldr	r0, [r4, #12]
 8004546:	9b03      	ldr	r3, [sp, #12]
 8004548:	4298      	cmp	r0, r3
 800454a:	bfb8      	it	lt
 800454c:	4618      	movlt	r0, r3
 800454e:	e7a4      	b.n	800449a <_printf_i+0x16a>
 8004550:	2301      	movs	r3, #1
 8004552:	4632      	mov	r2, r6
 8004554:	4649      	mov	r1, r9
 8004556:	4640      	mov	r0, r8
 8004558:	47d0      	blx	sl
 800455a:	3001      	adds	r0, #1
 800455c:	d09b      	beq.n	8004496 <_printf_i+0x166>
 800455e:	3501      	adds	r5, #1
 8004560:	68e3      	ldr	r3, [r4, #12]
 8004562:	9903      	ldr	r1, [sp, #12]
 8004564:	1a5b      	subs	r3, r3, r1
 8004566:	42ab      	cmp	r3, r5
 8004568:	dcf2      	bgt.n	8004550 <_printf_i+0x220>
 800456a:	e7eb      	b.n	8004544 <_printf_i+0x214>
 800456c:	2500      	movs	r5, #0
 800456e:	f104 0619 	add.w	r6, r4, #25
 8004572:	e7f5      	b.n	8004560 <_printf_i+0x230>
 8004574:	08004a5a 	.word	0x08004a5a
 8004578:	08004a6b 	.word	0x08004a6b

0800457c <memchr>:
 800457c:	4603      	mov	r3, r0
 800457e:	b510      	push	{r4, lr}
 8004580:	b2c9      	uxtb	r1, r1
 8004582:	4402      	add	r2, r0
 8004584:	4293      	cmp	r3, r2
 8004586:	4618      	mov	r0, r3
 8004588:	d101      	bne.n	800458e <memchr+0x12>
 800458a:	2000      	movs	r0, #0
 800458c:	e003      	b.n	8004596 <memchr+0x1a>
 800458e:	7804      	ldrb	r4, [r0, #0]
 8004590:	3301      	adds	r3, #1
 8004592:	428c      	cmp	r4, r1
 8004594:	d1f6      	bne.n	8004584 <memchr+0x8>
 8004596:	bd10      	pop	{r4, pc}

08004598 <memmove>:
 8004598:	4288      	cmp	r0, r1
 800459a:	b510      	push	{r4, lr}
 800459c:	eb01 0402 	add.w	r4, r1, r2
 80045a0:	d902      	bls.n	80045a8 <memmove+0x10>
 80045a2:	4284      	cmp	r4, r0
 80045a4:	4623      	mov	r3, r4
 80045a6:	d807      	bhi.n	80045b8 <memmove+0x20>
 80045a8:	1e43      	subs	r3, r0, #1
 80045aa:	42a1      	cmp	r1, r4
 80045ac:	d008      	beq.n	80045c0 <memmove+0x28>
 80045ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80045b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80045b6:	e7f8      	b.n	80045aa <memmove+0x12>
 80045b8:	4601      	mov	r1, r0
 80045ba:	4402      	add	r2, r0
 80045bc:	428a      	cmp	r2, r1
 80045be:	d100      	bne.n	80045c2 <memmove+0x2a>
 80045c0:	bd10      	pop	{r4, pc}
 80045c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80045c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80045ca:	e7f7      	b.n	80045bc <memmove+0x24>

080045cc <_free_r>:
 80045cc:	b538      	push	{r3, r4, r5, lr}
 80045ce:	4605      	mov	r5, r0
 80045d0:	2900      	cmp	r1, #0
 80045d2:	d040      	beq.n	8004656 <_free_r+0x8a>
 80045d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045d8:	1f0c      	subs	r4, r1, #4
 80045da:	2b00      	cmp	r3, #0
 80045dc:	bfb8      	it	lt
 80045de:	18e4      	addlt	r4, r4, r3
 80045e0:	f000 f910 	bl	8004804 <__malloc_lock>
 80045e4:	4a1c      	ldr	r2, [pc, #112]	; (8004658 <_free_r+0x8c>)
 80045e6:	6813      	ldr	r3, [r2, #0]
 80045e8:	b933      	cbnz	r3, 80045f8 <_free_r+0x2c>
 80045ea:	6063      	str	r3, [r4, #4]
 80045ec:	6014      	str	r4, [r2, #0]
 80045ee:	4628      	mov	r0, r5
 80045f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045f4:	f000 b90c 	b.w	8004810 <__malloc_unlock>
 80045f8:	42a3      	cmp	r3, r4
 80045fa:	d908      	bls.n	800460e <_free_r+0x42>
 80045fc:	6820      	ldr	r0, [r4, #0]
 80045fe:	1821      	adds	r1, r4, r0
 8004600:	428b      	cmp	r3, r1
 8004602:	bf01      	itttt	eq
 8004604:	6819      	ldreq	r1, [r3, #0]
 8004606:	685b      	ldreq	r3, [r3, #4]
 8004608:	1809      	addeq	r1, r1, r0
 800460a:	6021      	streq	r1, [r4, #0]
 800460c:	e7ed      	b.n	80045ea <_free_r+0x1e>
 800460e:	461a      	mov	r2, r3
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	b10b      	cbz	r3, 8004618 <_free_r+0x4c>
 8004614:	42a3      	cmp	r3, r4
 8004616:	d9fa      	bls.n	800460e <_free_r+0x42>
 8004618:	6811      	ldr	r1, [r2, #0]
 800461a:	1850      	adds	r0, r2, r1
 800461c:	42a0      	cmp	r0, r4
 800461e:	d10b      	bne.n	8004638 <_free_r+0x6c>
 8004620:	6820      	ldr	r0, [r4, #0]
 8004622:	4401      	add	r1, r0
 8004624:	1850      	adds	r0, r2, r1
 8004626:	4283      	cmp	r3, r0
 8004628:	6011      	str	r1, [r2, #0]
 800462a:	d1e0      	bne.n	80045ee <_free_r+0x22>
 800462c:	6818      	ldr	r0, [r3, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	4401      	add	r1, r0
 8004632:	6011      	str	r1, [r2, #0]
 8004634:	6053      	str	r3, [r2, #4]
 8004636:	e7da      	b.n	80045ee <_free_r+0x22>
 8004638:	d902      	bls.n	8004640 <_free_r+0x74>
 800463a:	230c      	movs	r3, #12
 800463c:	602b      	str	r3, [r5, #0]
 800463e:	e7d6      	b.n	80045ee <_free_r+0x22>
 8004640:	6820      	ldr	r0, [r4, #0]
 8004642:	1821      	adds	r1, r4, r0
 8004644:	428b      	cmp	r3, r1
 8004646:	bf01      	itttt	eq
 8004648:	6819      	ldreq	r1, [r3, #0]
 800464a:	685b      	ldreq	r3, [r3, #4]
 800464c:	1809      	addeq	r1, r1, r0
 800464e:	6021      	streq	r1, [r4, #0]
 8004650:	6063      	str	r3, [r4, #4]
 8004652:	6054      	str	r4, [r2, #4]
 8004654:	e7cb      	b.n	80045ee <_free_r+0x22>
 8004656:	bd38      	pop	{r3, r4, r5, pc}
 8004658:	200029f0 	.word	0x200029f0

0800465c <sbrk_aligned>:
 800465c:	b570      	push	{r4, r5, r6, lr}
 800465e:	4e0e      	ldr	r6, [pc, #56]	; (8004698 <sbrk_aligned+0x3c>)
 8004660:	460c      	mov	r4, r1
 8004662:	6831      	ldr	r1, [r6, #0]
 8004664:	4605      	mov	r5, r0
 8004666:	b911      	cbnz	r1, 800466e <sbrk_aligned+0x12>
 8004668:	f000 f8bc 	bl	80047e4 <_sbrk_r>
 800466c:	6030      	str	r0, [r6, #0]
 800466e:	4621      	mov	r1, r4
 8004670:	4628      	mov	r0, r5
 8004672:	f000 f8b7 	bl	80047e4 <_sbrk_r>
 8004676:	1c43      	adds	r3, r0, #1
 8004678:	d00a      	beq.n	8004690 <sbrk_aligned+0x34>
 800467a:	1cc4      	adds	r4, r0, #3
 800467c:	f024 0403 	bic.w	r4, r4, #3
 8004680:	42a0      	cmp	r0, r4
 8004682:	d007      	beq.n	8004694 <sbrk_aligned+0x38>
 8004684:	1a21      	subs	r1, r4, r0
 8004686:	4628      	mov	r0, r5
 8004688:	f000 f8ac 	bl	80047e4 <_sbrk_r>
 800468c:	3001      	adds	r0, #1
 800468e:	d101      	bne.n	8004694 <sbrk_aligned+0x38>
 8004690:	f04f 34ff 	mov.w	r4, #4294967295
 8004694:	4620      	mov	r0, r4
 8004696:	bd70      	pop	{r4, r5, r6, pc}
 8004698:	200029f4 	.word	0x200029f4

0800469c <_malloc_r>:
 800469c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046a0:	1ccd      	adds	r5, r1, #3
 80046a2:	f025 0503 	bic.w	r5, r5, #3
 80046a6:	3508      	adds	r5, #8
 80046a8:	2d0c      	cmp	r5, #12
 80046aa:	bf38      	it	cc
 80046ac:	250c      	movcc	r5, #12
 80046ae:	2d00      	cmp	r5, #0
 80046b0:	4607      	mov	r7, r0
 80046b2:	db01      	blt.n	80046b8 <_malloc_r+0x1c>
 80046b4:	42a9      	cmp	r1, r5
 80046b6:	d905      	bls.n	80046c4 <_malloc_r+0x28>
 80046b8:	230c      	movs	r3, #12
 80046ba:	2600      	movs	r6, #0
 80046bc:	603b      	str	r3, [r7, #0]
 80046be:	4630      	mov	r0, r6
 80046c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046c4:	4e2e      	ldr	r6, [pc, #184]	; (8004780 <_malloc_r+0xe4>)
 80046c6:	f000 f89d 	bl	8004804 <__malloc_lock>
 80046ca:	6833      	ldr	r3, [r6, #0]
 80046cc:	461c      	mov	r4, r3
 80046ce:	bb34      	cbnz	r4, 800471e <_malloc_r+0x82>
 80046d0:	4629      	mov	r1, r5
 80046d2:	4638      	mov	r0, r7
 80046d4:	f7ff ffc2 	bl	800465c <sbrk_aligned>
 80046d8:	1c43      	adds	r3, r0, #1
 80046da:	4604      	mov	r4, r0
 80046dc:	d14d      	bne.n	800477a <_malloc_r+0xde>
 80046de:	6834      	ldr	r4, [r6, #0]
 80046e0:	4626      	mov	r6, r4
 80046e2:	2e00      	cmp	r6, #0
 80046e4:	d140      	bne.n	8004768 <_malloc_r+0xcc>
 80046e6:	6823      	ldr	r3, [r4, #0]
 80046e8:	4631      	mov	r1, r6
 80046ea:	4638      	mov	r0, r7
 80046ec:	eb04 0803 	add.w	r8, r4, r3
 80046f0:	f000 f878 	bl	80047e4 <_sbrk_r>
 80046f4:	4580      	cmp	r8, r0
 80046f6:	d13a      	bne.n	800476e <_malloc_r+0xd2>
 80046f8:	6821      	ldr	r1, [r4, #0]
 80046fa:	3503      	adds	r5, #3
 80046fc:	1a6d      	subs	r5, r5, r1
 80046fe:	f025 0503 	bic.w	r5, r5, #3
 8004702:	3508      	adds	r5, #8
 8004704:	2d0c      	cmp	r5, #12
 8004706:	bf38      	it	cc
 8004708:	250c      	movcc	r5, #12
 800470a:	4638      	mov	r0, r7
 800470c:	4629      	mov	r1, r5
 800470e:	f7ff ffa5 	bl	800465c <sbrk_aligned>
 8004712:	3001      	adds	r0, #1
 8004714:	d02b      	beq.n	800476e <_malloc_r+0xd2>
 8004716:	6823      	ldr	r3, [r4, #0]
 8004718:	442b      	add	r3, r5
 800471a:	6023      	str	r3, [r4, #0]
 800471c:	e00e      	b.n	800473c <_malloc_r+0xa0>
 800471e:	6822      	ldr	r2, [r4, #0]
 8004720:	1b52      	subs	r2, r2, r5
 8004722:	d41e      	bmi.n	8004762 <_malloc_r+0xc6>
 8004724:	2a0b      	cmp	r2, #11
 8004726:	d916      	bls.n	8004756 <_malloc_r+0xba>
 8004728:	1961      	adds	r1, r4, r5
 800472a:	42a3      	cmp	r3, r4
 800472c:	6025      	str	r5, [r4, #0]
 800472e:	bf18      	it	ne
 8004730:	6059      	strne	r1, [r3, #4]
 8004732:	6863      	ldr	r3, [r4, #4]
 8004734:	bf08      	it	eq
 8004736:	6031      	streq	r1, [r6, #0]
 8004738:	5162      	str	r2, [r4, r5]
 800473a:	604b      	str	r3, [r1, #4]
 800473c:	4638      	mov	r0, r7
 800473e:	f104 060b 	add.w	r6, r4, #11
 8004742:	f000 f865 	bl	8004810 <__malloc_unlock>
 8004746:	f026 0607 	bic.w	r6, r6, #7
 800474a:	1d23      	adds	r3, r4, #4
 800474c:	1af2      	subs	r2, r6, r3
 800474e:	d0b6      	beq.n	80046be <_malloc_r+0x22>
 8004750:	1b9b      	subs	r3, r3, r6
 8004752:	50a3      	str	r3, [r4, r2]
 8004754:	e7b3      	b.n	80046be <_malloc_r+0x22>
 8004756:	6862      	ldr	r2, [r4, #4]
 8004758:	42a3      	cmp	r3, r4
 800475a:	bf0c      	ite	eq
 800475c:	6032      	streq	r2, [r6, #0]
 800475e:	605a      	strne	r2, [r3, #4]
 8004760:	e7ec      	b.n	800473c <_malloc_r+0xa0>
 8004762:	4623      	mov	r3, r4
 8004764:	6864      	ldr	r4, [r4, #4]
 8004766:	e7b2      	b.n	80046ce <_malloc_r+0x32>
 8004768:	4634      	mov	r4, r6
 800476a:	6876      	ldr	r6, [r6, #4]
 800476c:	e7b9      	b.n	80046e2 <_malloc_r+0x46>
 800476e:	230c      	movs	r3, #12
 8004770:	4638      	mov	r0, r7
 8004772:	603b      	str	r3, [r7, #0]
 8004774:	f000 f84c 	bl	8004810 <__malloc_unlock>
 8004778:	e7a1      	b.n	80046be <_malloc_r+0x22>
 800477a:	6025      	str	r5, [r4, #0]
 800477c:	e7de      	b.n	800473c <_malloc_r+0xa0>
 800477e:	bf00      	nop
 8004780:	200029f0 	.word	0x200029f0

08004784 <_realloc_r>:
 8004784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004788:	4680      	mov	r8, r0
 800478a:	4614      	mov	r4, r2
 800478c:	460e      	mov	r6, r1
 800478e:	b921      	cbnz	r1, 800479a <_realloc_r+0x16>
 8004790:	4611      	mov	r1, r2
 8004792:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004796:	f7ff bf81 	b.w	800469c <_malloc_r>
 800479a:	b92a      	cbnz	r2, 80047a8 <_realloc_r+0x24>
 800479c:	f7ff ff16 	bl	80045cc <_free_r>
 80047a0:	4625      	mov	r5, r4
 80047a2:	4628      	mov	r0, r5
 80047a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047a8:	f000 f838 	bl	800481c <_malloc_usable_size_r>
 80047ac:	4284      	cmp	r4, r0
 80047ae:	4607      	mov	r7, r0
 80047b0:	d802      	bhi.n	80047b8 <_realloc_r+0x34>
 80047b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80047b6:	d812      	bhi.n	80047de <_realloc_r+0x5a>
 80047b8:	4621      	mov	r1, r4
 80047ba:	4640      	mov	r0, r8
 80047bc:	f7ff ff6e 	bl	800469c <_malloc_r>
 80047c0:	4605      	mov	r5, r0
 80047c2:	2800      	cmp	r0, #0
 80047c4:	d0ed      	beq.n	80047a2 <_realloc_r+0x1e>
 80047c6:	42bc      	cmp	r4, r7
 80047c8:	4622      	mov	r2, r4
 80047ca:	4631      	mov	r1, r6
 80047cc:	bf28      	it	cs
 80047ce:	463a      	movcs	r2, r7
 80047d0:	f7ff fb12 	bl	8003df8 <memcpy>
 80047d4:	4631      	mov	r1, r6
 80047d6:	4640      	mov	r0, r8
 80047d8:	f7ff fef8 	bl	80045cc <_free_r>
 80047dc:	e7e1      	b.n	80047a2 <_realloc_r+0x1e>
 80047de:	4635      	mov	r5, r6
 80047e0:	e7df      	b.n	80047a2 <_realloc_r+0x1e>
	...

080047e4 <_sbrk_r>:
 80047e4:	b538      	push	{r3, r4, r5, lr}
 80047e6:	2300      	movs	r3, #0
 80047e8:	4d05      	ldr	r5, [pc, #20]	; (8004800 <_sbrk_r+0x1c>)
 80047ea:	4604      	mov	r4, r0
 80047ec:	4608      	mov	r0, r1
 80047ee:	602b      	str	r3, [r5, #0]
 80047f0:	f7fc fd4c 	bl	800128c <_sbrk>
 80047f4:	1c43      	adds	r3, r0, #1
 80047f6:	d102      	bne.n	80047fe <_sbrk_r+0x1a>
 80047f8:	682b      	ldr	r3, [r5, #0]
 80047fa:	b103      	cbz	r3, 80047fe <_sbrk_r+0x1a>
 80047fc:	6023      	str	r3, [r4, #0]
 80047fe:	bd38      	pop	{r3, r4, r5, pc}
 8004800:	200029f8 	.word	0x200029f8

08004804 <__malloc_lock>:
 8004804:	4801      	ldr	r0, [pc, #4]	; (800480c <__malloc_lock+0x8>)
 8004806:	f000 b811 	b.w	800482c <__retarget_lock_acquire_recursive>
 800480a:	bf00      	nop
 800480c:	200029fc 	.word	0x200029fc

08004810 <__malloc_unlock>:
 8004810:	4801      	ldr	r0, [pc, #4]	; (8004818 <__malloc_unlock+0x8>)
 8004812:	f000 b80c 	b.w	800482e <__retarget_lock_release_recursive>
 8004816:	bf00      	nop
 8004818:	200029fc 	.word	0x200029fc

0800481c <_malloc_usable_size_r>:
 800481c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004820:	1f18      	subs	r0, r3, #4
 8004822:	2b00      	cmp	r3, #0
 8004824:	bfbc      	itt	lt
 8004826:	580b      	ldrlt	r3, [r1, r0]
 8004828:	18c0      	addlt	r0, r0, r3
 800482a:	4770      	bx	lr

0800482c <__retarget_lock_acquire_recursive>:
 800482c:	4770      	bx	lr

0800482e <__retarget_lock_release_recursive>:
 800482e:	4770      	bx	lr

08004830 <_init>:
 8004830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004832:	bf00      	nop
 8004834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004836:	bc08      	pop	{r3}
 8004838:	469e      	mov	lr, r3
 800483a:	4770      	bx	lr

0800483c <_fini>:
 800483c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800483e:	bf00      	nop
 8004840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004842:	bc08      	pop	{r3}
 8004844:	469e      	mov	lr, r3
 8004846:	4770      	bx	lr
